rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    function isContentCreator() {
        return isSignedIn() && request.auth.token.contentCreator == true;
    }
    function isGroupParticipant(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.participants;
    }
    function isGroupModerator(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.moderators;
    }
    function isTradeParticipant(tradeId) {
      return request.auth.uid in get(/databases/$(database)/documents/trades/$(tradeId)).data.participants;
    }

    // --- USER PROFILES & SUBCOLLECTIONS ---
    match /users/{userId} {
      allow read: if true;
      allow list: if isSignedIn(); // Allow listing users for search functionality
      allow update: if (isUser(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'isContentCreator'])) || isAdmin();
      allow create: if isUser(userId);

      match /referrals/{referralId} {
        allow read: if isUser(userId);
      }
      match /private/{docId} {
        allow read, write, delete: if isUser(userId);
      }
      match /collection/{cardId} {
        // Enhanced collection access for trading AND bulk operations
        allow read, list: if true; // Anyone can view collections for trading purposes
        allow create: if isSignedIn();
        // FIXED: Allow batch updates for bulk edit operations
        allow update: if isUser(userId);
        allow delete: if isUser(userId);
      }
      match /wishlist/{docId} {
        allow read, write, delete: if isUser(userId);
      }
      match /decks/{deckId} {
        allow read, write, delete: if isUser(userId);
      }
      match /notifications/{notificationId} {
        allow read, write, delete: if isUser(userId);
        allow create: if isSignedIn();
      }
      match /badges/{badgeId} {
        allow read: if true;
        allow write: if isUser(userId);
      }
    }
    
    // --- COLLECTION GROUP QUERIES ---
    match /{path=**}/collection/{cardId} {
      allow list, read: if true; // Essential for trading functionality
    }

    // --- DECK COLLECTIONS (FIXED FOR DECK BUILDER) ---
    match /decks/{deckId} {
      // Allow users to read their own decks and public decks
      allow read: if resource.data.authorId == request.auth.uid || resource.data.isPublic == true;
      // Allow listing decks for the current user or public decks
      allow list: if request.auth != null;
      // Allow creating decks if user is the author
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
      // Allow updating/deleting own decks
      allow update, delete: if resource.data.authorId == request.auth.uid;
    }

    // --- PUBLIC & SOCIAL COLLECTIONS ---
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if (isUser(resource.data.authorId)) ||
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments']));
      allow delete: if isUser(resource.data.authorId) || isAdmin();
    }
    
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /publicDecks/{deckId} {
      allow read: if true;
      allow create: if isUser(request.resource.data.authorId);
      allow update: if (isUser(resource.data.authorId)) || 
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratingCount', 'averageRating']));
      allow delete: if isUser(resource.data.authorId);

      match /ratings/{userId} {
        allow read: if true;
        allow write: if isUser(userId);
      }
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
      }
    }
    
    match /articles/{articleId} {
      allow read: if resource.data.status == 'published';
      allow create: if isSignedIn() && (isAdmin() || isContentCreator());
      allow update, delete: if isUser(resource.data.authorId) || isAdmin() || isContentCreator();
    }

    match /groups/{groupId} {
      allow list: if isSignedIn();
      allow get: if resource.data.isPublic == true || isGroupParticipant(groupId);
      allow create: if isSignedIn();
      allow update: if isGroupModerator(groupId) || (isSignedIn()
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'participantCount', 'participantInfo']));
      allow delete: if isUser(resource.data.creatorId);

      match /posts/{postId} {
        allow create, read: if isGroupParticipant(groupId);
        allow update, delete: if isUser(resource.data.authorId) || isGroupModerator(groupId);
      }
    }

    // --- TRADING & TRANSACTIONS (ENHANCED) ---
    match /trades/{tradeId} {
      allow read: if request.auth.uid in resource.data.participants;
      allow list: if isSignedIn(); // Allow listing trades for user's trade history
      allow create: if isSignedIn() && 
                      request.auth.uid == request.resource.data.proposerId &&
                      request.auth.uid in request.resource.data.participants;
      allow update: if request.auth.uid in resource.data.participants;
      allow delete: if request.auth.uid in resource.data.participants;
    }
    
    match /feedback/{feedbackId} {
      allow read: if true;
      allow create: if isSignedIn();
    }
    
    match /disputes/{disputeId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    // --- MESSAGING ---
    match /conversations/{conversationId} {
      allow read, update, delete: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;
      allow list: if isSignedIn(); // Allow listing conversations for user

      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid])
                            && request.resource.data.senderId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }

    // --- OTHER COLLECTIONS ---
    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isUser(resource.data.organizerId) || isAdmin();

      match /participants/{participantId} {
        allow read: if true;
        allow write: if isUser(participantId) || isUser(get(/databases/$(database)/documents/events/$(eventId)).data.organizerId) || isAdmin();
      }
    }

    match /friendRequests/{requestId} {
      allow create: if isUser(request.resource.data.senderId);
      allow read, update, delete: if isUser(resource.data.senderId) || isUser(resource.data.receiverId);
    }
    
    match /groupInvitations/{inviteId} {
      allow create: if isUser(request.resource.data.inviterId);
      allow read, delete: if isUser(resource.data.inviteeId);
    }

    // --- LOOKING FOR GAME (FIX) ---
    match /lfg_status/{statusId} {
      // Any signed-in user can see who is looking for a game.
      allow read: if isSignedIn();
      
      // A user can only create, update, or delete their OWN status.
      // The document ID (statusId) must match their user ID.
      allow write: if isUser(statusId);
    }

    // --- ADMIN-ONLY ---
    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    // --- MARKETPLACE (FIXED FOR INDIVIDUAL ACTIONS) ---
    match /marketplace/{listingId} {
      allow read: if true;
      allow list: if true; // Allow listing marketplace items
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.sellerId;
      allow update, delete: if isUser(resource.data.sellerId);
    }
    
    match /marketplaceListings/{listingId} {
      allow read: if true;
      allow list: if true; // Allow listing marketplace items
      // FIXED: Allow creation if user is authenticated and matches sellerData.uid
      allow create: if isSignedIn() && 
                      (request.auth.uid == request.resource.data.sellerData.uid ||
                       request.auth.uid == request.resource.data.sellerId);
      // FIXED: Allow update/delete if user matches sellerData.uid or sellerId
      allow update, delete: if isSignedIn() && 
                              (request.auth.uid == resource.data.sellerData.uid ||
                               request.auth.uid == resource.data.sellerId);
    }

    // --- TRADE PROPOSALS (NEW) ---
    match /tradeProposals/{proposalId} {
      allow read: if request.auth.uid in resource.data.participants;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && 
                      request.auth.uid == request.resource.data.proposerId &&
                      request.auth.uid in request.resource.data.participants;
      allow update: if request.auth.uid in resource.data.participants;
      allow delete: if request.auth.uid == resource.data.proposerId;
    }
  }
}
