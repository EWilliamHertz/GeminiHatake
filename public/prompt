We cannot search for cards in my_collection.html.
This is my_collection.html
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>
   My Collection - HatakeSocial
  </title>
<script src="https://cdn.tailwindcss.com">
</script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"/>
<link href="css/style.css" rel="stylesheet"/>
<script src="https://cdn.jsdelivr.net/npm/chart.js">
</script>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-200 font-sans overflow-hidden">
<div class="flex h-screen"><div class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden" id="sidebar-overlay"></div>
<aside class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex-shrink-0 flex flex-col fixed inset-y-0 left-0 z-50 lg:relative lg:translate-x-0 -translate-x-full transition-transform duration-300 ease-in-out" id="sidebar">
<div class="h-28 flex items-center justify-center border-b border-gray-200 dark:border-gray-700 px-4">
<a class="flex flex-col items-center space-y-1" href="app.html">
<img alt="HatakeSocial Logo" class="h-16" onerror="this.onerror=null; this.src='https://placehold.co/150x40?text=HatakeSocial';" src="https://i.imgur.com/B06rBhI.png"/>
<span class="font-bold text-lg text-blue-600 dark:text-blue-400">
       HatakeSocial
      </span>
</a>
</div>
<nav class="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="app.html">
<i class="fas fa-home w-6 text-center">
</i>
<span class="ml-3">
       Feed
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="messages.html">
<i class="fas fa-comments w-6 text-center">
</i>
<span class="ml-3">
       Messages
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="community.html">
<i class="fas fa-users w-6 text-center">
</i>
<span class="ml-3">
       Community
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=tcg"><i class="fas fa-newspaper w-6 text-center"></i><span class="ml-3">TCG Articles</span></a><a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=blog"><i class="fas fa-blog w-6 text-center"></i><span class="ml-3">Hatake Blog</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="events.html">
<i class="fas fa-calendar-alt w-6 text-center">
</i>
<span class="ml-3">
       Events
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="my_collection.html">
<i class="fas fa-layer-group w-6 text-center">
</i>
<span class="ml-3">
       My Collection
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="deck.html">
<i class="fas fa-book-open w-6 text-center">
</i>
<span class="ml-3">
       Deck Builder
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="shop.html">
<i class="fas fa-shopping-cart w-6 text-center">
</i>
<span class="ml-3">
       Shop
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="marketplace.html">
<i class="fas fa-store w-6 text-center">
</i>
<span class="ml-3">
       Marketplace
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="trades.html">
<i class="fas fa-exchange-alt w-6 text-center">
</i>
<span class="ml-3">
       Trades
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="profile.html">
<i class="fas fa-user w-6 text-center">
</i>
<span class="ml-3">
       Profile
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="settings.html">
<i class="fas fa-cog w-6 text-center">
</i>
<span class="ml-3">
       Settings
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="about.html">
<i class="fas fa-info-circle w-6 text-center">
</i>
<span class="ml-3">
       About Us
      </span>
</a>
</nav>
<div class="p-4 border-t border-gray-200 dark:border-gray-700 hidden" id="sidebar-user-info">
</div>
</aside>
<main class="flex-1 flex flex-col overflow-y-auto">
<header class="h-28 flex items-center justify-between px-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
<div class="flex items-center">
<button class="lg:hidden mr-4 text-gray-600 dark:text-gray-300" id="sidebar-toggle">
<i class="fas fa-bars text-xl">
</i>
</button>
<div class="relative">
<i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
</i>
<input class="w-full md:w-96 pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-gray-50 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="main-search-bar" placeholder="Search for cards, users, or articles..." type="text"/>
<div class="absolute mt-2 w-full md:w-96 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl z-10 hidden" id="main-search-results">
</div>
</div>
</div>
<div class="flex items-center space-x-5" id="user-actions">
<div class="space-x-2">
<button class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="header-login-btn">
        Login
       </button>
<button class="px-4 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700" id="header-register-btn">
        Register
       </button>
</div>
</div>
</header>
<main class="flex-grow container mx-auto px-4 py-8">
<div class="mb-6 border-b border-gray-200 dark:border-gray-700">
<nav aria-label="Tabs" class="flex -mb-px space-x-8">
<button class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-lg text-blue-600 border-blue-600" id="tab-collection">
        My Collection
       </button>
<button class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-lg text-gray-500 hover:text-gray-700 hover:border-gray-300" id="tab-wishlist">
        My Wishlist
       </button>
</nav>
</div>
<div class="mb-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-center" id="collection-stats-section">
<div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">
        Total Cards
       </h4>
<p class="text-2xl font-bold dark:text-white" id="stats-total-cards">
        0
       </p>
</div>
<div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">
        Unique Cards
       </h4>
<p class="text-2xl font-bold dark:text-white" id="stats-unique-cards">
        0
       </p>
</div>
<div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">
        Total Value
       </h4>
<p class="text-2xl font-bold dark:text-white" id="stats-total-value">
        $0.00
       </p>
</div>
<div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
<h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">
        Rarity Breakdown
       </h4>
<div class="text-lg font-bold dark:text-white flex justify-center space-x-3 mt-2" id="stats-rarity-breakdown">
</div>
</div>
</div>
<div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-8">
<h2 class="text-2xl font-bold mb-4 dark:text-white">
       Add to Your Lists
      </h2>
<div class="grid grid-cols-1 md:grid-cols-3 gap-8">
<div>
<h3 class="text-lg font-semibold mb-2 dark:text-gray-200">
         Manually Add a Card
        </h3>
<div class="space-y-3" id="manual-add-form">
<select class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="manual-game-select">
<option value="magic">
           Magic: The Gathering
          </option>
<option value="pokemon">
           Pok√©mon
          </option>
</select>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="manual-card-name" placeholder="Card Name (e.g., Sol Ring)" required="" type="text"/>
<button class="w-full bg-blue-600 text-white py-2 rounded-full hover:bg-blue-700" id="search-card-versions-btn" type="button">
          Search for Card
         </button>
</div>
<div class="mt-4 space-y-2 max-h-96 overflow-y-auto" id="manual-add-results">
</div>
</div>
<div>
<h3 class="text-lg font-semibold mb-2 dark:text-gray-200">
         Import from ManaBox (.csv)
        </h3>
<p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
         Export your collection from ManaBox and upload it here.
        </p>
<input accept=".csv" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 dark:file:bg-blue-900/50 file:text-blue-700 dark:file:text-blue-300 hover:file:bg-blue-100" id="csv-upload-input" type="file"/>
<button class="w-full mt-3 bg-green-600 text-white py-2 rounded-full hover:bg-green-700" id="csv-upload-btn">
         Upload CSV
        </button>
<p class="text-center text-sm mt-2 dark:text-gray-400" id="csv-status">
</p>
</div>
<div>
<h3 class="text-lg font-semibold mb-2 dark:text-gray-200">
         Bulk Add from Text
        </h3>
<p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
         Paste a list of cards for a guided, step-by-step import process.
        </p>
<a class="w-full mt-3 bg-purple-600 text-white py-2 px-4 rounded-full hover:bg-purple-700 text-center block" href="bulk_add.html">
<i class="fas fa-paste mr-2">
</i>
         Go to Bulk Add Tool
        </a>
</div>
</div>
</div>
<div class="mt-8">
<div class="tab-content" id="content-collection">
<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6">
<h2 class="text-3xl font-bold text-gray-800 dark:text-white">
         My Collection
        </h2>
<div class="flex flex-wrap items-center justify-start sm:justify-end gap-2">
<div class="p-1 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center">
<button class="view-btn p-2 rounded-full leading-none bg-white dark:bg-gray-800 shadow text-blue-600" id="grid-view-btn" title="Grid View">
<i class="fas fa-th-large">
</i>
</button>
<button class="view-btn p-2 rounded-full leading-none text-gray-500 dark:text-gray-400" id="list-view-btn" title="List View">
<i class="fas fa-list">
</i>
</button>
</div>
<button class="px-4 py-2 bg-indigo-500 text-white font-semibold rounded-full hover:bg-indigo-600" id="export-collection-btn">
<i class="fas fa-file-export mr-2">
</i>
          Export as Text
         </button>
<button class="px-4 py-2 bg-yellow-500 text-white font-semibold rounded-full hover:bg-yellow-600" id="quick-edit-btn">
<i class="fas fa-edit mr-2">
</i>
          Quick Edit
         </button>
<button class="px-4 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700" id="bulk-edit-btn">
          Bulk Edit
         </button>
</div>
</div>
<div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md mb-6" id="collection-filters">
<div class="grid grid-cols-2 md:grid-cols-5 gap-4">
<div>
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="filter-name">
           Name
          </label>
<input class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="filter-name" placeholder="Search by name..." type="text"/>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="filter-set">
           Set
          </label>
<select class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="filter-set">
<option value="all">
            All Sets
           </option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="filter-rarity">
           Rarity
          </label>
<select class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="filter-rarity">
<option value="all">
            All Rarities
           </option>
<option value="common">
            Common
           </option>
<option value="uncommon">
            Uncommon
           </option>
<option value="rare">
            Rare
           </option>
<option value="mythic">
            Mythic
           </option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="filter-color">
           Color
          </label>
<select class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="filter-color">
<option value="all">
            All Colors
           </option>
<option value="W">
            White
           </option>
<option value="U">
            Blue
           </option>
<option value="B">
            Black
           </option>
<option value="R">
            Red
           </option>
<option value="G">
            Green
           </option>
<option value="C">
            Colorless
           </option>
<option value="M">
            Multi-color
           </option>
</select>
</div>
<div class="flex items-end">
<button class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 font-semibold rounded-full hover:bg-gray-300 dark:hover:bg-gray-500" id="reset-filters-btn">
           Reset
          </button>
</div>
</div>
</div>
<div class="hidden bg-white dark:bg-gray-700 p-4 rounded-lg shadow-md mb-4 flex flex-wrap gap-4 items-center justify-between sticky top-20 z-40" id="bulk-action-bar">
<div class="flex items-center space-x-3">
<input class="h-5 w-5 rounded text-blue-600 focus:ring-blue-500" id="select-all-checkbox" type="checkbox"/>
<label class="font-medium dark:text-white" for="select-all-checkbox">
          Select All
         </label>
<span class="text-gray-600 dark:text-gray-300" id="selected-count">
          0 cards selected
         </span>
</div>
<div class="space-x-2">
<button class="px-4 py-2 bg-green-600 text-white font-semibold rounded-full hover:bg-green-700" id="list-selected-btn">
          List for Sale
         </button>
<button class="px-4 py-2 bg-red-600 text-white font-semibold rounded-full hover:bg-red-700" id="delete-selected-btn">
          Delete
         </button>
</div>
</div>
<div class="hidden bg-green-100 dark:bg-green-900/50 p-4 rounded-lg shadow-md mb-4 flex items-center justify-between sticky top-20 z-40" id="quick-edit-save-bar">
<p class="font-semibold text-green-800 dark:text-green-200">
<i class="fas fa-info-circle mr-2">
</i>
         You are in Quick Edit mode. Make your changes below and save.
        </p>
<button class="px-6 py-2 bg-green-600 text-white font-bold rounded-full hover:bg-green-700" id="save-quick-edits-btn">
<i class="fas fa-save mr-2">
</i>
         Save All Changes
        </button>
</div>
<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4" id="collection-grid-view">
</div>
<div class="hidden overflow-x-auto" id="collection-table-view">
</div>
</div>
<div class="tab-content hidden" id="content-wishlist">
<h2 class="text-3xl font-bold text-gray-800 dark:text-white mb-4">
        My Wishlist
       </h2>
<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4" id="wishlist-list">
</div>
</div>
</div>
</main>
<div class="modal-overlay" id="add-version-modal">
<div class="modal-content w-full max-w-md dark:bg-gray-800">
<button class="close-button" id="close-add-version-modal">
       √ó
      </button>
<h2 class="text-2xl font-bold mb-4 dark:text-white">
       Add Card
      </h2>
<div class="flex items-center space-x-4 mb-4" id="add-version-preview">
<img class="w-24 rounded-lg" id="add-version-image" src="https://placehold.co/100x140"/>
<div>
<h3 class="text-lg font-bold dark:text-white" id="add-version-name">
         Card Name
        </h3>
<p class="text-sm text-gray-500 dark:text-gray-400" id="add-version-set">
         Set Name
        </p>
</div>
</div>
<form class="space-y-4" id="add-version-form">
<input id="add-version-data" type="hidden"/>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="add-to-list-select">
         Add to:
        </label>
<select class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="add-to-list-select">
<option value="collection">
          My Collection
         </option>
<option value="wishlist">
          My Wishlist
         </option>
</select>
</div>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="add-version-quantity">
         Quantity
        </label>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="add-version-quantity" min="1" required="" type="number" value="1"/>
</div>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="add-version-condition">
         Condition
        </label>
<select class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="add-version-condition">
<option>
          Near Mint
         </option>
<option>
          Lightly Played
         </option>
<option>
          Moderately Played
         </option>
<option>
          Heavily Played
         </option>
<option>
          Damaged
         </option>
</select>
</div>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="add-version-language">
         Language
        </label>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="add-version-language" type="text" value="English"/>
</div>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="add-version-purchase-price">
         Purchase Price (per card)
        </label>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="add-version-purchase-price" placeholder="0.00" step="0.01" type="number"/>
</div>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="add-version-notes">
         Notes
        </label>
<textarea class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="add-version-notes"></textarea>
</div>
<div>
<input class="mr-2 h-4 w-4 rounded text-blue-600 focus:ring-blue-500" id="add-version-foil" type="checkbox"/>
<label class="dark:text-gray-300" for="add-version-foil">
         Is this card foil?
        </label>
</div>
<div class="flex items-center">
<input class="mr-2 h-4 w-4 rounded text-blue-600 focus:ring-blue-500" id="add-version-signed" type="checkbox"/>
<label class="dark:text-gray-300" for="add-version-signed">
         Is this card signed?
        </label>
</div>
<div>
<label class="block font-bold mb-1 dark:text-gray-200" for="card-image-upload">
         Custom Image
        </label>
<input accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:font-semibold file:bg-blue-50 dark:file:bg-blue-900/50 file:text-blue-700 dark:file:text-blue-300 hover:file:bg-blue-100" id="card-image-upload" type="file"/>
</div>
<button class="w-full bg-green-600 text-white py-2 rounded-full hover:bg-green-700" type="submit">
        Add Card
       </button>
</form>
</div>
</div>
<div class="modal-overlay" id="edit-card-modal">
<div class="modal-content w-full max-w-md dark:bg-gray-800">
<button class="close-button" id="close-edit-card-modal">
       √ó
      </button>
<h2 class="text-2xl font-bold mb-4 dark:text-white">
       Edit Card
      </h2>
<form id="edit-card-form">
<input id="edit-card-id" type="hidden"/>
<input id="edit-card-list-type" type="hidden"/>
<div class="mb-4">
<label class="block font-bold mb-1 dark:text-gray-200" for="edit-card-quantity">
         Quantity
        </label>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="edit-card-quantity" min="1" type="number"/>
</div>
<div class="mb-4">
<label class="block font-bold mb-1 dark:text-gray-200" for="edit-card-condition">
         Condition
        </label>
<select class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="edit-card-condition">
<option>
          Near Mint
         </option>
<option>
          Lightly Played
         </option>
<option>
          Moderately Played
         </option>
<option>
          Heavily Played
         </option>
<option>
          Damaged
         </option>
</select>
</div>
<div class="mb-4">
<label class="block font-bold mb-1 dark:text-gray-200" for="edit-card-language">
         Language
        </label>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="edit-card-language" type="text"/>
</div>
<div class="mb-4">
<label class="block font-bold mb-1 dark:text-gray-200" for="edit-card-purchase-price">
         Purchase Price
        </label>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="edit-card-purchase-price" placeholder="0.00" step="0.01" type="number"/>
</div>
<div class="mb-4">
<label class="block font-bold mb-1 dark:text-gray-200" for="edit-card-notes">
         Notes
        </label>
<textarea class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="edit-card-notes"></textarea>
</div>
<div class="mb-6">
<input class="mr-2 h-4 w-4 rounded text-blue-600 focus:ring-blue-500" id="edit-card-foil" type="checkbox"/>
<label class="dark:text-gray-300" for="edit-card-foil">
         Foil
        </label>
</div>
<div class="mb-6">
<input class="mr-2 h-4 w-4 rounded text-blue-600 focus:ring-blue-500" id="edit-card-signed" type="checkbox"/>
<label class="dark:text-gray-300" for="edit-card-signed">
         Signed
        </label>
</div>
<div class="mb-6">
<label class="block font-bold mb-1 dark:text-gray-200" for="edit-card-image-upload">
         Custom Image
        </label>
<input accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:font-semibold file:bg-blue-50 dark:file:bg-blue-900/50 file:text-blue-700 dark:file:text-blue-300 hover:file:bg-blue-100" id="edit-card-image-upload" type="file"/>
</div>
<button class="w-full bg-green-600 text-white py-2 rounded-full hover:bg-green-700" type="submit">
        Save Changes
       </button>
</form>
</div>
</div>
<div class="modal-overlay" id="manage-listing-modal">
<div class="modal-content w-full max-w-md dark:bg-gray-800">
<button class="close-button" id="close-listing-modal">
       √ó
      </button>
<h2 class="text-2xl font-bold mb-4 dark:text-white">
       Manage Listing
      </h2>
<div class="flex items-center space-x-4 mb-6" id="listing-card-preview">
<img class="w-24 rounded-lg" id="listing-card-image" src="https://placehold.co/100x140"/>
<div>
<h3 class="text-lg font-bold dark:text-white" id="listing-card-name">
         Card Name
        </h3>
<p class="text-sm text-gray-500 dark:text-gray-400" id="listing-card-set">
         Set Name
        </p>
</div>
</div>
<form id="manage-listing-form">
<input id="listing-card-id" type="hidden"/>
<div class="flex items-center justify-between bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
<label class="font-semibold text-gray-700 dark:text-gray-200" for="forSale">
         List this card for sale/trade?
        </label>
<div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
<input class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer" id="forSale" name="forSale" type="checkbox"/>
<label class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer" for="forSale">
</label>
</div>
</div>
<div class="mt-4 hidden" id="price-input-container">
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="salePrice">
         Sale Price (SEK)
        </label>
<div class="relative mt-1">
<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
<span class="text-gray-500 sm:text-sm">
           kr
          </span>
</div>
<input class="pl-7 block w-full border border-gray-300 rounded-md shadow-sm p-2 dark:bg-gray-700 dark:border-gray-600" id="salePrice" placeholder="0.00" step="0.01" type="number"/>
</div>
</div>
<div class="mt-8 text-right">
<button class="px-6 py-2 bg-green-600 text-white font-semibold rounded-full hover:bg-green-700" type="submit">
         Save Listing
        </button>
</div>
</form>
</div>
</div>
<div class="modal-overlay" id="list-for-sale-modal">
<div class="modal-content w-full max-w-md dark:bg-gray-800">
<button class="close-button" id="close-list-sale-modal">
       √ó
      </button>
<h2 class="text-2xl font-bold mb-4 dark:text-white">
       List Selected Cards
      </h2>
<p class="mb-4 dark:text-gray-300">
       You have selected
       <strong id="list-sale-count">
        0
       </strong>
       cards. How would you like to price them?
      </p>
<div class="space-y-4">
<form class="space-y-2" id="percentage-price-form">
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
         Set price based on market value:
        </label>
<div class="flex items-center space-x-2">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="percentage-price-input" max="500" min="1" placeholder="e.g., 90" required="" type="number"/>
<span class="font-bold dark:text-white">
          %
         </span>
<button class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" type="submit">
          Set
         </button>
</div>
</form>
<div class="relative">
<div aria-hidden="true" class="absolute inset-0 flex items-center">
<div class="w-full border-t border-gray-300 dark:border-gray-600">
</div>
</div>
<div class="relative flex justify-center">
<span class="px-2 bg-white dark:bg-gray-800 text-sm text-gray-500">
          OR
         </span>
</div>
</div>
<form class="space-y-2" id="fixed-undercut-form">
<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
         Undercut lowest listing by a fixed amount:
        </label>
<div class="flex items-center space-x-2">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="fixed-undercut-input" placeholder="e.g., 10.00" required="" step="0.01" type="number"/>
<button class="px-4 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700" type="submit">
          Set
         </button>
</div>
</form>
</div>
</div>
</div>
</main>
</div>
<footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-auto">
<div class="container mx-auto py-8 px-4">
<div class="grid grid-cols-2 md:grid-cols-4 gap-8">
<div>
<h3 class="font-bold text-gray-900 dark:text-white mb-4">
       HatakeSocial
      </h3>
<p class="text-gray-600 dark:text-gray-400 text-sm">
       The all-in-one platform for TCG enthusiasts.
      </p>
</div>
<div>
<h3 class="font-bold text-gray-900 dark:text-white mb-4">
       Company
      </h3>
<ul class="space-y-2 text-sm">
<li>
<a class="text-gray-600 dark:text-gray-400 hover:text-blue-500" href="about.html">
         About Us
        </a>
</li>
<li>
<a class="text-gray-600 dark:text-gray-400 hover:text-blue-500" href="partner.html">
         Partners
        </a>
</li>
<li>
<a class="text-gray-600 dark:text-gray-400 hover:text-blue-500" href="contact.html">
         Contact
        </a>
</li>
</ul>
</div>
<div>
<h3 class="font-bold text-gray-900 dark:text-white mb-4">
       Legal
      </h3>
<ul class="space-y-2 text-sm">
<li>
<a class="text-gray-600 dark:text-gray-400 hover:text-blue-500" href="#">
         Privacy Policy
        </a>
</li>
<li>
<a class="text-gray-600 dark:text-gray-400 hover:text-blue-500" href="#">
         Terms of Service
        </a>
</li>
</ul>
</div>
<div>
<h3 class="font-bold text-gray-900 dark:text-white mb-4">
       Display Options
      </h3>
<div class="flex items-center space-x-4">
<div>
<label class="text-sm text-gray-600 dark:text-gray-400" for="theme-toggle">
         Theme
        </label>
<button class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5" id="theme-toggle" type="button">
<i class="fas fa-sun hidden" id="theme-toggle-sun-icon">
</i>
<i class="fas fa-moon hidden" id="theme-toggle-moon-icon">
</i>
</button>
</div>
<div id="currency-selector-container">
</div>
</div>
</div>
</div>
<div class="mt-8 border-t border-gray-200 dark:border-gray-700 pt-8 flex flex-col md:flex-row justify-between items-center text-sm text-gray-500 dark:text-gray-400">
<p>
      ¬© 2025 Hatake. All Rights Reserved.
     </p>
<div class="flex space-x-6 mt-4 md:mt-0">
<a class="hover:text-gray-900 dark:hover:text-white" href="#">
<i class="fab fa-twitter">
</i>
</a>
<a class="hover:text-gray-900 dark:hover:text-white" href="#">
<i class="fab fa-facebook-f">
</i>
</a>
<a class="hover:text-gray-900 dark:hover:text-white" href="#">
<i class="fab fa-instagram">
</i>
</a>
</div>
</div>
</div>
</footer>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-firestore-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-storage-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-functions-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-analytics-compat.js">
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js">
</script>
<script src="js/auth.js">
</script>
<script src="js/collection.js">
</script>
<script src="js/notifications.js">
</script>
<script src="js/darkmode.js">
</script>
<img class="hidden" id="manual-add-tooltip" style="position: absolute; z-index: 100; pointer-events: none; border: 2px solid #000; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); width: 223px; height: 310px;"/>
<!-- Login Modal -->
<!-- Register Modal -->
<script src="/__/firebase/9.6.1/firebase-app-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-auth-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-firestore-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-storage-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-functions-compat.js"></script>
<script src="/__/firebase/init.js"></script>
<div class="fixed inset-0 bg-black bg-opacity-60 hidden items-center justify-center z-[1001]" id="cartModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-lg flex flex-col" style="height: 90vh; max-height: 800px;">
<div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
<h2 class="text-xl font-bold">Your Cart</h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeCartModal">√ó</button>
</div>
<div class="p-6 flex-grow overflow-y-auto" id="cart-items-container">
<!-- Cart items will be dynamically inserted here -->
<p class="text-center text-gray-500 dark:text-gray-400">Your cart is empty.</p>
</div>
<div class="p-6 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
<div class="flex justify-between items-center font-bold text-lg">
<span>Subtotal</span>
<span id="cart-subtotal">$0.00</span>
</div>
<p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Shipping &amp; taxes calculated at checkout.</p>
<button class="w-full mt-4 bg-green-600 text-white font-semibold py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400" disabled="" id="checkout-btn">
                    Proceed to Checkout
                </button>
</div>
</div>
</div>
<script src="js/cart.js"></script><script>
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebarOverlay = document.getElementById('sidebar-overlay');

            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', () => {
                    sidebar.classList.toggle('-translate-x-full');
                    sidebarOverlay.classList.toggle('hidden');
                });
            }

            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', () => {
                    sidebar.classList.add('-translate-x-full');
                    sidebarOverlay.classList.add('hidden');
                });
            }
        </script>
<script src="js/messenger.js"></script>
<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-[1001]" id="new-conversation-modal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
<h2 class="text-2xl font-bold mb-4">Start a new conversation</h2>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mb-4" id="user-search-input" placeholder="Search for a user by handle..." type="text"/>
<div class="max-h-60 overflow-y-auto" id="user-search-results">
</div>
<button class="mt-4 w-full bg-gray-200 dark:bg-gray-700 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 close-modal-btn" id="close-modal-btn">
            Cancel
        </button>
</div>
</div>
<div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="loginModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Login
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeLoginModal">
                √ó
            </button>
</div>
<form class="mt-4 space-y-4" id="loginForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginPassword" placeholder="Password" required="" type="password"/>
<p class="text-red-500 text-sm hidden" id="login-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Login
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleLoginButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Sign in with Google
            </button>
</form>
</div>
</div><div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="registerModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Register
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeRegisterModal">
                √ó
            </button>
</div>
<form class="mt-4 space-y-4" id="registerForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerPassword" placeholder="Password" required="" type="password"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCity" placeholder="City" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCountry" placeholder="Country" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerFavoriteTcg" placeholder="Favorite TCG" type="text"/>
<p class="text-red-500 text-sm hidden" id="register-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Register
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleRegisterButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Register with Google
            </button>
</form>
</div>
</div></body>
</html>

This is collection.js:
/**
 * HatakeSocial - My Collection Page Script (v29.5 - Wishlist Click Fix 2)
 *
 * This script handles all logic for the my_collection.html page.
 * - FIX: Corrected the event listener logic to properly handle clicks on wishlist items.
 */

// --- Helper Functions (Global Scope) ---

/**
 * Gets the correct image URL for any card type from Scryfall data.
 * @param {object} cardData The full card data object from Scryfall or Firestore.
 * @param {string} [size='normal'] The desired image size ('small', 'normal', 'large').
 * @returns {string} The URL of the card image or a placeholder.
 */
function getCardImageUrl(cardData, size = 'normal') {
    if (cardData?.card_faces?.[0]?.image_uris?.[size]) {
        return cardData.card_faces[0].image_uris[size];
    }
    if (cardData?.image_uris?.[size]) {
        return cardData.image_uris[size];
    }
    if (cardData?.customImageUrl) {
        return cardData.customImageUrl;
    }
    if (cardData?.imageUrl) {
        return cardData.imageUrl;
    }
    console.warn('No image URL found for card:', cardData?.name);
    return 'https://placehold.co/223x310/cccccc/969696?text=No+Image';
}

/**
 * Safely converts a price using the global converter, with a fallback.
 * @param {number} value The price in USD.
 * @returns {string} The formatted price string.
 */
function safeFormatPrice(value) {
    if (window.HatakeSocial && typeof window.HatakeSocial.convertAndFormatPrice === 'function') {
        return window.HatakeSocial.convertAndFormatPrice(value, 'USD');
    }
    return `$${Number(value).toFixed(2)} USD`;
}

function openModal(modal) {
    if (modal) modal.classList.remove('hidden');
}

function closeModal(modal) {
    if (modal) modal.classList.add('hidden');
}

// --- Main Script ---

document.addEventListener('authReady', (e) => {
    console.log('[Collection v29.5] Auth ready. Initializing script...');
    const user = e.detail.user;
    const mainContainer = document.querySelector('main.container');

    if (!mainContainer) {
        console.error('[Collection v29.5] Critical error: main container not found. Script cannot run.');
        return;
    }

    if (!user) {
        console.log('[Collection v29.5] No user found. Displaying login message.');
        mainContainer.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 p-8">Please log in to manage your collection.</p>';
        return;
    }
    console.log(`[Collection v29.5] User ${user.uid} authenticated. Setting up page elements.`);

    // --- State ---
    let bulkEditMode = false;
    let quickEditMode = false;
    let selectedCards = new Set();
    let fullCollection = [];
    let fullWishlist = [];
    let filteredCollection = [];
    let currentView = 'grid';

    // --- DOM Element References ---
    const elements = {
        tabs: document.querySelectorAll('.tab-button'),
        tabContents: document.querySelectorAll('.tab-content'),
        csvUploadBtn: document.getElementById('csv-upload-btn'),
        csvUploadInput: document.getElementById('csv-upload-input'),
        csvStatus: document.getElementById('csv-status'),
        collectionGridView: document.getElementById('collection-grid-view'),
        collectionTableView: document.getElementById('collection-table-view'),
        wishlistListContainer: document.getElementById('wishlist-list'),
        bulkEditBtn: document.getElementById('bulk-edit-btn'),
        bulkActionBar: document.getElementById('bulk-action-bar'),
        selectedCountEl: document.getElementById('selected-count'),
        selectAllCheckbox: document.getElementById('select-all-checkbox'),
        listSelectedBtn: document.getElementById('list-selected-btn'),
        deleteSelectedBtn: document.getElementById('delete-selected-btn'),
        listForSaleModal: document.getElementById('list-for-sale-modal'),
        editCardModal: document.getElementById('edit-card-modal'),
        editCardForm: document.getElementById('edit-card-form'),
        manageListingModal: document.getElementById('manage-listing-modal'),
        manageListingForm: document.getElementById('manage-listing-form'),
        quickEditBtn: document.getElementById('quick-edit-btn'),
        quickEditSaveBar: document.getElementById('quick-edit-save-bar'),
        saveQuickEditsBtn: document.getElementById('save-quick-edits-btn'),
        percentagePriceForm: document.getElementById('percentage-price-form'),
        fixedUndercutForm: document.getElementById('fixed-undercut-form'),
        manualGameSelect: document.getElementById('manual-game-select'),
        searchCardVersionsBtn: document.getElementById('search-card-versions-btn'),
        manualAddResultsContainer: document.getElementById('manual-add-results'),
        addVersionModal: document.getElementById('add-version-modal'),
        addVersionForm: document.getElementById('add-version-form'),
        exportCollectionBtn: document.getElementById('export-collection-btn'),
        filterNameInput: document.getElementById('filter-name'),
        filterSetSelect: document.getElementById('filter-set'),
        filterRaritySelect: document.getElementById('filter-rarity'),
        filterColorSelect: document.getElementById('filter-color'),
        resetFiltersBtn: document.getElementById('reset-filters-btn'),
        gridViewBtn: document.getElementById('grid-view-btn'),
        listViewBtn: document.getElementById('list-view-btn'),
    };

    const loadCollectionData = async () => {
        if (!elements.collectionGridView) return;
        elements.collectionGridView.innerHTML = '<p class="text-center p-4 text-gray-500 dark:text-gray-400">Loading your collection...</p>';
        try {
            const snapshot = await db.collection('users').doc(user.uid).collection('collection').orderBy('name').get();
            fullCollection = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            filteredCollection = [...fullCollection];
            console.log(`[Collection v29.5] Loaded ${fullCollection.length} cards from Firestore.`);
            calculateAndDisplayStats(fullCollection);
            populateFilters();
            renderCurrentView();
        } catch (error) {
            console.error(`[Collection v29.5] Error loading collection:`, error);
            if (elements.collectionGridView) elements.collectionGridView.innerHTML = `<p class="text-center text-red-500 p-4">Could not load collection. See console for details.</p>`;
        }
    };

    const loadWishlistData = async () => {
        if (!elements.wishlistListContainer) return;
        elements.wishlistListContainer.innerHTML = '<p class="text-center p-4 text-gray-500 dark:text-gray-400">Loading wishlist...</p>';
        try {
            const snapshot = await db.collection('users').doc(user.uid).collection('wishlist').orderBy('name').get();
            fullWishlist = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            renderWishlist(fullWishlist);
        } catch (error) {
            console.error(`[Collection v29.5] Error loading wishlist:`, error);
            if(elements.wishlistListContainer) elements.wishlistListContainer.innerHTML = `<p class="text-center text-red-500 p-4">Could not load your wishlist.</p>`;
        }
    };

    const renderWishlist = (wishlistItems) => {
        if (!elements.wishlistListContainer) return;
        if (wishlistItems.length === 0) {
            elements.wishlistListContainer.innerHTML = `<p class="text-center p-4 text-gray-500 dark:text-gray-400 col-span-full">Your wishlist is empty.</p>`;
            return;
        }
        elements.wishlistListContainer.innerHTML = '';
        wishlistItems.forEach(card => {
            const cardEl = document.createElement('div');
            cardEl.className = 'relative group cursor-pointer';
            cardEl.dataset.id = card.id;
            cardEl.innerHTML = `
                <img src="${getCardImageUrl(card, 'normal')}" alt="${card.name}" class="rounded-lg shadow-md w-full" onerror="this.onerror=null;this.src='https://placehold.co/223x310/cccccc/969696?text=Image+Not+Found';">
                <div class="card-actions absolute top-0 right-0 p-1 bg-black bg-opacity-50 rounded-bl-lg opacity-0 group-hover:opacity-100 transition-opacity">
                    <button class="edit-card-btn text-white text-xs" data-id="${card.id}" data-list="wishlist"><i class="fas fa-edit"></i></button>
                    <button class="delete-card-btn text-white text-xs ml-1" data-id="${card.id}" data-list="wishlist"><i class="fas fa-trash"></i></button>
                </div>
            `;
            elements.wishlistListContainer.appendChild(cardEl);
        });
    };

    const calculateAndDisplayStats = (collectionData) => {
        let totalCards = 0;
        let totalValue = 0;
        collectionData.forEach(card => {
            const quantity = card.quantity || 1;
            totalCards += quantity;
            const price = parseFloat(card.isFoil ? card.priceUsdFoil : card.priceUsd) || 0;
            totalValue += price * quantity;
        });

        const statsTotalCardsEl = document.getElementById('stats-total-cards');
        const statsUniqueCardsEl = document.getElementById('stats-unique-cards');
        const statsTotalValueEl = document.getElementById('stats-total-value');

        if (statsTotalCardsEl) statsTotalCardsEl.textContent = totalCards;
        if (statsUniqueCardsEl) statsUniqueCardsEl.textContent = new Set(collectionData.map(c => c.name)).size;
        if (statsTotalValueEl) statsTotalValueEl.textContent = safeFormatPrice(totalValue);
    };

    const populateFilters = () => {
        if (!elements.filterSetSelect) return;
        const sets = new Set(fullCollection.map(card => card.setName).filter(Boolean));
        elements.filterSetSelect.innerHTML = '<option value="all">All Sets</option>';
        [...sets].sort().forEach(setName => {
            const option = document.createElement('option');
            option.value = setName;
            option.textContent = setName;
            elements.filterSetSelect.appendChild(option);
        });
    };

    const applyFilters = () => {
        const nameFilter = elements.filterNameInput ? elements.filterNameInput.value.toLowerCase() : '';
        const setFilter = elements.filterSetSelect ? elements.filterSetSelect.value : 'all';
        const rarityFilter = elements.filterRaritySelect ? elements.filterRaritySelect.value : 'all';
        const colorFilter = elements.filterColorSelect ? elements.filterColorSelect.value : 'all';

        filteredCollection = fullCollection.filter(card => {
            const cardColors = card.colors || [];
            const nameMatch = card.name.toLowerCase().includes(nameFilter);
            const setMatch = setFilter === 'all' || card.setName === setFilter;
            const rarityMatch = rarityFilter === 'all' || card.rarity === rarityFilter;
            let colorMatch = true;
            if (colorFilter !== 'all') {
                if (colorFilter === 'M') colorMatch = cardColors.length > 1;
                else if (colorFilter === 'C') colorMatch = cardColors.length === 0;
                else colorMatch = cardColors.includes(colorFilter);
            }
            return nameMatch && setMatch && rarityMatch && colorMatch;
        });
        renderCurrentView();
    };

    const renderCurrentView = () => {
        if (currentView === 'grid') renderGridView();
        else renderListView();
    };

    const renderGridView = () => {
        const container = elements.collectionGridView;
        if (!container) return;

        if (elements.collectionTableView) elements.collectionTableView.classList.add('hidden');
        container.classList.remove('hidden');

        if (filteredCollection.length === 0) {
            container.innerHTML = `<p class="text-center p-4 text-gray-500 dark:text-gray-400 col-span-full">No cards found.</p>`;
            return;
        }

        container.innerHTML = '';
        filteredCollection.forEach(card => {
            const cardEl = document.createElement('div');
            cardEl.className = 'relative group cursor-pointer';
            cardEl.dataset.id = card.id;

            const forSaleIndicator = card.forSale ? 'border-4 border-green-500' : '';
            const isSelected = selectedCards.has(card.id);
            const checkboxOverlay = bulkEditMode ? `<div class="bulk-checkbox-overlay absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center text-white text-3xl ${isSelected ? '' : 'hidden'}"><i class="fas fa-check-circle"></i></div>` : '';
            const priceUsd = parseFloat(card.isFoil ? card.priceUsdFoil : card.priceUsd) || 0;
            const formattedPrice = priceUsd > 0 ? safeFormatPrice(priceUsd) : '';
            const priceTagHTML = formattedPrice ? `<div class="absolute top-1.5 left-1.5 bg-black bg-opacity-70 text-white text-xs font-bold px-2 py-1 rounded-full pointer-events-none">${formattedPrice}</div>` : '';
            const quantityBadge = `<div class="absolute top-1.5 right-1.5 bg-gray-900 bg-opacity-70 text-white text-xs font-bold px-2 py-1 rounded-full pointer-events-none">x${card.quantity || 1}</div>`;

            cardEl.innerHTML = `
                <div class="relative">
                    <img src="${getCardImageUrl(card, 'normal')}" alt="${card.name}" class="rounded-lg shadow-md w-full ${forSaleIndicator}" onerror="this.onerror=null;this.src='https://placehold.co/223x310/cccccc/969696?text=Image+Not+Found';">
                    ${quantityBadge}
                    ${checkboxOverlay}
                </div>
                ${priceTagHTML}
                <div class="card-actions absolute bottom-0 right-0 p-1 bg-black bg-opacity-50 rounded-tl-lg opacity-0 group-hover:opacity-100 transition-opacity">
                    <button class="edit-card-btn text-white text-xs" data-id="${card.id}" data-list="collection"><i class="fas fa-edit"></i></button>
                    <button class="delete-card-btn text-white text-xs ml-1" data-id="${card.id}" data-list="collection"><i class="fas fa-trash"></i></button>
                    <button class="manage-listing-btn text-white text-xs ml-1" data-id="${card.id}" data-list="collection"><i class="fas fa-tags"></i></button>
                </div>`;
            container.appendChild(cardEl);
        });
    };

    const renderListView = () => {
        const container = elements.collectionTableView;
        if (!container) return;

        if (elements.collectionGridView) elements.collectionGridView.classList.add('hidden');
        container.classList.remove('hidden');

        if (filteredCollection.length === 0) {
            container.innerHTML = `<p class="text-center p-4 text-gray-500 dark:text-gray-400">No cards match your filters.</p>`;
            return;
        }

        let tableHTML = `
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Set</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Qty</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Value</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Notes</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">`;
        filteredCollection.forEach(card => {
            const priceUsd = parseFloat(card.isFoil ? card.priceUsdFoil : card.priceUsd) || 0;
            const formattedPrice = priceUsd > 0 ? safeFormatPrice(priceUsd) : 'N/A';
            tableHTML += `
                <tr class="group" data-id="${card.id}">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${card.name} ${card.isFoil ? '<i class="fas fa-star text-yellow-400"></i>' : ''} ${card.isSigned ? '<i class="fas fa-signature text-yellow-500"></i>' : ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${card.setName}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${card.quantity || 1}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${formattedPrice}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${card.notes || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 space-x-2">
                        <button class="edit-card-btn text-blue-500 hover:text-blue-700" data-id="${card.id}" data-list="collection"><i class="fas fa-edit"></i></button>
                        <button class="delete-card-btn text-red-500 hover:text-red-700" data-id="${card.id}" data-list="collection"><i class="fas fa-trash"></i></button>
                        <button class="manage-listing-btn text-green-500 hover:text-green-700" data-id="${card.id}" data-list="collection"><i class="fas fa-tags"></i></button>
                    </td>
                </tr>`;
        });
        tableHTML += `</tbody></table>`;
        container.innerHTML = tableHTML;
    };

    const handleCsvUpload = (file) => {
        if (!file) return;
        if (typeof Papa === 'undefined') {
            console.error("[Collection v29.5] PapaParse library is not loaded. CSV upload is disabled.");
            if (elements.csvStatus) elements.csvStatus.textContent = "Error: CSV parsing library not loaded.";
            return;
        }
        if (elements.csvStatus) {
            elements.csvStatus.textContent = `Parsing ${file.name}...`;
            elements.csvStatus.classList.remove('text-red-500', 'text-green-500');
        }

        Papa.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: async (results) => {
                console.log("[Collection v29.5] CSV Parsed:", results);
                if (elements.csvStatus) elements.csvStatus.textContent = `Found ${results.data.length} cards. Importing... This may take a moment.`;

                const collectionRef = db.collection('users').doc(user.uid).collection('collection');
                let importedCount = 0;
                let errorCount = 0;

                const chunks = [];
                for (let i = 0; i < results.data.length; i += 250) {
                    chunks.push(results.data.slice(i, i + 250));
                }

                for (const chunk of chunks) {
                    const batch = db.batch();
                    for (const row of chunk) {
                        const cardName = row['Name'] || row['Card Name'];
                        const setName = row['Set Name'] || row['Set'];
                        const quantity = parseInt(row['Quantity'], 10) || 1;
                        const condition = row['Condition'] || 'Near Mint';
                        const isFoil = (row['Foil'] || '').toLowerCase() === 'true' || (row['Finish'] || '').toLowerCase() === 'foil';
                        const isSigned = (row['Signed'] || '').toLowerCase() === 'true';
                        const notes = row['Notes'] || '';

                        if (!cardName) continue;

                        try {
                            let searchUrl = `https://api.scryfall.com/cards/named?exact=${encodeURIComponent(cardName)}`;
                            if (setName) searchUrl += `&set=${encodeURIComponent(setName)}`;

                            const response = await fetch(searchUrl);
                            await new Promise(resolve => setTimeout(resolve, 100));

                            if (!response.ok) {
                                console.warn(`Card not found via Scryfall: ${cardName} [${setName || 'any set'}]`);
                                errorCount++;
                                continue;
                            }

                            const cardData = await response.json();
                            const cardDoc = {
                                scryfallId: cardData.id,
                                name: cardData.name,
                                name_lower: cardData.name.toLowerCase(),
                                set: cardData.set,
                                setName: cardData.set_name,
                                rarity: cardData.rarity,
                                collector_number: cardData.collector_number,
                                imageUrl: getCardImageUrl(cardData, 'normal'),
                                priceUsd: cardData.prices?.usd || null,
                                priceUsdFoil: cardData.prices?.usd_foil || null,
                                tcg: 'Magic: The Gathering',
                                colors: (cardData.card_faces ? cardData.card_faces[0].colors : cardData.colors) || [],
                                quantity, condition, isFoil, isSigned, notes,
                                addedAt: new Date(),
                                forSale: false
                            };

                            const newDocRef = collectionRef.doc();
                            batch.set(newDocRef, cardDoc);
                            importedCount++;

                        } catch (err) {
                            console.error(`Error importing row: ${cardName}`, err);
                            errorCount++;
                        }
                    }
                    if(importedCount > 0) await batch.commit();
                }

                if (elements.csvStatus) {
                    elements.csvStatus.textContent = `Import complete. Added: ${importedCount}. Failed: ${errorCount}.`;
                    elements.csvStatus.classList.add('text-green-500');
                }
                alert(`Import complete!\nSuccessfully imported: ${importedCount}\nFailed to find: ${errorCount}`);
                loadCollectionData();
            },
            error: (err) => {
                console.error("[Collection v29.5] CSV Parsing Error:", err);
                if (elements.csvStatus) {
                    elements.csvStatus.textContent = "Error parsing CSV file.";
                    elements.csvStatus.classList.add('text-red-500');
                }
            }
        });
    };

    const exportCollectionAsText = () => {
        if (fullCollection.length === 0) {
            alert("Your collection is empty.");
            return;
        }

        const exportModal = document.createElement('div');
        exportModal.id = 'export-modal';
        exportModal.className = 'modal-overlay open';
        exportModal.innerHTML = `
            <div class="modal-content w-full max-w-lg dark:bg-gray-800">
                <button id="close-export-modal" class="close-button">&times;</button>
                <h2 class="text-2xl font-bold mb-4 dark:text-white">Export Collection</h2>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Export Format</label>
                        <select id="export-format" class="mt-1 block w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600">
                            <option value="text">Plain Text</option>
                            <option value="csv">CSV</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Include Fields</label>
                        <div id="export-fields" class="mt-2 grid grid-cols-2 gap-2">
                            <label class="flex items-center"><input type="checkbox" value="set" class="mr-2" checked>Set Code</label>
                            <label class="flex items-center"><input type="checkbox" value="setName" class="mr-2" checked>Expansion Name</label>
                            <label class="flex items-center"><input type="checkbox" value="quantity" class="mr-2" checked>Quantity</label>
                            <label class="flex items-center"><input type="checkbox" value="isFoil" class="mr-2">Is Foil</label>
                            <label class="flex items-center"><input type="checkbox" value="isSigned" class="mr-2">Is Signed</label>
                            <label class="flex items-center"><input type="checkbox" value="notes" class="mr-2">Notes</label>
                            <label class="flex items-center"><input type="checkbox" value="priceUsd" class="mr-2">Market Price</label>
                        </div>
                    </div>
                </div>
                <div class="mt-6 text-right">
                    <button id="confirm-export-btn" class="px-6 py-2 bg-indigo-500 text-white font-semibold rounded-full hover:bg-indigo-600">Export</button>
                </div>
            </div>
        `;
        document.body.appendChild(exportModal);

        document.getElementById('close-export-modal').addEventListener('click', () => {
            exportModal.remove();
        });

        document.getElementById('confirm-export-btn').addEventListener('click', () => {
            const format = document.getElementById('export-format').value;
            const selectedFields = Array.from(document.querySelectorAll('#export-fields input:checked')).map(cb => cb.value);

            let output = '';
            if (format === 'csv') {
                const headers = ['Name', ...selectedFields].join(',');
                const rows = fullCollection.map(card => {
                    const row = [card.name];
                    selectedFields.forEach(field => row.push(card[field] || ''));
                    return row.join(',');
                }).join('\n');
                output = `${headers}\n${rows}`;
            } else {
                output = fullCollection.map(card => {
                    let line = `${card.quantity || 1} ${card.name}`;
                    selectedFields.forEach(field => {
                        if (card[field]) line += ` [${field}: ${card[field]}]`;
                    });
                    return line;
                }).join('\n');
            }

            const textarea = document.createElement('textarea');
            textarea.value = output;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            alert("Collection copied to clipboard!");
            exportModal.remove();
        });
    };

    const toggleBulkEditMode = () => {
        bulkEditMode = !bulkEditMode;
        selectedCards.clear();
        if (elements.selectAllCheckbox) elements.selectAllCheckbox.checked = false;

        if (bulkEditMode) {
            if (elements.bulkEditBtn) {
                elements.bulkEditBtn.textContent = 'Cancel';
                elements.bulkEditBtn.classList.add('bg-red-600', 'hover:bg-red-700');
            }
            if (elements.bulkActionBar) elements.bulkActionBar.classList.remove('hidden');
            if (elements.quickEditBtn) elements.quickEditBtn.classList.add('hidden');
        } else {
            if (elements.bulkEditBtn) {
                elements.bulkEditBtn.textContent = 'Bulk Edit';
                elements.bulkEditBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
            }
            if (elements.bulkActionBar) elements.bulkActionBar.classList.add('hidden');
            if (elements.quickEditBtn) elements.quickEditBtn.classList.remove('hidden');
        }
        updateSelectedCount();
        renderCurrentView();
    };

    const toggleQuickEditMode = () => {
        quickEditMode = !quickEditMode;
        if (quickEditMode) {
            currentView = 'list';
            if (elements.quickEditSaveBar) elements.quickEditSaveBar.classList.remove('hidden');
            if (elements.bulkEditBtn) elements.bulkEditBtn.classList.add('hidden');
            if (elements.quickEditBtn) {
                elements.quickEditBtn.innerHTML = '<i class="fas fa-times mr-2"></i>Cancel';
                elements.quickEditBtn.classList.add('bg-red-500', 'hover:bg-red-600');
                elements.quickEditBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
            }
            renderQuickEditView();
        } else {
            currentView = 'grid';
            if (elements.quickEditSaveBar) elements.quickEditSaveBar.classList.add('hidden');
            if (elements.bulkEditBtn) elements.bulkEditBtn.classList.remove('hidden');
            if (elements.quickEditBtn) {
                elements.quickEditBtn.innerHTML = '<i class="fas fa-edit mr-2"></i>Quick Edit';
                elements.quickEditBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
                elements.quickEditBtn.classList.add('bg-yellow-500', 'hover:bg-yellow-600');
            }
            renderCurrentView();
        }
    };

    const renderQuickEditView = () => {
        const container = elements.collectionTableView;
        if (!container) return;

        if (elements.collectionGridView) elements.collectionGridView.classList.add('hidden');
        container.classList.remove('hidden');

        let tableHTML = `
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Name</th>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Qty</th>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Condition</th>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Lang</th>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Foil</th>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Signed</th>
                        <th class="p-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Notes</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">`;
        fullCollection.forEach(card => {
            tableHTML += `
                <tr data-id="${card.id}" class="quick-edit-row">
                    <td class="p-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${card.name}</td>
                    <td class="p-2"><input type="number" value="${card.quantity || 1}" class="w-16 p-1 border rounded dark:bg-gray-900 dark:border-gray-600 quick-edit-input" data-field="quantity"></td>
                    <td class="p-2">
                        <select class="p-1 border rounded dark:bg-gray-900 dark:border-gray-600 quick-edit-input" data-field="condition">
                            <option ${card.condition === 'Near Mint' ? 'selected' : ''}>Near Mint</option>
                            <option ${card.condition === 'Lightly Played' ? 'selected' : ''}>Lightly Played</option>
                            <option ${card.condition === 'Moderately Played' ? 'selected' : ''}>Moderately Played</option>
                            <option ${card.condition === 'Heavily Played' ? 'selected' : ''}>Heavily Played</option>
                            <option ${card.condition === 'Damaged' ? 'selected' : ''}>Damaged</option>
                        </select>
                    </td>
                    <td class="p-2"><input type="text" value="${card.language || 'English'}" class="w-20 p-1 border rounded dark:bg-gray-900 dark:border-gray-600 quick-edit-input" data-field="language"></td>
                    <td class="p-2"><input type="checkbox" ${card.isFoil ? 'checked' : ''} class="h-4 w-4 rounded quick-edit-input" data-field="isFoil"></td>
                    <td class="p-2"><input type="checkbox" ${card.isSigned ? 'checked' : ''} class="h-4 w-4 rounded quick-edit-input" data-field="isSigned"></td>
                    <td class="p-2"><input type="text" value="${card.notes || ''}" class="w-full p-1 border rounded dark:bg-gray-900 dark:border-gray-600 quick-edit-input" data-field="notes"></td>
                </tr>`;
        });
        tableHTML += `</tbody></table>`;
        container.innerHTML = tableHTML;
    };

    const saveQuickEdits = async () => {
        if (!elements.saveQuickEditsBtn) return;
        elements.saveQuickEditsBtn.disabled = true;
        elements.saveQuickEditsBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Saving...';

        const batch = db.batch();
        const rows = document.querySelectorAll('.quick-edit-row');

        rows.forEach(row => {
            const docId = row.dataset.id;
            if (docId) {
                const docRef = db.collection('users').doc(user.uid).collection('collection').doc(docId);
                const updatedData = {};
                row.querySelectorAll('.quick-edit-input').forEach(input => {
                    const field = input.dataset.field;
                    let value;
                    if (input.type === 'checkbox') value = input.checked;
                    else if (input.type === 'number') value = parseInt(input.value, 10) || 1;
                    else value = input.value;
                    updatedData[field] = value;
                });
                batch.update(docRef, updatedData);
            }
        });

        try {
            await batch.commit();
            alert("All changes saved successfully!");
        } catch (error) {
            console.error("Error saving quick edits:", error);
            alert("An error occurred while saving changes.");
        } finally {
            elements.saveQuickEditsBtn.disabled = false;
            elements.saveQuickEditsBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Save All Changes';
            toggleQuickEditMode(); // Exit quick edit mode
            loadCollectionData(); // Reload data
        }
    };

    const updateSelectedCount = () => {
        if (elements.selectedCountEl) {
            elements.selectedCountEl.textContent = `${selectedCards.size} cards selected`;
        }
    };

    const handleCardSelection = (cardId) => {
        if (selectedCards.has(cardId)) {
            selectedCards.delete(cardId);
        } else {
            selectedCards.add(cardId);
        }
        updateSelectedCount();
        const cardEl = elements.collectionGridView.querySelector(`div[data-id="${cardId}"]`);
        if (cardEl) {
            cardEl.querySelector('.bulk-checkbox-overlay')?.classList.toggle('hidden', !selectedCards.has(cardId));
        }
    };

    const openModalHandler = async (modalToOpen, cardId, listType) => {
        if (!modalToOpen) return;
        try {
            const docRef = db.collection('users').doc(user.uid).collection(listType).doc(cardId);
            const docSnap = await docRef.get();
            if (!docSnap.exists) {
                console.error("Card document not found:", cardId);
                return;
            }
            const card = docSnap.data();

            if (modalToOpen === elements.editCardModal) {
                document.getElementById('edit-card-id').value = cardId;
                document.getElementById('edit-card-list-type').value = listType;
                document.getElementById('edit-card-quantity').value = card.quantity || 1;
                document.getElementById('edit-card-condition').value = card.condition;
                document.getElementById('edit-card-language').value = card.language || 'English';
                document.getElementById('edit-card-purchase-price').value = card.purchasePrice || '';
                document.getElementById('edit-card-notes').value = card.notes || '';
                document.getElementById('edit-card-foil').checked = card.isFoil || false;
                document.getElementById('edit-card-signed').checked = card.isSigned || false;
            } else if (modalToOpen === elements.manageListingModal) {
                document.getElementById('listing-card-id').value = cardId;
                document.getElementById('listing-card-image').src = card.customImageUrl || getCardImageUrl(card);
                document.getElementById('listing-card-name').textContent = card.name;
                document.getElementById('listing-card-set').textContent = card.setName;
                const forSaleToggle = document.getElementById('forSale');
                if(forSaleToggle) {
                    forSaleToggle.checked = card.forSale || false;
                    document.getElementById('price-input-container').classList.toggle('hidden', !forSaleToggle.checked);
                }
            }
            openModal(modalToOpen);
        } catch(error) {
            console.error("Error opening modal:", error);
            alert("Could not open the dialog. See console for details.");
        }
    };

    const deleteCard = async (cardId, listType) => {
        try {
            await db.collection('users').doc(user.uid).collection(listType).doc(cardId).delete();
            if (listType === 'collection') loadCollectionData();
            else loadWishlistData();
        } catch (error) {
            console.error("Error deleting card:", error);
            alert("Could not delete card.");
        }
    };

    // --- Attaching Event Listeners ---
    if (elements.bulkEditBtn) elements.bulkEditBtn.addEventListener('click', toggleBulkEditMode);
    if (elements.quickEditBtn) elements.quickEditBtn.addEventListener('click', toggleQuickEditMode);
    if (elements.saveQuickEditsBtn) elements.saveQuickEditsBtn.addEventListener('click', saveQuickEdits);
    if (elements.exportCollectionBtn) elements.exportCollectionBtn.addEventListener('click', exportCollectionAsText);

    mainContainer.addEventListener('click', (e) => {
        const target = e.target;
        const cardElement = target.closest('.group[data-id]');
        if (!cardElement) return;

        const cardId = cardElement.dataset.id;
        const listType = cardElement.closest('#wishlist-list') ? 'wishlist' : 'collection';

        const isActionBtn = target.closest('.edit-card-btn, .delete-card-btn, .manage-listing-btn');

        if (bulkEditMode && listType === 'collection' && !isActionBtn) {
            handleCardSelection(cardId);
            return;
        }

        if (target.closest('.edit-card-btn')) {
            openModalHandler(elements.editCardModal, cardId, listType);
        } else if (target.closest('.delete-card-btn')) {
            if (confirm('Are you sure you want to delete this card?')) {
                deleteCard(cardId, listType);
            }
        } else if (target.closest('.manage-listing-btn')) {
            openModalHandler(elements.manageListingModal, cardId, listType);
        } else if (!isActionBtn) {
            const cardDataSource = listType === 'collection' ? fullCollection : fullWishlist;
            const cardData = cardDataSource.find(c => c.id === cardId);
            if (cardData && cardData.scryfallId) {
                window.location.href = `card-view.html?id=${cardData.scryfallId}`;
            }
        }
    });

    if (elements.selectAllCheckbox) {
        elements.selectAllCheckbox.addEventListener('change', (e) => {
            filteredCollection.map(c => c.id).forEach(id => {
                if (e.target.checked) selectedCards.add(id);
                else selectedCards.delete(id);
            });
            updateSelectedCount();
            renderCurrentView();
        });
    }

    if (elements.deleteSelectedBtn) {
        elements.deleteSelectedBtn.addEventListener('click', async () => {
            if (selectedCards.size === 0) return alert("Please select cards to delete.");
            if (confirm(`Are you sure you want to delete ${selectedCards.size} selected cards?`)) {
                const batch = db.batch();
                const collectionRef = db.collection('users').doc(user.uid).collection('collection');
                selectedCards.forEach(cardId => batch.delete(collectionRef.doc(cardId)));
                try {
                    await batch.commit();
                    alert(`${selectedCards.size} cards deleted.`);
                    toggleBulkEditMode();
                    loadCollectionData();
                } catch (error) {
                    console.error("Error deleting selected cards:", error);
                    alert("An error occurred while deleting cards.");
                }
            }
        });
    }

    if (elements.editCardForm) {
        elements.editCardForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const submitButton = elements.editCardForm.querySelector('button[type="submit"]');
            if(submitButton) submitButton.disabled = true;
            try {
                const cardId = document.getElementById('edit-card-id').value;
                const listType = document.getElementById('edit-card-list-type').value;
                const updatedData = {
                    quantity: parseInt(document.getElementById('edit-card-quantity').value, 10),
                    condition: document.getElementById('edit-card-condition').value,
                    language: document.getElementById('edit-card-language').value,
                    purchasePrice: parseFloat(document.getElementById('edit-card-purchase-price').value) || 0,
                    notes: document.getElementById('edit-card-notes').value,
                    isFoil: document.getElementById('edit-card-foil').checked,
                    isSigned: document.getElementById('edit-card-signed').checked,
                };
                await db.collection('users').doc(user.uid).collection(listType).doc(cardId).update(updatedData);
                alert("Card updated successfully!");
                closeModal(elements.editCardModal);
                if (listType === 'collection') loadCollectionData();
                else loadWishlistData();
            } catch (error) {
                console.error("Error updating card:", error);
                alert("Could not update card.");
            } finally {
                if(submitButton) submitButton.disabled = false;
            }
        });
    }

    if (elements.manageListingForm) {
        elements.manageListingForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const cardId = document.getElementById('listing-card-id').value;
            const isForSale = document.getElementById('forSale').checked;
            const salePrice = parseFloat(document.getElementById('salePrice').value) || 0;
            const updatedData = {
                forSale: isForSale,
                salePrice: isForSale ? salePrice : firebase.firestore.FieldValue.delete()
            };
            await db.collection('users').doc(user.uid).collection('collection').doc(cardId).update(updatedData);
            closeModal(elements.manageListingModal);
            loadCollectionData();
        });
    }

    if (elements.filterNameInput) elements.filterNameInput.addEventListener('input', applyFilters);
    if (elements.filterSetSelect) elements.filterSetSelect.addEventListener('change', applyFilters);
    if (elements.filterRaritySelect) elements.filterRaritySelect.addEventListener('change', applyFilters);
    if (elements.filterColorSelect) elements.filterColorSelect.addEventListener('change', applyFilters);
    if (elements.resetFiltersBtn) elements.resetFiltersBtn.addEventListener('click', () => {
        if(elements.filterNameInput) elements.filterNameInput.value = '';
        if(elements.filterSetSelect) elements.filterSetSelect.value = 'all';
        if(elements.filterRaritySelect) elements.filterRaritySelect.value = 'all';
        if(elements.filterColorSelect) elements.filterColorSelect.value = 'all';
        applyFilters();
    });

    const switchView = (view) => {
        currentView = view;
        if (elements.gridViewBtn && elements.listViewBtn) {
            elements.gridViewBtn.classList.toggle('bg-blue-600', view === 'grid');
            elements.gridViewBtn.classList.toggle('text-white', view === 'grid');
            elements.listViewBtn.classList.toggle('bg-blue-600', view === 'list');
            elements.listViewBtn.classList.toggle('text-white', view === 'list');
        }
        renderCurrentView();
    };

    if (elements.gridViewBtn) elements.gridViewBtn.addEventListener('click', () => switchView('grid'));
    if (elements.listViewBtn) elements.listViewBtn.addEventListener('click', () => switchView('list'));

    document.getElementById('close-edit-card-modal')?.addEventListener('click', () => closeModal(elements.editCardModal));
    document.getElementById('close-listing-modal')?.addEventListener('click', () => closeModal(elements.manageListingModal));
    document.getElementById('close-list-sale-modal')?.addEventListener('click', () => closeModal(elements.listForSaleModal));
    document.getElementById('close-add-version-modal')?.addEventListener('click', () => closeModal(elements.addVersionModal));
    
    // --- Tab Switching Logic ---
    elements.tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetContentId = `content-${tab.id.split('-')[1]}`;
            
            elements.tabs.forEach(t => t.classList.remove('text-blue-600', 'border-blue-600'));
            tab.classList.add('text-blue-600', 'border-blue-600');
            
            elements.tabContents.forEach(content => {
                if (content.id === targetContentId) {
                    content.classList.remove('hidden');
                } else {
                    content.classList.add('hidden');
                }
            });
        });
    });

    // --- Initial Load ---
    console.log('[Collection v29.5] Starting initial data load.');
    loadCollectionData();
    loadWishlistData();
});