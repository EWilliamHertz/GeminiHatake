This comes up when we try to view articles, blogs:
auth.js:149 Uncaught TypeError: firebase.functions is not a function
    at HTMLDocument.<anonymous> (auth.js:149:33)
(anonymous)    @    auth.js:149

This is auth.js:
/**
* HatakeSocial - Merged Authentication & Global UI Script (v20 - Complete & Stable)
* - This is the complete, unabridged version of the global script.
* - Contains all helper functions for toasts, modals, and user interactions.
* - Manages user authentication state and dynamically updates all UI components.
* - Initializes all necessary Firebase services for the client-side application.
*/

// --- Global Toast Notification Function ---
const showToast = (message, type = 'info') => {
    let container = document.getElementById('toast-container');
    if (!container) {
        const toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.className = 'fixed bottom-5 right-5 z-[1003]';
        document.body.appendChild(toastContainer);
        container = toastContainer;
    }
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    let iconClass = 'fa-info-circle';
    if (type === 'success') iconClass = 'fa-check-circle';
    if (type === 'error') iconClass = 'fa-exclamation-circle';

    toast.innerHTML = `<i class="fas ${iconClass} toast-icon"></i> <p>${message}</p>`;
    container.appendChild(toast);

    setTimeout(() => {
        toast.classList.add('show');
    }, 100);

    setTimeout(() => {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => toast.remove());
    }, 5000);
};

// --- Global Modal Helper Functions ---
window.openModal = (modal) => {
    if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        const errorMsg = modal.querySelector('[id$="-error-message"]');
        if (errorMsg) {
            errorMsg.classList.add('hidden');
            errorMsg.textContent = '';
        }
    }
};
window.closeModal = (modal) => {
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }
};

// --- New Conversation Modal ---
window.openNewConversationModal = (isWidget = false, callback) => {
    const existingModal = document.getElementById('new-conversation-modal');
    if (existingModal) existingModal.remove();

    const modal = document.createElement('div');
    modal.id = 'new-conversation-modal';
    modal.className = 'fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[1002]';
    modal.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md flex flex-col" style="height: 70vh; max-height: 500px;">
            <div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
                <h2 class="text-xl font-bold">New Message</h2>
                <button id="close-new-convo-modal" class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold">&times;</button>
            </div>
            <div class="p-4">
                <input type="text" id="user-search-input" placeholder="Search for a user..." class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div id="user-search-results" class="flex-grow overflow-y-auto p-4 space-y-2">
                <p class="text-center text-gray-500">Start typing to find users.</p>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    const searchInput = modal.querySelector('#user-search-input');
    const searchResultsContainer = modal.querySelector('#user-search-results');
    const closeModalBtn = modal.querySelector('#close-new-convo-modal');

    closeModalBtn.addEventListener('click', () => modal.remove());
    modal.addEventListener('click', (e) => {
        if (e.target.id === 'new-conversation-modal') modal.remove();
    });

    let searchTimeout;
    searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        const query = searchInput.value.trim().toLowerCase();
        if (query.length < 2) {
            searchResultsContainer.innerHTML = '<p class="text-center text-gray-500">Enter at least 2 characters.</p>';
            return;
        }

        searchResultsContainer.innerHTML = '<p class="text-center text-gray-500">Searching...</p>';
        searchTimeout = setTimeout(async () => {
            try {
                const currentUser = firebase.auth().currentUser;
                if (!currentUser) return;
                const usersRef = firebase.firestore().collection('users');
                const snapshot = await usersRef.where('displayName_lower', '>=', query).where('displayName_lower', '<=', query + '\uf8ff').limit(10).get();
                
                searchResultsContainer.innerHTML = '';
                if (snapshot.empty) {
                    searchResultsContainer.innerHTML = '<p class="text-center text-gray-500">No users found.</p>';
                } else {
                    snapshot.forEach(doc => {
                        const userData = doc.data();
                        if (doc.id === currentUser.uid) return;

                        const userElement = document.createElement('div');
                        userElement.className = 'flex items-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer';
                        userElement.innerHTML = `
                            <img src="${userData.photoURL || 'https://i.imgur.com/B06rBhI.png'}" alt="${userData.displayName}" class="w-10 h-10 rounded-full object-cover mr-3">
                            <div>
                                <p class="font-semibold">${userData.displayName}</p>
                                <p class="text-sm text-gray-500">@${userData.handle || 'N/A'}</p>
                            </div>`;
                        userElement.addEventListener('click', () => {
                            if (callback) callback(doc.id, userData);
                            modal.remove();
                        });
                        searchResultsContainer.appendChild(userElement);
                    });
                }
            } catch (error) {
                console.error("Error searching for users:", error);
                searchResultsContainer.innerHTML = '<p class="text-center text-red-500">Error searching for users.</p>';
            }
        }, 500);
    });
};


document.addEventListener('DOMContentLoaded', () => {
    document.body.style.opacity = '0';

    // --- Firebase Initialization (Stable) ---
    if (!firebase.apps.length) {
        firebase.initializeApp(); 
    }
    window.auth = firebase.auth();
    window.db = firebase.firestore();
    window.storage = firebase.storage();
    window.functions = firebase.functions(); // Initializes with default region (us-central1)

    const googleProvider = new firebase.auth.GoogleAuthProvider();
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');

    window.HatakeSocial = {
        conversionRates: { SEK: 1, USD: 0.095, EUR: 0.088 },
        currentCurrency: localStorage.getItem('hatakeCurrency') || 'SEK',
        currentUserData: null,
        convertAndFormatPrice(amount, fromCurrency = 'SEK') {
            const toCurrency = this.currentCurrency;
            if (amount === undefined || amount === null || isNaN(amount)) {
                return `0.00 ${toCurrency}`;
            }
            const fromRate = this.conversionRates[fromCurrency];
            if (fromRate === undefined) return `N/A`;
            const amountInSEK = amount / fromRate;
            const toRate = this.conversionRates[toCurrency];
            if (toRate === undefined) return `N/A`;
            const convertedAmount = amountInSEK * toRate;
            return `${convertedAmount.toFixed(2)} ${toCurrency}`;
        }
    };

    const setupCurrencySelector = () => {
        const container = document.getElementById('currency-selector-container');
        if (!container) return;

        container.innerHTML = `
        <label for="currency-selector" class="text-sm text-gray-600 dark:text-gray-400">Currency</label>
        <select id="currency-selector" class="text-sm rounded-md border-gray-300 dark:bg-gray-700 dark:border-gray-600 focus:ring-blue-500 focus:border-blue-500">
            <option value="SEK">SEK</option>
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
        </select>
        `;
        const selector = document.getElementById('currency-selector');
        if (selector) {
            selector.value = window.HatakeSocial.currentCurrency;
            selector.addEventListener('change', (e) => {
                window.HatakeSocial.currentCurrency = e.target.value;
                localStorage.setItem('hatakeCurrency', e.target.value);
                window.location.reload();
            });
        }
    };
    
    const setupGlobalListeners = () => {
        const headerSearchForm = document.querySelector('header form#header-search-form');
        const googleLoginButton = document.getElementById('googleLoginButton');
        const googleRegisterButton = document.getElementById('googleRegisterButton');
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const registerForm = document.getElementById('registerForm');

        document.getElementById('closeLoginModal')?.addEventListener('click', () => closeModal(loginModal));
        document.getElementById('closeRegisterModal')?.addEventListener('click', () => closeModal(registerModal));

        document.getElementById('loginForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const errorMessageEl = document.getElementById('login-error-message');

            auth.signInWithEmailAndPassword(email, password)
                .then(() => {
                    window.location.href = 'app.html';
                })
                .catch(err => {
                    if (errorMessageEl) {
                        errorMessageEl.textContent = err.message;
                        errorMessageEl.classList.remove('hidden');
                    }
                });
        });

        if(registerForm) {
            registerForm.addEventListener('submit', (e) => {
                e.preventDefault();
                showTermsModal();
            });
        }

        const handleGoogleAuth = () => {
            auth.signInWithPopup(googleProvider)
                .then(() => {
                    window.location.href = 'app.html';
                })
                .catch(err => showToast(err.message, "error"));
        };

        if (googleLoginButton) googleLoginButton.addEventListener('click', handleGoogleAuth);
        if (googleRegisterButton) googleRegisterButton.addEventListener('click', handleGoogleAuth);

        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
        }
    };

    let friendRequestHandshakeListener = null;
    function listenForAcceptedRequests(user) {
        if (friendRequestHandshakeListener) {
            friendRequestHandshakeListener();
        }
        const sentRequestsRef = db.collection('friendRequests')
            .where('senderId', '==', user.uid)
            .where('status', '==', 'accepted');

        friendRequestHandshakeListener = sentRequestsRef.onSnapshot(async (snapshot) => {
            if (snapshot.empty) return;
            const batch = db.batch();
            const currentUserRef = db.collection('users').doc(user.uid);
            for (const doc of snapshot.docs) {
                const request = doc.data();
                batch.update(currentUserRef, { friends: firebase.firestore.FieldValue.arrayUnion(request.receiverId) });
                batch.delete(doc.ref);
            }
            await batch.commit().catch(err => console.error("Error in friend handshake:", err));
        });
    }

    function sanitizeHTML(str) {
        const temp = document.createElement('div');
        temp.textContent = str;
        return temp.innerHTML;
    }

    let unsubscribeNotifications = null;
    let verificationTimer = null;
    
    auth.onAuthStateChanged(async (user) => {
        if (verificationTimer) {
            clearInterval(verificationTimer);
            verificationTimer = null;
        }

        const mainSidebarNav = document.querySelector('#sidebar nav');
        const existingAdminSidebarLink = document.getElementById('admin-sidebar-link');
        if (existingAdminSidebarLink) {
            existingAdminSidebarLink.remove();
        }

        if (user && !user.emailVerified) {
            document.body.innerHTML = `
            <div class="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
                <div class="p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl text-center max-w-lg mx-4">
                    <h1 class="text-2xl font-bold text-gray-800 dark:text-white mb-4">Please Verify Your Email</h1>
                    <p class="text-gray-600 dark:text-gray-400 mb-6">A verification link has been sent to <strong>${user.email}</strong>. Please check your inbox and spam folder.</p>
                    <div class="space-x-4">
                        <button id="resend-verification-btn" class="px-5 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700">Resend Email</button>
                        <button onclick="firebase.auth().signOut()" class="px-5 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700">Logout</button>
                    </div>
                </div>
            </div>`;
            document.getElementById('resend-verification-btn').addEventListener('click', () => {
                user.sendEmailVerification()
                    .then(() => showToast('A new verification email has been sent.', 'success'))
                    .catch(err => showToast('Error sending email: ' + err.message, 'error'));
            });
            verificationTimer = setInterval(async () => {
                await user.reload();
                if (user.emailVerified) {
                    clearInterval(verificationTimer);
                    window.location.reload();
                }
            }, 5000);
            document.body.style.opacity = '1';
            return;
        }

        const userActions = document.getElementById('user-actions');
        const authContainerSidebar = document.getElementById('auth-container-sidebar');
        const mobileUserActions = document.getElementById('mobile-user-actions');
        
        if (user) {
            const isIndexPage = window.location.pathname === '/' || window.location.pathname.endsWith('index.html');
            if (isIndexPage) {
                window.location.href = 'app.html';
                return;
            }

            closeModal(loginModal);
            closeModal(registerModal);

            const userDocRef = db.collection('users').doc(user.uid);
            let unsubscribeUserDoc = userDocRef.onSnapshot(async (doc) => {
                if (doc.exists) {
                    if (unsubscribeUserDoc) unsubscribeUserDoc();
                    
                    window.HatakeSocial.currentUserData = doc.data();
                    const userData = doc.data();
                    const photoURL = userData.photoURL || 'https://i.imgur.com/B06rBhI.png';
                    const idTokenResult = await user.getIdTokenResult(true);
                    const isAdmin = idTokenResult.claims.admin === true;
                    
                    handleAdminAccess(isAdmin);
                    
                    if (isAdmin && mainSidebarNav && !document.getElementById('admin-sidebar-link')) {
                        const adminLink = document.createElement('a');
                        adminLink.id = 'admin-sidebar-link';
                        adminLink.className = 'flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md font-bold';
                        adminLink.href = 'admin.html';
                        adminLink.innerHTML = `<i class="fas fa-user-shield w-6 text-center"></i><span class="ml-3">Admin Panel</span>`;
                        mainSidebarNav.appendChild(adminLink);
                    }

                    if (userActions) {
                        userActions.innerHTML = `
                            <div class="relative">
                                <button id="notification-bell-btn" class="text-gray-300 hover:text-indigo-400 text-xl"><i class="fas fa-bell"></i><span id="notification-count" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-4 w-4 flex items-center justify-center hidden">0</span></button>
                                <div id="notification-dropdown" class="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl z-20 hidden">
                                    <div class="p-3 font-bold border-b dark:border-gray-700">Notifications</div>
                                    <div id="notification-list" class="max-h-96 overflow-y-auto"><p class="p-4 text-sm text-gray-500">No new notifications.</p></div>
                                    <a href="notifications.html" class="block text-center p-2 text-sm text-blue-500 hover:bg-gray-100 dark:hover:bg-gray-700">View all</a>
                                </div>
                            </div>
                            <div class="relative">
                                <button id="profile-avatar-btn"><img src="${photoURL}" alt="User Avatar" class="w-10 h-10 rounded-full object-cover"></button>
                                <div id="profile-dropdown" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl z-20 hidden">
                                    <a href="profile.html?uid=${user.uid}" class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">My Profile</a>
                                    <a href="settings.html" class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Settings</a>
                                    ${isAdmin ? `<a href="admin.html" class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Admin Panel</a>` : ''}
                                    <hr class="border-gray-200 dark:border-gray-600">
                                    <button id="logout-btn-dropdown" class="block w-full text-left px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Logout</button>
                                </div>
                            </div>`;
                        document.getElementById('notification-bell-btn').addEventListener('click', (e) => { e.stopPropagation(); document.getElementById('profile-dropdown').classList.add('hidden'); document.getElementById('notification-dropdown').classList.toggle('hidden'); });
                        document.getElementById('profile-avatar-btn').addEventListener('click', (e) => { e.stopPropagation(); document.getElementById('notification-dropdown').classList.add('hidden'); document.getElementById('profile-dropdown').classList.toggle('hidden'); });
                        document.getElementById('logout-btn-dropdown').addEventListener('click', () => auth.signOut());
                    }

                    if (unsubscribeNotifications) unsubscribeNotifications();
                    unsubscribeNotifications = db.collection('users').doc(user.uid).collection('notifications').orderBy('timestamp', 'desc').onSnapshot(snapshot => {
                        const unreadCount = snapshot.docs.filter(doc => !doc.data().isRead).length;
                        const countEl = document.getElementById('notification-count');
                        const listEl = document.getElementById('notification-list');
                        if (countEl) { countEl.textContent = unreadCount; countEl.classList.toggle('hidden', unreadCount === 0); }
                        if (listEl) {
                            if (snapshot.empty) { listEl.innerHTML = '<p class="p-4 text-sm text-gray-500">No new notifications.</p>'; }
                            else {
                                listEl.innerHTML = '';
                                snapshot.docs.slice(0, 5).forEach(doc => {
                                    const notif = doc.data();
                                    const el = document.createElement('a');
                                    el.href = notif.link || '#';
                                    el.className = `flex items-start p-3 hover:bg-gray-100 dark:hover:bg-gray-700 ${!notif.isRead ? 'bg-blue-50 dark:bg-blue-900/50' : ''}`;
                                    el.innerHTML = `<div><p class="text-sm text-gray-700 dark:text-gray-300">${sanitizeHTML(notif.message)}</p><p class="text-xs text-gray-500">${new Date(notif.timestamp?.toDate()).toLocaleString()}</p></div>`;
                                    el.addEventListener('click', () => db.collection('users').doc(user.uid).collection('notifications').doc(doc.id).update({ isRead: true }));
                                    listEl.appendChild(el);
                                });
                            }
                        }
                    });

                    if (authContainerSidebar) {
                        authContainerSidebar.innerHTML = `<div class="flex items-center"><img src="${photoURL}" alt="User Avatar" class="w-10 h-10 rounded-full object-cover"><div class="ml-3"><p class="font-semibold text-gray-800 dark:text-white">${userData.displayName}</p><button id="logout-btn-sidebar" class="text-sm text-gray-500 hover:underline">Logout</button></div></div>`;
                        document.getElementById('logout-btn-sidebar').addEventListener('click', () => auth.signOut());
                    }
    
                    if (mobileUserActions) {
                        mobileUserActions.innerHTML = `<div class="flex items-center space-x-4 px-3 py-2"><img src="${photoURL}" alt="User Avatar" class="h-10 w-10 rounded-full border-2 border-blue-500 object-cover"><div><div class="font-medium text-base text-gray-800 dark:text-white">${userData.displayName}</div><div class="font-medium text-sm text-gray-500 dark:text-gray-400">${user.email}</div></div></div><div class="mt-3 space-y-1"><a href="profile.html" class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Profile</a><a href="settings.html" class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Settings</a><a href="#" id="mobileLogoutButton" class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Logout</a></div>`;
                        document.getElementById('mobileLogoutButton').addEventListener('click', (e) => { e.preventDefault(); auth.signOut(); });
                    }
                    listenForAcceptedRequests(user);
                } else {
                    console.log("User document not found for uid:", user.uid);
                }
            }, (error) => {
                console.error("Error listening to user document:", error);
                showToast("Could not load your profile data.", "error");
            });

        } else { // User is logged out
            window.HatakeSocial.currentUserData = null;
            if (friendRequestHandshakeListener) friendRequestHandshakeListener();
            if (unsubscribeNotifications) unsubscribeNotifications();

            handleAdminAccess(false);

            const loginButtonsHTML = `
                <button id="header-login-btn" class="text-gray-300 hover:text-white transition-colors">Log In</button>
                <button id="header-register-btn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-5 py-2 rounded-lg transition-colors">Sign Up Free</button>`;
            if (userActions) {
                userActions.innerHTML = loginButtonsHTML;
                document.getElementById('header-login-btn').addEventListener('click', () => openModal(loginModal));
                document.getElementById('header-register-btn').addEventListener('click', () => openModal(registerModal));
            }
            if (authContainerSidebar) {
                authContainerSidebar.innerHTML = loginButtonsHTML.replace('header-login-btn', 'sidebar-login-btn').replace('header-register-btn', 'sidebar-register-btn');
                document.getElementById('sidebar-login-btn').addEventListener('click', () => openModal(loginModal));
                document.getElementById('sidebar-register-btn').addEventListener('click', () => openModal(registerModal));
            }
            if (mobileUserActions) {
                mobileUserActions.innerHTML = `<div class="space-y-2"><button id="mobileLoginButton" class="w-full text-left block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Login</button><button id="mobileRegisterButton" class="w-full text-left block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Register</button></div>`;
                document.getElementById('mobileLoginButton').addEventListener('click', () => openModal(loginModal));
                document.getElementById('mobileRegisterButton').addEventListener('click', () => openModal(registerModal));
            }
        }
        document.dispatchEvent(new CustomEvent('authReady', { detail: { user } }));
        document.body.style.transition = 'opacity 0.3s ease-in-out';
        document.body.style.opacity = '1';
    });
    
    setupGlobalListeners();
    setupCurrencySelector();

    window.addEventListener('click', () => {
        document.getElementById('profile-dropdown')?.classList.add('hidden');
        document.getElementById('notification-dropdown')?.classList.add('hidden');
    });
});

function handleAdminAccess(isAdmin) {
    const currentPage = window.location.pathname.split('/').pop();
    const adminPages = ['admin.html', 'create-article.html', 'edit-article.html'];

    if (adminPages.includes(currentPage) && !isAdmin) {
        window.location.href = 'index.html';
    }
}

async function showTermsModal() {
    const termsModal = document.createElement('div');
    termsModal.id = 'terms-modal';
    termsModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1002]';
    let termsContent = '<p>Loading...</p>', privacyContent = '<p>Loading...</p>';
    
    try {
        const [termsResponse, privacyResponse] = await Promise.all([fetch('terms.html'), fetch('privacy.html')]);
        termsContent = termsResponse.ok ? await termsResponse.text() : '<p>Could not load Terms of Service.</p>';
        privacyContent = privacyResponse.ok ? await privacyResponse.text() : '<p>Could not load Privacy Policy.</p>';
    } catch (error) {
        console.error('Error fetching legal documents:', error);
        termsContent = '<p>Error loading content.</p>';
    }

    termsModal.innerHTML = `
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl flex flex-col" style="height: 90vh; max-height: 800px;">
        <div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
            <h2 class="text-xl font-bold">Terms & Privacy</h2>
            <button id="close-terms-modal" class="text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
        </div>
        <div id="terms-content" class="p-6 flex-grow overflow-y-auto">${termsContent}<hr class="my-8">${privacyContent}</div>
        <div class="p-6 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
            <label class="flex items-center"><input type="checkbox" id="terms-checkbox" class="h-4 w-4"><span class="ml-2">I have read and agree.</span></label>
            <button id="final-register-btn" disabled class="w-full mt-4 bg-blue-600 text-white font-semibold py-3 rounded-lg disabled:bg-gray-400">Register</button>
        </div>
    </div>`;

    document.body.appendChild(termsModal);
    
    const termsCheckbox = termsModal.querySelector('#terms-checkbox');
    const finalRegisterBtn = termsModal.querySelector('#final-register-btn');

    termsCheckbox.addEventListener('change', () => {
        finalRegisterBtn.disabled = !termsCheckbox.checked;
    });

    termsModal.querySelector('#close-terms-modal').addEventListener('click', () => termsModal.remove());

    finalRegisterBtn.addEventListener('click', async () => {
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;
        const errorMessageEl = document.getElementById('register-error-message');
        
        try {
            const userCredential = await auth.createUserWithEmailAndPassword(email, password);
            await userCredential.user.sendEmailVerification();
            window.location.href = 'app.html';
        } catch (err) {
            if (errorMessageEl) {
                errorMessageEl.textContent = err.message;
                errorMessageEl.classList.remove('hidden');
            } else {
                showToast(err.message, "error");
            }
            termsModal.remove();
        }
    });
}

This is view-article.html:
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>
   Article - HatakeSocial
  </title>
<script src="https://cdn.tailwindcss.com">
</script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"/>
<link href="css/style.css" rel="stylesheet"/>
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet"/>
<style>
   .ql-editor {
            padding: 0;
        }
        .ql-snow .ql-editor h1, .ql-snow .ql-editor h2 {
            margin-bottom: 1rem;
        }
  </style>
    <link rel="manifest" href="/manifest.json">
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-200 font-sans overflow-hidden">
<div class="flex h-screen"><div class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden" id="sidebar-overlay"></div>
<aside class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex-shrink-0 flex flex-col fixed inset-y-0 left-0 z-50 lg:relative lg:translate-x-0 -translate-x-full transition-transform duration-300 ease-in-out" id="sidebar">
<div class="h-28 flex items-center justify-center border-b border-gray-200 dark:border-gray-700 px-4">
<a class="flex flex-col items-center space-y-1" href="app.html">
<img alt="HatakeSocial Logo" class="h-16" onerror="this.onerror=null; this.src='https://placehold.co/150x40?text=HatakeSocial';" src="https://i.imgur.com/B06rBhI.png"/>
<span class="font-bold text-lg text-blue-600 dark:text-blue-400">
       HatakeSocial
      </span>
</a>
</div>
<nav class="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="app.html">
<i class="fas fa-home w-6 text-center">
</i>
<span class="ml-3">
       Feed
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="messages.html">
<i class="fas fa-comments w-6 text-center">
</i>
<span class="ml-3">
       Messages
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="community.html">
<i class="fas fa-users w-6 text-center">
</i>
<span class="ml-3">
       Community
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=tcg"><i class="fas fa-newspaper w-6 text-center"></i><span class="ml-3">TCG Articles</span></a><a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=blog"><i class="fas fa-blog w-6 text-center"></i><span class="ml-3">Hatake Blog</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="events.html">
<i class="fas fa-calendar-alt w-6 text-center">
</i>
<span class="ml-3">
       Events
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="my_collection.html">
<i class="fas fa-layer-group w-6 text-center">
</i>
<span class="ml-3">
       My Collection
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="deck.html">
<i class="fas fa-book-open w-6 text-center">
</i>
<span class="ml-3">
       Deck Builder
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="shop.html">
<i class="fas fa-shopping-cart w-6 text-center">
</i>
<span class="ml-3">
       Shop
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="marketplace.html">
<i class="fas fa-store w-6 text-center">
</i>
<span class="ml-3">
       Marketplace
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="trades.html">
<i class="fas fa-exchange-alt w-6 text-center">
</i>
<span class="ml-3">
       Trades
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="profile.html">
<i class="fas fa-user w-6 text-center">
</i>
<span class="ml-3">
       Profile
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="settings.html">
<i class="fas fa-cog w-6 text-center">
</i>
<span class="ml-3">
       Settings
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="about.html">
<i class="fas fa-info-circle w-6 text-center">
</i>
<span class="ml-3">
       About Us
      </span>
</a>
</nav>
<div class="p-4 border-t border-gray-200 dark:border-gray-700 hidden" id="sidebar-user-info">
</div>
</aside>
<main class="flex-1 flex flex-col overflow-y-auto">
<header class="h-28 flex items-center justify-between px-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
<div class="flex items-center">
<button class="lg:hidden mr-4 text-gray-600 dark:text-gray-300" id="sidebar-toggle">
<i class="fas fa-bars text-xl">
</i>
</button>
<div class="relative">
<i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
</i>
<input class="w-full md:w-96 pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-gray-50 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="main-search-bar" placeholder="Search for cards, users, or articles..." type="text"/>
<div class="absolute mt-2 w-full md:w-96 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl z-10 hidden" id="main-search-results">
</div>
</div>
</div>
<div class="flex items-center space-x-5" id="user-actions">
<div class="space-x-2">
<button class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="header-login-btn">
        Login
       </button>
<button class="px-4 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700" id="header-register-btn">
        Register
       </button>
</div>
</div>
</header>
<main class="container mx-auto px-4 py-8 flex-grow">
<div class="max-w-4xl mx-auto bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md" id="article-container">
</div>
<div class="max-w-4xl mx-auto mt-8">
<div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md">
<h2 class="text-2xl font-bold mb-4">Comments</h2>
<div id="comment-form-container">
</div>
<div class="mt-6" id="comments-list">
</div>
</div>
</div>
</main>
<footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-auto">
<div class="container mx-auto py-8 px-4 text-center text-sm text-gray-500 dark:text-gray-400">
<p>
       © 2025 Hatake. All Rights Reserved.
      </p>
</div>
</footer>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-firestore-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-storage-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-functions-compat.js">
</script>
<script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-analytics-compat.js">
</script>
<script src="js/auth.js">
</script>
<script src="js/articles.js">
</script>
<script src="js/darkmode.js">
</script>
</main>
</div>
<script src="/__/firebase/9.6.1/firebase-app-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-auth-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-firestore-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-storage-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-functions-compat.js"></script>
<script src="/__/firebase/init.js"></script>
<div class="fixed inset-0 bg-black bg-opacity-60 hidden items-center justify-center z-[1001]" id="cartModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-lg flex flex-col" style="height: 90vh; max-height: 800px;">
<div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
<h2 class="text-xl font-bold">Your Cart</h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeCartModal">×</button>
</div>
<div class="p-6 flex-grow overflow-y-auto" id="cart-items-container">
<p class="text-center text-gray-500 dark:text-gray-400">Your cart is empty.</p>
</div>
<div class="p-6 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
<div class="flex justify-between items-center font-bold text-lg">
<span>Subtotal</span>
<span id="cart-subtotal">$0.00</span>
</div>
<p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Shipping &amp; taxes calculated at checkout.</p>
<button class="w-full mt-4 bg-green-600 text-white font-semibold py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400" disabled="" id="checkout-btn">
                    Proceed to Checkout
                </button>
</div>
</div>
</div>
<script src="js/cart.js"></script><script>
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebarOverlay = document.getElementById('sidebar-overlay');

            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', () => {
                    sidebar.classList.toggle('-translate-x-full');
                    sidebarOverlay.classList.toggle('hidden');
                });
            }

            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', () => {
                    sidebar.classList.add('-translate-x-full');
                    sidebarOverlay.classList.add('hidden');
                });
            }
        </script>

<script src="js/messenger.js"></script>
<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-[1001]" id="new-conversation-modal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
<h2 class="text-2xl font-bold mb-4">Start a new conversation</h2>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mb-4" id="user-search-input" placeholder="Search for a user by handle..." type="text"/>
<div class="max-h-60 overflow-y-auto" id="user-search-results">
</div>
<button class="mt-4 w-full bg-gray-200 dark:bg-gray-700 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 close-modal-btn" id="close-modal-btn">
            Cancel
        </button>
</div>
</div>
<div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="loginModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Login
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeLoginModal">
                ×
            </button>
</div>
<form class="mt-4 space-y-4" id="loginForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginPassword" placeholder="Password" required="" type="password"/>
<p class="text-red-500 text-sm hidden" id="login-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Login
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleLoginButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Sign in with Google
            </button>
</form>
</div>
</div><div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="registerModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Register
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeRegisterModal">
                ×
            </button>
</div>
<form class="mt-4 space-y-4" id="registerForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerPassword" placeholder="Password" required="" type="password"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCity" placeholder="City" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCountry" placeholder="Country" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerFavoriteTcg" placeholder="Favorite TCG" type="text"/>
<p class="text-red-500 text-sm hidden" id="register-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Register
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleRegisterButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Register with Google
            </button>
</form>
</div>
</div>    <script>
        // Service Worker Registration
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/sw.js')
                    .then(function(registration) {
                        console.log('ServiceWorker registration successful with scope: ', registration.scope);
                    })
                    .catch(function(err) {
                        console.log('ServiceWorker registration failed: ', err);
                    });
            });
        }
    </script>
</body>
</html>

This is articles.html:
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Articles - HatakeSocial</title>
<script src="https://cdn.tailwindcss.com"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"/>
<link href="css/style.css" rel="stylesheet"/>
    <link rel="manifest" href="/manifest.json">
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-200 font-sans overflow-hidden">
<div class="flex h-screen">
<div id="sidebar-container">
<div class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden" id="sidebar-overlay"></div>
<aside class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex-shrink-0 flex flex-col fixed inset-y-0 left-0 z-50 lg:relative lg:translate-x-0 -translate-x-full transition-transform duration-300 ease-in-out" id="sidebar">
<div class="h-28 flex items-center justify-center border-b border-gray-200 dark:border-gray-700 px-4">
<a class="flex flex-col items-center space-y-1" href="app.html">
<img alt="HatakeSocial Logo" class="h-16" onerror="this.onerror=null; this.src='https://placehold.co/150x40?text=HatakeSocial';" src="https://i.imgur.com/B06rBhI.png"/>
<span class="font-bold text-lg text-blue-600 dark:text-blue-400">HatakeSocial</span>
</a>
</div>
<nav class="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="app.html"><i class="fas fa-home w-6 text-center"></i><span class="ml-3">Feed</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="messages.html"><i class="fas fa-comments w-6 text-center"></i><span class="ml-3">Messages</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="community.html"><i class="fas fa-users w-6 text-center"></i><span class="ml-3">Community</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=tcg"><i class="fas fa-newspaper w-6 text-center"></i><span class="ml-3">TCG Articles</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=blog"><i class="fas fa-blog w-6 text-center"></i><span class="ml-3">Hatake Blog</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="events.html"><i class="fas fa-calendar-alt w-6 text-center"></i><span class="ml-3">Events</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="my_collection.html"><i class="fas fa-layer-group w-6 text-center"></i><span class="ml-3">My Collection</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="deck.html"><i class="fas fa-book-open w-6 text-center"></i><span class="ml-3">Deck Builder</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="shop.html"><i class="fas fa-shopping-cart w-6 text-center"></i><span class="ml-3">Shop</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="marketplace.html"><i class="fas fa-store w-6 text-center"></i><span class="ml-3">Marketplace</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="trades.html"><i class="fas fa-exchange-alt w-6 text-center"></i><span class="ml-3">Trades</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="profile.html"><i class="fas fa-user w-6 text-center"></i><span class="ml-3">Profile</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="settings.html"><i class="fas fa-cog w-6 text-center"></i><span class="ml-3">Settings</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="about.html"><i class="fas fa-info-circle w-6 text-center"></i><span class="ml-3">About Us</span></a>
</nav>
<div class="p-4 border-t border-gray-200 dark:border-gray-700 hidden" id="sidebar-user-info"></div>
</aside>
</div>
<div class="flex-1 flex flex-col overflow-hidden">
<div id="header-container">
<header class="h-28 flex items-center justify-between px-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
<div class="flex items-center">
<button class="lg:hidden mr-4 text-gray-600 dark:text-gray-300" id="sidebar-toggle"><i class="fas fa-bars text-xl"></i></button>
<div class="relative">
<i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
<input class="w-full md:w-96 pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-gray-50 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="main-search-bar" placeholder="Search for cards, users, or articles..." type="text"/>
<div class="absolute mt-2 w-full md:w-96 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl z-10 hidden" id="main-search-results"></div>
</div>
</div>
<div class="flex items-center space-x-5" id="user-actions">
</div>
</header>
</div>
<main class="flex-1 overflow-y-auto p-6">
<div class="container mx-auto">
<div class="flex justify-between items-center mb-6">
<h1 class="text-4xl font-extrabold text-gray-800 dark:text-white" id="page-title"></h1>
<a class="hidden px-6 py-3 bg-blue-600 text-white font-bold rounded-full hover:bg-blue-700" href="create-article.html" id="write-new-article-btn">
<i class="fas fa-pen-alt mr-2"></i> Write New Post
                        </a>
</div>
<div class="mb-8 grid grid-cols-1 md:grid-cols-2 gap-4" id="filters">
<input class="w-full p-3 border rounded-lg dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" id="article-search" placeholder="Search..." type="text"/>
<select class="w-full p-3 border rounded-lg dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" id="article-category-filter">
<option value="">All Categories</option>
<option value="Deck Primer">Deck Primer</option>
<option value="Strategy Guide">Strategy Guide</option>
<option value="Tournament Report">Tournament Report</option>
<option value="Community News">Community News</option>
</select>
</div>
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="articles-list">
</div>
</div>
</main>
</div>
</div>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-storage-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-analytics-compat.js"></script>
<script>
        // Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyD2Z9tCmmgReMG77ywXukKC_YIXsbP3uoU",
  authDomain: "hatakesocial-88b5e.firebaseapp.com",
  projectId: "hatakesocial-88b5e",
  storageBucket: "hatakesocial-88b5e.firebasestorage.app",
  messagingSenderId: "1091697032506",
  appId: "1:1091697032506:web:6a7cf9f10bd12650b22403",
  measurementId: "G-EH0PS2Z84J"
};

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();
        const auth = firebase.auth();
        const storage = firebase.storage();
        const analytics = firebase.analytics();
    </script>
<script src="js/auth.js"></script>
<script src="js/articles.js"></script>
<script src="js/darkmode.js"></script>
<script>
        // Mobile sidebar toggle
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebar-toggle');
        const sidebarOverlay = document.getElementById('sidebar-overlay');

        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', () => {
                sidebar.classList.toggle('-translate-x-full');
                sidebarOverlay.classList.toggle('hidden');
            });
        }

        if (sidebarOverlay) {
            sidebarOverlay.addEventListener('click', () => {
                sidebar.classList.add('-translate-x-full');
                sidebarOverlay.classList.add('hidden');
            });
        }
    </script>

<script src="js/messenger.js"></script>
<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-[1001]" id="new-conversation-modal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
<h2 class="text-2xl font-bold mb-4">Start a new conversation</h2>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 mb-4" id="user-search-input" placeholder="Search for a user by handle..." type="text"/>
<div class="max-h-60 overflow-y-auto" id="user-search-results">
</div>
<button class="mt-4 w-full bg-gray-200 dark:bg-gray-700 py-2 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 close-modal-btn" id="close-modal-btn">
            Cancel
        </button>
</div>
</div>
<!-- Login Modal -->
<!-- Register Modal -->
<div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="loginModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Login
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeLoginModal">
                ×
            </button>
</div>
<form class="mt-4 space-y-4" id="loginForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginPassword" placeholder="Password" required="" type="password"/>
<p class="text-red-500 text-sm hidden" id="login-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Login
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleLoginButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Sign in with Google
            </button>
</form>
</div>
</div><div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="registerModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Register
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeRegisterModal">
                ×
            </button>
</div>
<form class="mt-4 space-y-4" id="registerForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerPassword" placeholder="Password" required="" type="password"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCity" placeholder="City" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCountry" placeholder="Country" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerFavoriteTcg" placeholder="Favorite TCG" type="text"/>
<p class="text-red-500 text-sm hidden" id="register-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Register
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleRegisterButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Register with Google
            </button>
</form>
</div>
</div>    <script>
        // Service Worker Registration
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/sw.js')
                    .then(function(registration) {
                        console.log('ServiceWorker registration successful with scope: ', registration.scope);
                    })
                    .catch(function(err) {
                        console.log('ServiceWorker registration failed: ', err);
                    });
            });
        }
    </script>
</body>
</html>

This is articles.js:
/**
 * HatakeSocial - Articles & Content Script (v3 - Commenting Update)
 *
 * - NEW: Adds a `formatTimestamp` helper function to display dates according to the user's preference (D/M/Y or M/D/Y).
 * - UPDATE: All date displays for articles now use the new `formatTimestamp` function.
 * - This version includes a robust fix for embedding all types of YouTube videos,
 * including Shorts, by converting them to the correct /embed/ format.
 * - NEW: Adds commenting functionality to the view-article.html page.
 */

// --- Date Formatting Helper ---
const formatTimestamp = (timestamp) => {
    if (!timestamp || !timestamp.seconds) {
        return 'Unknown date';
    }
    const date = new Date(timestamp.seconds * 1000);
    const userDateFormat = localStorage.getItem('userDateFormat') || 'dmy'; // Default to D/M/Y

    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();

    if (userDateFormat === 'mdy') {
        return `${month}/${day}/${year}`;
    }
    return `${day}/${month}/${year}`;
};


document.addEventListener('authReady', (e) => {
    const user = e.detail.user;

    // --- Page specific logic ---
    if (document.getElementById('articles-list')) {
        initArticlesListPage(user);
    }
    if (document.getElementById('create-article-form')) {
        initCreateArticlePage(user);
    }
    if (document.getElementById('article-container')) {
        initViewArticlePage(user);
    }
    if (document.getElementById('edit-article-form')) {
        initEditArticlePage(user);
    }
});

// --- Articles List Page ---
function initArticlesListPage(user) {
    const articlesListContainer = document.getElementById('articles-list');
    const writeNewArticleBtn = document.getElementById('write-new-article-btn');
    const searchInput = document.getElementById('article-search');
    const categoryFilter = document.getElementById('article-category-filter');
    const pageTitle = document.getElementById('page-title');
    const filters = document.getElementById('filters');

    const params = new URLSearchParams(window.location.search);
    const pageType = params.get('type') || 'tcg';

    if (pageType === 'blog') {
        if(pageTitle) pageTitle.textContent = 'Hatake Blog';
        if(filters) filters.style.display = 'none';
    } else {
        if(pageTitle) pageTitle.textContent = 'TCG Articles';
    }

    if (user) {
        user.getIdTokenResult().then(idTokenResult => {
            if (idTokenResult.claims.admin && writeNewArticleBtn) {
                 writeNewArticleBtn.classList.remove('hidden');
            }
        });
    }

    let allArticles = [];

    const loadArticles = async () => {
        if(!articlesListContainer) return;
        articlesListContainer.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 col-span-full">Loading posts...</p>';
        try {
            let query = db.collection('articles').where('status', '==', 'published');
            if (pageType === 'blog') {
                query = query.where('type', '==', 'blog_post');
            } else {
                query = query.where('type', '==', 'tcg_article');
            }
            const snapshot = await query.orderBy('createdAt', 'desc').get();

            if (snapshot.empty) {
                articlesListContainer.innerHTML = `<p class="text-center text-gray-500 dark:text-gray-400 col-span-full">No ${pageType === 'blog' ? 'blog posts' : 'articles'} published yet.</p>`;
                return;
            }
            allArticles = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            renderArticles(allArticles);
        } catch (error) {
            console.error("Error loading articles:", error);
            articlesListContainer.innerHTML = '<p class="text-center text-red-500 col-span-full">Could not load posts.</p>';
        }
    };

    const renderArticles = (articles) => {
        if(!articlesListContainer) return;
        articlesListContainer.innerHTML = '';
        articles.forEach(article => {
            const articleCard = document.createElement('a');
            articleCard.href = `view-article.html?id=${article.id}`;
            articleCard.className = 'block bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow';
            
            const snippet = article.content ? article.content.substring(0, 150).replace(/<[^>]+>/g, '') + '...' : '';

            articleCard.innerHTML = `
                <span class="text-sm font-semibold text-blue-600 dark:text-blue-400">${article.category || 'Blog Post'}</span>
                <h3 class="text-xl font-bold text-gray-900 dark:text-white mt-2">${article.title || 'Untitled Post'}</h3>
                <p class="text-gray-600 dark:text-gray-400 mt-2 text-sm">${snippet}</p>
                <div class="mt-4 pt-4 border-t dark:border-gray-700 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                    <span>By ${article.authorName || 'Anonymous'}</span>
                    <span>${formatTimestamp(article.createdAt)}</span>
                </div>
            `;
            articlesListContainer.appendChild(articleCard);
        });
    };
    
    const filterAndSearchArticles = () => {
        const searchTerm = searchInput.value.toLowerCase();
        const category = categoryFilter.value;
        
        let filteredArticles = allArticles;

        if (category) {
            filteredArticles = filteredArticles.filter(a => a.category === category);
        }

        if (searchTerm) {
            filteredArticles = filteredArticles.filter(a => 
                (a.title && a.title.toLowerCase().includes(searchTerm)) || 
                (a.content && a.content.toLowerCase().includes(searchTerm))
            );
        }
        
        renderArticles(filteredArticles);
    };

    if(searchInput) searchInput.addEventListener('input', filterAndSearchArticles);
    if(categoryFilter) categoryFilter.addEventListener('change', filterAndSearchArticles);

    loadArticles();
}

// --- Create & Edit Article Helper ---
function createArticleImageHandler() {
    const input = document.createElement('input');
    input.setAttribute('type', 'file');
    input.setAttribute('accept', 'image/*');
    input.click();

    input.onchange = async () => {
        const file = input.files[0];
        const currentUser = firebase.auth().currentUser;

        if (!file) return;

        if (!currentUser) {
            alert("You must be logged in to upload an image.");
            return;
        }
        
        const quill = this.quill;
        const range = quill.getSelection(true);
        quill.insertText(range.index, ' [Uploading image...] ', 'user');
        
        try {
            const storageRef = storage.ref();
            const imageRef = storageRef.child(`articles/${currentUser.uid}/${Date.now()}_${file.name}`);
            const snapshot = await imageRef.put(file);
            const downloadURL = await snapshot.ref.getDownloadURL();

            quill.deleteText(range.index, ' [Uploading image...] '.length);
            quill.insertEmbed(range.index, 'image', downloadURL);
            quill.setSelection(range.index + 1);
        } catch (error) {
            console.error("Image upload failed: ", error);
            quill.deleteText(range.index, ' [Uploading image...] '.length);
            alert("Image upload failed. Please check your Firebase Storage security rules.");
        }
    };
}

// Helper function to extract video ID from various YouTube URL formats
function getYoutubeVideoId(url) {
    let ID = '';
    url = url.replace(/(>|<)/gi, '').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/|\/shorts\/)/);
    if (url[2] !== undefined) {
        ID = url[2].split(/[^0-9a-z_\-]/i);
        ID = ID[0];
    } else {
        ID = url;
    }
    return ID;
}

// --- NEW MERGED FUNCTION: Initialize Quill with YouTube Shorts fix ---
function initQuillEditor(selector) {
    const toolbarOptions = [
        [{ 'font': [] }],
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
        [{ 'size': ['small', false, 'large', 'huge'] }],
        ['bold', 'italic', 'underline', 'strike'],
        [{ 'color': [] }, { 'background': [] }],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],
        [{ 'align': [] }],
        ['link', 'image', 'video'],
        ['clean']
    ];

    const quill = new Quill(selector, {
        modules: {
            toolbar: {
                container: toolbarOptions,
                handlers: {
                    'image': createArticleImageHandler
                }
            }
        },
        theme: 'snow',
        placeholder: 'Write your masterpiece...',
    });

    // Custom video handler to fix YouTube links
    quill.getModule('toolbar').addHandler('video', () => {
        let url = prompt('Enter Video URL');
        if (url) {
            const videoId = getYoutubeVideoId(url);
            if (videoId) {
                // Use the /embed/ format to prevent X-Frame-Options errors
                const embedUrl = `https://www.youtube.com/embed/${videoId}`;
                const range = quill.getSelection(true);
                quill.insertEmbed(range.index, 'video', embedUrl, 'user');
            } else {
                // If it's not a recognizable YouTube link, insert it as is
                const range = quill.getSelection(true);
                quill.insertEmbed(range.index, 'video', url, 'user');
            }
        }
    });
    
    return quill;
}


// --- Create Article Page ---
function initCreateArticlePage(user) {
    if (!user) {
        window.location.href = 'index.html';
        return;
    }

    const form = document.getElementById('create-article-form');
    const articleTypeSelect = document.getElementById('article-type');
    const tcgCategorySection = document.getElementById('tcg-category-section');
    const deckPrimerInfo = document.getElementById('deck-primer-info');
    const deckNameDisplay = document.getElementById('deck-name-display');
    const articleCategorySelect = document.getElementById('article-category');
    const articleDeckIdInput = document.getElementById('article-deck-id');
    
    const quill = initQuillEditor('#editor');

    if(articleTypeSelect) {
        articleTypeSelect.addEventListener('change', () => {
            if (articleTypeSelect.value === 'blog_post') {
                if(tcgCategorySection) tcgCategorySection.style.display = 'none';
            } else {
                if(tcgCategorySection) tcgCategorySection.style.display = 'block';
            }
        });
    }

    const params = new URLSearchParams(window.location.search);
    const deckId = params.get('deckId');
    const deckName = params.get('deckName');

    if (deckId && deckName) {
        if(articleTypeSelect) articleTypeSelect.value = 'tcg_article';
        if(articleCategorySelect) articleCategorySelect.value = 'Deck Primer';
        if(articleCategorySelect) articleCategorySelect.disabled = true;
        if(articleDeckIdInput) articleDeckIdInput.value = deckId;
        if(deckNameDisplay) deckNameDisplay.textContent = decodeURIComponent(deckName);
        if(deckPrimerInfo) deckPrimerInfo.classList.remove('hidden');
    }

    if(form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const title = document.getElementById('article-title').value;
            const type = articleTypeSelect.value;
            const category = (type === 'tcg_article') ? articleCategorySelect.value : 'Blog Post';
            const content = quill.root.innerHTML;

            if (!title.trim() || quill.getLength() < 10) {
                alert('Please provide a title and some content for your post.');
                return;
            }

            const articleData = {
                title,
                type,
                category,
                content,
                authorId: user.uid,
                authorName: user.displayName,
                status: 'published',
                createdAt: new Date(),
                deckId: articleDeckIdInput.value || null
            };

            try {
                const docRef = await db.collection('articles').add(articleData);
                alert('Post published successfully!');
                window.location.href = `view-article.html?id=${docRef.id}`;
            } catch (error) {
                console.error("Error publishing post:", error);
                alert('Failed to publish post.');
            }
        });
    }
}

// --- View Article Page ---
function initViewArticlePage(user) {
    const articleContainer = document.getElementById('article-container');
    const params = new URLSearchParams(window.location.search);
    const articleId = params.get('id');

    if (!articleId) {
        if(articleContainer) articleContainer.innerHTML = '<p class="text-center text-red-500">Post not found. No ID was provided.</p>';
        return;
    }

    const loadArticle = async () => {
        try {
            const doc = await db.collection('articles').doc(articleId).get();
            if (!doc.exists) {
                if(articleContainer) articleContainer.innerHTML = '<p class="text-center text-red-500">Post not found.</p>';
                return;
            }
            const article = doc.data();

            const title = article.title || "Untitled Post";
            const authorName = article.authorName || "Anonymous";
            const authorId = article.authorId;
            const category = article.category || "General";
            const content = article.content || "<p>This post has no content.</p>";
            const createdAt = formatTimestamp(article.createdAt);

            if(articleContainer) {
                const topControls = document.createElement('div');
                topControls.className = 'flex justify-between items-start mb-2';
                topControls.innerHTML = `
                    <h1 class="text-4xl font-extrabold text-gray-900 dark:text-white">${title}</h1>
                    <div id="edit-button-container" class="flex-shrink-0 ml-4"></div>
                `;
                
                if (user && authorId) {
                    user.getIdTokenResult().then((idTokenResult) => {
                         const isAuthor = user.uid === authorId;
                         const isAdmin = !!idTokenResult.claims.admin;

                         if (isAuthor || isAdmin) {
                            const editButtonContainer = topControls.querySelector('#edit-button-container');
                            const editButton = document.createElement('a');
                            editButton.href = `edit-article.html?id=${doc.id}`;
                            editButton.className = 'px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700 transition';
                            editButton.textContent = 'Edit Post';
                            editButtonContainer.appendChild(editButton);
                         }
                    });
                }

                articleContainer.innerHTML = ''; 
                articleContainer.appendChild(topControls);

                const metaInfo = document.createElement('div');
                metaInfo.className = "text-sm text-gray-500 dark:text-gray-400 mb-6";
                metaInfo.innerHTML = `
                    <span>By <a href="profile.html?uid=${authorId}" class="text-blue-600 hover:underline">${authorName}</a></span>
                    <span class="mx-2">&bull;</span>
                    <span>Published on ${createdAt}</span>
                    <span class="mx-2">&bull;</span>
                    <span class="font-semibold">${category}</span>
                `;
                articleContainer.appendChild(metaInfo);

                const contentDiv = document.createElement('div');
                contentDiv.className = "prose dark:prose-invert max-w-none ql-snow";
                contentDiv.innerHTML = `<div class="ql-editor">${content}</div>`;
                articleContainer.appendChild(contentDiv);

                // Load comments and display comment form
                loadComments(articleId);
                displayCommentForm(articleId, user);
            }
        } catch (error) {
            console.error("Error loading article:", error);
            if(articleContainer) articleContainer.innerHTML = '<p class="text-center text-red-500">Could not load the article due to an error. Please check the console for details.</p>';
        }
    };
    loadArticle();
}

// --- Comment Functions ---
function displayCommentForm(articleId, user) {
    const commentFormContainer = document.getElementById('comment-form-container');
    if (!commentFormContainer) return;

    if (user) {
        commentFormContainer.innerHTML = `
            <form id="comment-form">
                <textarea id="comment-text" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" placeholder="Write a comment..." required></textarea>
                <button type="submit" class="mt-2 px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700">Post Comment</button>
            </form>
        `;
        document.getElementById('comment-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const commentText = document.getElementById('comment-text').value;
            postComment(articleId, user, commentText);
        });
    } else {
        commentFormContainer.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400">You must be logged in to post a comment.</p>';
    }
}

async function postComment(articleId, user, text) {
    if (!text.trim()) {
        alert('Comment cannot be empty.');
        return;
    }

    try {
        await db.collection('articles').doc(articleId).collection('comments').add({
            text: text,
            authorId: user.uid,
            authorName: user.displayName,
            createdAt: new Date()
        });
        document.getElementById('comment-text').value = '';
        loadComments(articleId);
    } catch (error) {
        console.error("Error posting comment:", error);
        alert('Failed to post comment.');
    }
}

async function loadComments(articleId) {
    const commentsList = document.getElementById('comments-list');
    if (!commentsList) return;

    commentsList.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400">Loading comments...</p>';

    try {
        const snapshot = await db.collection('articles').doc(articleId).collection('comments').orderBy('createdAt', 'desc').get();

        if (snapshot.empty) {
            commentsList.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400">No comments yet.</p>';
            return;
        }

        commentsList.innerHTML = '';
        snapshot.forEach(doc => {
            const comment = doc.data();
            const commentEl = document.createElement('div');
            commentEl.className = 'p-4 border-b dark:border-gray-700';
            commentEl.innerHTML = `
                <div class="flex items-center mb-2">
                    <a href="profile.html?uid=${comment.authorId}" class="font-semibold text-blue-600 hover:underline">${comment.authorName}</a>
                    <span class="text-xs text-gray-500 dark:text-gray-400 ml-2">${formatTimestamp(comment.createdAt)}</span>
                </div>
                <p class="text-gray-800 dark:text-gray-300">${comment.text}</p>
            `;
            commentsList.appendChild(commentEl);
        });
    } catch (error) {
        console.error("Error loading comments:", error);
        commentsList.innerHTML = '<p class="text-center text-red-500">Could not load comments.</p>';
    }
}


// --- Edit Article Page ---
function initEditArticlePage(user) {
    if (!user) {
        window.location.href = 'index.html';
        return;
    }

    const form = document.getElementById('edit-article-form');
    const articleTypeSelect = document.getElementById('article-type');
    const tcgCategorySection = document.getElementById('tcg-category-section');
    const articleCategorySelect = document.getElementById('article-category');
    const articleTitleInput = document.getElementById('article-title');

    const params = new URLSearchParams(window.location.search);
    const articleId = params.get('id');
    if (!articleId) {
        alert('No article specified for editing.');
        window.location.href = 'articles.html';
        return;
    }
    
    const quill = initQuillEditor('#editor');
    
    const articleRef = db.collection('articles').doc(articleId);
    articleRef.get().then(doc => {
        if (!doc.exists) {
            alert('Article not found.');
            window.location.href = 'articles.html';
            return;
        }

        const articleData = doc.data();

        user.getIdTokenResult().then((idTokenResult) => {
            const isAuthor = user.uid === articleData.authorId;
            const isAdmin = !!idTokenResult.claims.admin;
            if (!isAuthor && !isAdmin) {
                alert('You are not authorized to edit this post.');
                window.location.href = 'articles.html';
                return;
            }
        });

        articleTitleInput.value = articleData.title;
        articleTypeSelect.value = articleData.type;
        quill.root.innerHTML = articleData.content;

        if (articleData.type === 'blog_post') {
            if (tcgCategorySection) tcgCategorySection.style.display = 'none';
        } else {
            if (tcgCategorySection) tcgCategorySection.style.display = 'block';
            if (articleCategorySelect) articleCategorySelect.value = articleData.category;
        }

    }).catch(error => {
        console.error("Error fetching article for editing:", error);
        alert('Could not load article data.');
    });

    if(articleTypeSelect) {
        articleTypeSelect.addEventListener('change', () => {
            if (articleTypeSelect.value === 'blog_post') {
                if(tcgCategorySection) tcgCategorySection.style.display = 'none';
            } else {
                if(tcgCategorySection) tcgCategorySection.style.display = 'block';
            }
        });
    }

    if(form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const title = articleTitleInput.value;
            const type = articleTypeSelect.value;
            const category = (type === 'tcg_article') ? articleCategorySelect.value : 'Blog Post';
            const content = quill.root.innerHTML;

            if (!title.trim() || quill.getLength() < 10) {
                alert('Please provide a title and some content for your post.');
                return;
            }

            const updatedData = {
                title,
                type,
                category,
                content,
                updatedAt: new Date()
            };

            try {
                await articleRef.update(updatedData);
                alert('Post updated successfully!');
                window.location.href = `view-article.html?id=${articleId}`;
            } catch (error) {
                console.error("Error updating post:", error);
                alert('Failed to update post.');
            }
        });
    }
}