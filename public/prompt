You aren't able to click on a users name in order to see their profile from messages.html and messenger widget.
This is Messages.js:
/**
 * HatakeSocial - Real-time Messaging System (v16.2 - Undefined Field Fix)
 */

document.addEventListener('authReady', ({ detail: { user } }) => {
    const messagesPageContainer = document.getElementById('chat-window');
    if (!messagesPageContainer) return;

    if (!user) {
        // ... (User not logged in message)
        return;
    }

    const db = firebase.firestore();
    let activeConversationId = null;
    let unsubscribeMessages = null;
    let unsubscribeConversations = null;

    const conversationsContainer = document.getElementById('conversations-container');
    const chatPlaceholder = document.getElementById('chat-placeholder');
    const activeChatContainer = document.getElementById('active-chat-container');
    const chatHeader = document.getElementById('chat-header');
    const messagesContainer = document.getElementById('messages-container');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    const newConversationBtn = document.getElementById('new-conversation-btn');

    const formatTimestamp = (timestamp) => {
        if (!timestamp || !timestamp.toDate) return '';
        const date = timestamp.toDate();
        const time = date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });
        const isToday = (new Date()).toDateString() === date.toDateString();
        return isToday ? time : date.toLocaleDateString();
    };

    const listenForConversations = () => {
        if (unsubscribeConversations) unsubscribeConversations();
        conversationsContainer.innerHTML = '<p class="p-4 text-center text-gray-500">Loading conversations...</p>';
        unsubscribeConversations = db.collection('conversations')
            .where('participants', 'array-contains', user.uid)
            .orderBy('lastUpdated', 'desc')
            .onSnapshot(snapshot => {
                if (snapshot.empty) {
                    conversationsContainer.innerHTML = '<p class="p-4 text-center text-gray-500">No conversations yet.</p>';
                    return;
                }
                conversationsContainer.innerHTML = '';
                snapshot.forEach(doc => {
                    const convo = doc.data();
                    const otherUserId = convo.participants.find(p => p !== user.uid);
                    if (!otherUserId || !convo.participantInfo || !convo.participantInfo[otherUserId]) return;
                    const otherUserData = convo.participantInfo[otherUserId];
                    const convoElement = document.createElement('div');
                    convoElement.className = 'conversation-item flex items-center p-3 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer border-b border-gray-200 dark:border-gray-700';
                    convoElement.dataset.conversationId = doc.id;
                    convoElement.innerHTML = `
                        <img src="${otherUserData.photoURL || 'https://i.imgur.com/B06rBhI.png'}" alt="${otherUserData.displayName}" class="h-12 w-12 rounded-full object-cover mr-4">
                        <div class="flex-1 truncate">
                            <div class="flex justify-between items-center">
                                <p class="font-semibold">${otherUserData.displayName || "User"}</p>
                                <p class="text-xs text-gray-400">${formatTimestamp(convo.lastUpdated)}</p>
                            </div>
                            <p class="text-sm text-gray-500 dark:text-gray-400 truncate">${convo.lastMessage || 'No messages yet'}</p>
                        </div>`;
                    convoElement.addEventListener('click', () => selectConversation(doc.id, otherUserData));
                    conversationsContainer.appendChild(convoElement);
                });
            }, error => {
                console.error("Firestore Error: Failed to listen for conversations.", error);
                conversationsContainer.innerHTML = '<p class="p-4 text-center text-red-500">Could not load conversations.</p>';
            });
    };

    const selectConversation = (conversationId, otherUser) => {
        if (typeof window.showChatArea === 'function') window.showChatArea();
        activeConversationId = conversationId;
        document.querySelectorAll('.conversation-item').forEach(el => el.classList.remove('bg-blue-100', 'dark:bg-blue-900/50'));
        const selectedEl = conversationsContainer.querySelector(`[data-conversation-id="${conversationId}"]`);
        if(selectedEl) selectedEl.classList.add('bg-blue-100', 'dark:bg-blue-900/50');
        
        chatPlaceholder.classList.add('hidden');
        activeChatContainer.classList.remove('hidden');
        activeChatContainer.classList.add('flex');
        const existingBackButton = chatHeader.querySelector('#mobile-back-btn');
        chatHeader.innerHTML = `
            <img src="${otherUser.photoURL || 'https://i.imgur.com/B06rBhI.png'}" alt="${otherUser.displayName}" class="h-10 w-10 rounded-full object-cover mr-3">
            <div>
                <p class="font-bold">${otherUser.displayName || "User"}</p>
                <p class="text-xs text-gray-500">@${otherUser.handle || otherUser.displayName}</p>
            </div>`;
        if (existingBackButton) chatHeader.prepend(existingBackButton);
        listenForMessages(conversationId);
    };

    const listenForMessages = (conversationId) => {
        if (unsubscribeMessages) unsubscribeMessages();
        messagesContainer.innerHTML = '';
        unsubscribeMessages = db.collection('conversations').doc(conversationId).collection('messages')
            .orderBy('timestamp', 'asc')
            .onSnapshot(snapshot => {
                messagesContainer.innerHTML = ''; // Clear messages to prevent duplicates
                snapshot.forEach(doc => renderMessage(doc.id, doc.data()));
                scrollToBottom();
            }, error => {
                console.error(`Firestore Error: Failed to listen for messages in ${conversationId}.`, error);
            });
    };

    const renderMessage = (messageId, message) => {
        const messageWrapper = document.createElement('div');
        messageWrapper.id = `message-${messageId}`;
        const isCurrentUser = message.senderId === user.uid;
        messageWrapper.className = `flex flex-col mb-3 ${isCurrentUser ? 'items-end' : 'items-start'}`;
        const messageBubble = document.createElement('div');
        messageBubble.className = `p-3 rounded-2xl max-w-xs md:max-w-md ${isCurrentUser ? 'bg-blue-600 text-white' : 'bg-gray-200 dark:bg-gray-700'}`;
        messageBubble.textContent = message.text;
        const timestampEl = document.createElement('p');
        timestampEl.className = 'text-xs text-gray-400 mt-1 px-2 timestamp';
        timestampEl.textContent = formatTimestamp(message.timestamp);
        messageWrapper.appendChild(messageBubble);
        messageWrapper.appendChild(timestampEl);
        messagesContainer.appendChild(messageWrapper);
    };

    const scrollToBottom = () => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    };

    messageForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const text = messageInput.value.trim();
        if (text === '' || !activeConversationId) return;
        const originalMessage = text;
        messageInput.value = '';

        const messageData = {
            text: originalMessage,
            senderId: user.uid,
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        };

        const convoRef = db.collection('conversations').doc(activeConversationId);
        const messageRef = convoRef.collection('messages').doc();

        const batch = db.batch();
        batch.set(messageRef, messageData);
        batch.update(convoRef, {
            lastMessage: originalMessage,
            lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
        });

        try {
            await batch.commit();
            scrollToBottom();
        } catch (error) {
            console.error("Error sending message:", error);
            alert("Could not send message.");
            messageInput.value = originalMessage;
        }
    });
    
    // --- MODIFIED FUNCTION ---
    const startConversation = async (otherUserId, otherUserData) => {
        if (user.uid === otherUserId) {
            alert("You cannot start a conversation with yourself.");
            return;
        }

        try {
            const conversationId = [user.uid, otherUserId].sort().join('_');
            const convoRef = db.collection('conversations').doc(conversationId);
            
            // FIX: Ensure all participant info fields have a fallback value to prevent 'undefined' errors.
            const conversationData = {
                participants: [user.uid, otherUserId],
                participantInfo: {
                    [user.uid]: {
                        displayName: user.displayName || "User",
                        photoURL: user.photoURL || null,
                        handle: user.handle || user.displayName || "user"
                    },
                    [otherUserId]: {
                        displayName: otherUserData.displayName || "User",
                        photoURL: otherUserData.photoURL || null,
                        handle: otherUserData.handle || otherUserData.displayName || "user"
                    }
                },
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
                lastMessage: ''
            };
            
            await convoRef.set(conversationData, { merge: true }); // Use merge:true to avoid overwriting messages

            selectConversation(conversationId, conversationData.participantInfo[otherUserId]);
        } catch (error) {
            console.error("Error starting conversation:", error);
            alert("Could not start conversation: " + error.message);
        }
    };

    if (newConversationBtn) {
        newConversationBtn.addEventListener('click', () => {
            if (window.openNewConversationModal) {
                window.openNewConversationModal(false, startConversation);
            } else {
                console.error('openNewConversationModal function not found. Is auth.js loaded correctly?');
            }
        });
    }

    const checkForUrlParams = async () => {
        const params = new URLSearchParams(window.location.search);
        const userIdToMessage = params.get('userId');
        if (userIdToMessage && userIdToMessage !== user.uid) {
            const userToMessageDoc = await db.collection('users').doc(userIdToMessage).get();
            if (userToMessageDoc.exists) {
                await startConversation(userIdToMessage, userToMessageDoc.data());
                history.replaceState(null, '', window.location.pathname);
            }
        }
    };

    listenForConversations();
    checkForUrlParams();
});

This is messages.html:
<!DOCTYPE html>
<html class="dark" lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>
   Messages - HatakeSocial
  </title>
<script src="https://cdn.tailwindcss.com">
</script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet"/>
<link href="css/style.css" rel="stylesheet"/>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js">
</script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js">
</script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js">
</script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js">
</script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-functions.js">
</script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-analytics.js">
</script>
<style>
/* Additional mobile-specific fixes */
@media (max-width: 768px) {
  /* Ensure conversations list doesn't take too much space on mobile */
  #conversations-list {
    width: 100% !important;
    max-width: 320px;
  }
  
  /* Make chat window take remaining space properly */
  #chat-window {
    min-width: 0;
    flex: 1;
  }
  
  /* Fix message form to stay within bounds */
  #message-form {
    gap: 8px;
    padding: 0;
  }
  
  /* Ensure message input doesn't overflow */
  #message-input {
    min-width: 0;
    flex: 1;
  }
  
  /* Fix send button size and positioning */
  #message-form button {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
  }
  
  /* Improve header search on mobile */
  .relative input {
    width: 100% !important;
    max-width: 250px;
  }
  
  /* Better spacing for mobile */
  .p-4 {
    padding: 12px;
  }
  
  /* Ensure proper text wrapping */
  .space-y-2 > * {
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
}

@media (max-width: 640px) {
  /* Hide conversations list on very small screens when chat is active */
  .mobile-chat-active #conversations-list {
    display: none;
  }
  
  /* Full width chat on small screens */
  .mobile-chat-active #chat-window {
    width: 100%;
  }
  
  /* Smaller padding on very small screens */
  .p-4 {
    padding: 8px;
  }
  
  /* Adjust header height for mobile */
  header {
    height: auto;
    min-height: 64px;
    padding: 12px 16px;
  }
  
  /* Stack header elements on very small screens */
  header .flex {
    flex-wrap: wrap;
    gap: 8px;
  }
}
</style>
    <link rel="manifest" href="/manifest.json">
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-200 font-sans overflow-hidden">
<div id="toast-container">
</div>
<div class="flex h-screen"><div class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden" id="sidebar-overlay"></div>
<aside class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex-shrink-0 flex flex-col fixed inset-y-0 left-0 z-50 lg:relative lg:translate-x-0 -translate-x-full transition-transform duration-300 ease-in-out" id="sidebar">
<div class="h-20 md:h-28 flex items-center justify-center border-b border-gray-200 dark:border-gray-700 px-4">
<a class="flex flex-col items-center space-y-1" href="app.html">
<img alt="HatakeSocial Logo" class="h-12 md:h-16" onerror="this.onerror=null; this.src='https://placehold.co/150x40?text=HatakeSocial';" src="https://i.imgur.com/B06rBhI.png"/>
<span class="font-bold text-sm md:text-lg text-blue-600 dark:text-blue-400">
       HatakeSocial
      </span>
</a>
</div>
<nav class="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="app.html">
<i class="fas fa-home w-6 text-center">
</i>
<span class="ml-3">
       Feed
      </span>
</a>
<a class="flex items-center px-4 py-2 bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 rounded-md" href="messages.html">
<i class="fas fa-comments w-6 text-center">
</i>
<span class="ml-3">
       Messages
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="community.html">
<i class="fas fa-users w-6 text-center">
</i>
<span class="ml-3">
       Community
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=tcg"><i class="fas fa-newspaper w-6 text-center"></i><span class="ml-3">TCG Articles</span></a><a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=blog"><i class="fas fa-blog w-6 text-center"></i><span class="ml-3">Hatake Blog</span></a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="events.html">
<i class="fas fa-calendar-alt w-6 text-center">
</i>
<span class="ml-3">
       Events
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="my_collection.html">
<i class="fas fa-layer-group w-6 text-center">
</i>
<span class="ml-3">
       My Collection
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="deck.html">
<i class="fas fa-book-open w-6 text-center">
</i>
<span class="ml-3">
       Deck Builder
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="shop.html">
<i class="fas fa-shopping-cart w-6 text-center">
</i>
<span class="ml-3">
       Shop
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="marketplace.html">
<i class="fas fa-store w-6 text-center">
</i>
<span class="ml-3">
       Marketplace
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="trades.html">
<i class="fas fa-exchange-alt w-6 text-center">
</i>
<span class="ml-3">
       Trades
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="profile.html">
<i class="fas fa-user w-6 text-center">
</i>
<span class="ml-3">
       Profile
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="settings.html">
<i class="fas fa-cog w-6 text-center">
</i>
<span class="ml-3">
       Settings
      </span>
</a>
<a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="about.html">
<i class="fas fa-info-circle w-6 text-center">
</i>
<span class="ml-3">
       About Us
      </span>
</a>
</nav>
<div class="p-4 border-t border-gray-200 dark:border-gray-700 hidden" id="sidebar-user-info">
</div>
</aside>
<main class="flex-1 flex flex-col overflow-y-auto">
<header class="h-16 md:h-28 flex items-center justify-between px-4 md:px-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
<div class="flex items-center flex-1 min-w-0">
<button class="lg:hidden mr-2 md:mr-4 text-gray-600 dark:text-gray-300" id="sidebar-toggle">
<i class="fas fa-bars text-lg md:text-xl">
</i>
</button>
<div class="relative flex-1 max-w-sm md:max-w-md">
<i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
</i>
<input class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-gray-50 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="main-search-bar" placeholder="Search for cards, users, or articles..." type="text"/>
<div class="absolute mt-2 w-full bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl z-10 hidden" id="main-search-results">
</div>
</div>
</div>
<div class="flex items-center space-x-2 md:space-x-5 ml-2" id="user-actions">
<div class="space-x-1 md:space-x-2">
<button class="px-2 md:px-4 py-1 md:py-2 bg-blue-600 text-white font-semibold text-sm md:text-base rounded-full hover:bg-blue-700" id="header-login-btn">
        Login
       </button>
<button class="px-2 md:px-4 py-1 md:py-2 bg-gray-600 text-white font-semibold text-sm md:text-base rounded-full hover:bg-gray-700" id="header-register-btn">
        Register
       </button>
</div>
</div>
</header>
<div class="flex-1 flex overflow-hidden">
<div class="w-full sm:w-1/2 md:w-1/3 lg:w-1/4 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col" id="conversations-list">
<div class="p-3 md:p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center flex-wrap gap-2">
<button class="flex-grow bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 flex items-center justify-center text-sm md:text-base" id="new-conversation-btn">
<i class="fas fa-plus mr-2"></i>
<span>New Message</span>
</button>
</div>
<div class="flex-1 overflow-y-auto" id="conversations-container">
<p class="p-4 text-center text-gray-500">
        Loading conversations...
       </p>
</div>
</div>
<div class="flex-1 flex flex-col bg-gray-50 dark:bg-gray-900 min-w-0" id="chat-window">
<div class="flex-1 flex flex-col items-center justify-center text-center p-4" id="chat-placeholder">
<i class="fas fa-comments text-4xl md:text-6xl text-gray-300 dark:text-gray-600">
</i>
       <h2 class="mt-4 text-xl md:text-2xl font-semibold">
        Select a chat
       </h2>
       <p class="text-gray-500 dark:text-gray-400 text-sm md:text-base">
        Choose from your existing conversations or start a new one.
       </p>
</div>
<div class="hidden flex-1 flex flex-col overflow-hidden min-w-0" id="active-chat-container">
<div class="flex items-center p-3 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800" id="chat-header">
</div>
<div class="flex-1 p-3 md:p-4 overflow-y-auto space-y-2" id="messages-container">
</div>
<div class="p-3 md:p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 flex-shrink-0">
<form class="flex items-center gap-2 md:gap-3" id="message-form">
<input autocomplete="off" class="flex-1 min-w-0 p-2 border rounded-full bg-gray-100 dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" id="message-input" placeholder="Type a message..." type="text"/>
<button class="bg-blue-600 text-white rounded-full h-10 w-10 flex items-center justify-center hover:bg-blue-700 flex-shrink-0" type="submit">
<i class="fas fa-paper-plane">
</i>
</button>
</form>
</div>
</div>
</div>
</div>
</main>
</div>

<div class="fixed inset-0 bg-black bg-opacity-60 hidden items-center justify-center z-[1001]" id="cartModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-lg flex flex-col" style="height: 90vh; max-height: 800px;">
<div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
<h2 class="text-xl font-bold">Your Cart</h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeCartModal">×</button>
</div>
<div class="p-6 flex-grow overflow-y-auto" id="cart-items-container">
<p class="text-center text-gray-500 dark:text-gray-400">Your cart is empty.</p>
</div>
<div class="p-6 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
<div class="flex justify-between items-center font-bold text-lg">
<span>Subtotal</span>
<span id="cart-subtotal">$0.00</span>
</div>
<p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Shipping &amp; taxes calculated at checkout.</p>
<button class="w-full mt-4 bg-green-600 text-white font-semibold py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400" disabled="" id="checkout-btn">
                    Proceed to Checkout
                </button>
</div>
</div>
</div>

<div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="loginModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Login
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeLoginModal">
                ×
            </button>
</div>
<form class="mt-4 space-y-4" id="loginForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginPassword" placeholder="Password" required="" type="password"/>
<p class="text-red-500 text-sm hidden" id="login-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Login
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleLoginButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Sign in with Google
            </button>
</form>
</div>
</div>

<div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="registerModal">
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
<div class="flex justify-between items-center">
<h2 class="text-xl font-bold">
                Register
            </h2>
<button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeRegisterModal">
                ×
            </button>
</div>
<form class="mt-4 space-y-4" id="registerForm">
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerEmail" placeholder="Email" required="" type="email"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerPassword" placeholder="Password" required="" type="password"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCity" placeholder="City" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCountry" placeholder="Country" type="text"/>
<input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerFavoriteTcg" placeholder="Favorite TCG" type="text"/>
<p class="text-red-500 text-sm hidden" id="register-error-message">
</p>
<button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
                Register
            </button>
<button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleRegisterButton" type="button">
<img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
                Register with Google
            </button>
</form>
</div>
</div>

<script src="/__/firebase/9.6.1/firebase-app-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-auth-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-firestore-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-storage-compat.js"></script>
<script src="/__/firebase/9.6.1/firebase-functions-compat.js"></script>
<script src="/__/firebase/init.js"></script>

<script src="js/auth.js">
</script>
<script src="js/messages.js">
</script>
<script src="js/darkmode.js">
</script>
<script src="js/messenger.js">
</script>
<script src="js/cart.js"></script>

<script>
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebarOverlay = document.getElementById('sidebar-overlay');

    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('-translate-x-full');
            sidebarOverlay.classList.toggle('hidden');
        });
    }

    if (sidebarOverlay) {
        sidebarOverlay.addEventListener('click', () => {
            sidebar.classList.add('-translate-x-full');
            sidebarOverlay.classList.add('hidden');
        });
    }

    // Mobile chat functionality
    function toggleMobileChat(show) {
        const body = document.body;
        const conversationsList = document.getElementById('conversations-list');
        const chatWindow = document.getElementById('chat-window');
        const backButton = document.getElementById('mobile-back-btn');
        
        if (show) {
            body.classList.add('mobile-chat-active');
            if (window.innerWidth < 640) {
                conversationsList.style.display = 'none';
                chatWindow.style.width = '100%';
                if (backButton) backButton.classList.remove('hidden');
            }
        } else {
            body.classList.remove('mobile-chat-active');
            conversationsList.style.display = '';
            chatWindow.style.width = '';
            if (backButton) backButton.classList.add('hidden');
        }
    }

    // Enhanced mobile navigation with proper conversation selection
    document.addEventListener('DOMContentLoaded', function() {
        // Create and add back button to chat header
        const backButton = document.createElement('button');
        backButton.innerHTML = '<i class="fas fa-arrow-left mr-2"></i>Back';
        backButton.className = 'hidden p-2 text-blue-600 font-semibold text-sm bg-gray-100 dark:bg-gray-700 rounded-md';
        backButton.id = 'mobile-back-btn';
        
        const chatHeader = document.getElementById('chat-header');
        if (chatHeader) {
            chatHeader.style.position = 'relative';
            chatHeader.prepend(backButton);
        }

        // Back button functionality
        backButton.addEventListener('click', () => {
            toggleMobileChat(false);
            
            // Properly reset the chat view on mobile
            const activeChatContainer = document.getElementById('active-chat-container');
            const chatPlaceholder = document.getElementById('chat-placeholder');
            const conversationsList = document.getElementById('conversations-list');
            
            if (window.innerWidth < 640) {
                // Hide active chat and show placeholder
                if (activeChatContainer) {
                    activeChatContainer.classList.add('hidden');
                    activeChatContainer.classList.remove('flex');
                }
                if (chatPlaceholder) {
                    chatPlaceholder.classList.remove('hidden');
                }
                // Show conversations list
                if (conversationsList) {
                    conversationsList.style.display = '';
                    conversationsList.classList.remove('hidden');
                }
                
                // Clear active conversation selection
                document.querySelectorAll('.conversation-item').forEach(el => {
                    el.classList.remove('bg-blue-100', 'dark:bg-blue-900/50');
                });
            }
        });

        // Listen for conversation clicks using event delegation
        document.addEventListener('click', function(e) {
            const conversationItem = e.target.closest('.conversation-item');
            if (conversationItem && window.innerWidth < 640) {
                // On mobile, switch to chat view when conversation is selected
                setTimeout(() => {
                    toggleMobileChat(true);
                }, 100); // Small delay to ensure conversation is selected first
            }
        });

        // Handle window resize to reset mobile state
        window.addEventListener('resize', function() {
            if (window.innerWidth >= 640) {
                // Reset mobile state on larger screens
                toggleMobileChat(false);
                const conversationsList = document.getElementById('conversations-list');
                const chatWindow = document.getElementById('chat-window');
                conversationsList.style.display = '';
                chatWindow.style.width = '';
            }
        });

        // Ensure proper mobile layout on page load
        if (window.innerWidth < 640) {
            const activeChatContainer = document.getElementById('active-chat-container');
            if (activeChatContainer && !activeChatContainer.classList.contains('hidden')) {
                toggleMobileChat(true);
            }
        }
    });

    // Add link to style.css if not already present
    if (!document.querySelector('link[href*="css/style.css"]')) {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'css/style.css';
        document.head.appendChild(link);
    }
</script>

    <script>
        // Service Worker Registration
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/sw.js')
                    .then(function(registration) {
                        console.log('ServiceWorker registration successful with scope: ', registration.scope);
                    })
                    .catch(function(err) {
                        console.log('ServiceWorker registration failed: ', err);
                    });
            });
        }
    </script>
</body>
</html>

This is messenger.js:
(function() {
    'use strict';

    if (!window.messenger) {
        window.messenger = {};
    }

    let isInitialized = false;
    let unsubscribeWidgetMessages = null;
    let unsubscribeWidgetConversations = null;
    let db, currentUser;

    const formatTimestamp = (timestamp) => {
        if (!timestamp || !timestamp.toDate) return '';
        const date = timestamp.toDate();
        const userDateFormat = localStorage.getItem('userDateFormat') || 'dmy';
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const time = date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });
        let datePart = (userDateFormat === 'mdy') ? `${month}/${day}/${year}` : `${day}/${month}/${year}`;
        const isToday = date.toDateString() === new Date().toDateString();
        return isToday ? time : datePart;
    };

    const createMessengerWidgetHTML = () => {
        const widgetContainer = document.createElement('div');
        widgetContainer.id = 'messenger-widget-container';
        widgetContainer.className = 'minimized';
        widgetContainer.innerHTML = `
            <div id="messenger-open-btn">
                <i class="fas fa-comments"></i>
            </div>
            <div class="fixed bottom-0 right-5 w-80 z-[1000]" id="messenger-widget">
                <div class="bg-blue-700 text-white p-3 rounded-t-lg cursor-pointer flex justify-between items-center" id="messenger-widget-header">
                    <i class="fas fa-plus cursor-pointer hover:text-gray-200" id="widget-new-conversation-btn"></i>
                    <span class="font-bold truncate" id="widget-main-header-text">Messages</span>
                    <i class="fas fa-chevron-up" id="widget-toggle-icon"></i>
                </div>
                <div class="bg-white dark:bg-gray-800 h-96 border-x border-b border-gray-300 dark:border-gray-600 rounded-b-lg flex flex-col overflow-hidden" id="messenger-widget-body">
                    <div class="h-full flex flex-col" id="widget-list-view">
                        <div class="flex-grow overflow-y-auto" id="widget-conversations-list">
                            <p class="p-4 text-center text-gray-500">Loading...</p>
                        </div>
                    </div>
                    <div class="h-full flex-col hidden" id="widget-chat-view">
                        <div class="p-3 border-b border-gray-200 dark:border-gray-700 flex items-center space-x-3 flex-shrink-0" id="widget-chat-header"></div>
                        <div class="flex-grow p-3 overflow-y-auto space-y-3" id="widget-messages-container"></div>
                        <div class="p-2 border-t border-gray-200 dark:border-gray-700 flex-shrink-0">
                            <form class="flex items-center space-x-2" id="widget-message-form">
                                <input autocomplete="off" class="flex-1 p-2 border rounded-full bg-gray-100 dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm" id="widget-message-input" placeholder="Type a message..." type="text"/>
                                <button class="bg-blue-600 text-white rounded-full h-8 w-8 flex items-center justify-center hover:bg-blue-700 flex-shrink-0" type="submit">
                                    <i class="fas fa-paper-plane text-xs"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(widgetContainer);
    };

    const selectWidgetConversation = (conversationId, otherUser) => {
        const messengerWidgetContainer = document.getElementById('messenger-widget-container');
        const widgetListView = document.getElementById('widget-list-view');
        const widgetChatView = document.getElementById('widget-chat-view');
        const widgetMainHeaderText = document.getElementById('widget-main-header-text');

        if (messengerWidgetContainer.classList.contains('minimized')) {
            messengerWidgetContainer.classList.remove('minimized');
            localStorage.setItem('messengerWidget-minimized', 'false');
            const widgetToggleIcon = document.getElementById('widget-toggle-icon');
            widgetToggleIcon.classList.add('fa-chevron-down');
            widgetToggleIcon.classList.remove('fa-chevron-up');
        }

        window.messenger.activeWidgetConversationId = conversationId;
        widgetListView.classList.add('hidden');
        widgetChatView.classList.remove('hidden');
        widgetChatView.classList.add('flex');

        const widgetChatHeader = document.getElementById('widget-chat-header');
        widgetChatHeader.innerHTML = `
            <i class="fas fa-arrow-left cursor-pointer p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-full" id="widget-back-btn"></i>
            <img alt="${otherUser.displayName}" class="w-8 h-8 rounded-full object-cover" src="${otherUser.photoURL || 'https://i.imgur.com/B06rBhI.png'}"/>
            <span class="font-semibold truncate">${otherUser.displayName || "User"}</span>
        `;
        
        document.getElementById('widget-back-btn').addEventListener('click', () => {
            widgetChatView.classList.add('hidden');
            widgetChatView.classList.remove('flex');
            widgetListView.classList.remove('hidden');
            widgetMainHeaderText.textContent = 'Messages';
            if (unsubscribeWidgetMessages) unsubscribeWidgetMessages();
            window.messenger.activeWidgetConversationId = null;
        });
        
        widgetMainHeaderText.textContent = otherUser.displayName;
        listenForWidgetMessages(conversationId);
    };

    const listenForWidgetMessages = (conversationId) => {
        const widgetMessagesContainer = document.getElementById('widget-messages-container');
        if (unsubscribeWidgetMessages) unsubscribeWidgetMessages();
        widgetMessagesContainer.innerHTML = '';
        unsubscribeWidgetMessages = db.collection('conversations').doc(conversationId).collection('messages')
            .orderBy('timestamp', 'asc')
            .onSnapshot(snapshot => {
                snapshot.docChanges().forEach(change => {
                    if (change.type === 'added') {
                        renderWidgetMessage(change.doc.data());
                    }
                });
                widgetMessagesContainer.scrollTop = widgetMessagesContainer.scrollHeight;
            });
    };

    const renderWidgetMessage = (message) => {
        const widgetMessagesContainer = document.getElementById('widget-messages-container');
        const messageWrapper = document.createElement('div');
        const isCurrentUser = message.senderId === currentUser.uid;
        messageWrapper.className = `flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}`;
        messageWrapper.innerHTML = `<div class="p-2 rounded-lg max-w-xs text-sm ${isCurrentUser ? 'bg-blue-600 text-white' : 'bg-gray-200 dark:bg-gray-700'}">${message.text}</div>`;
        widgetMessagesContainer.appendChild(messageWrapper);
    };

    // --- MODIFIED FUNCTION ---
    window.messenger.startNewConversation = async (otherUserId) => {
        if (!isInitialized || !currentUser) {
            alert("Messenger is not ready. Please wait a moment.");
            return;
        }

        if (currentUser.uid === otherUserId) {
            alert("You cannot start a conversation with yourself.");
            return;
        }
        
        try {
            const userDoc = await db.collection('users').doc(otherUserId).get();
            if (!userDoc.exists) {
                throw new Error("User not found.");
            }
            const otherUserData = userDoc.data();
            
            const conversationId = [currentUser.uid, otherUserId].sort().join('_');
            const convoRef = db.collection('conversations').doc(conversationId);
            
            // FIX: Ensure all participant info fields have a fallback value to prevent 'undefined' errors.
            const conversationData = {
                participants: [currentUser.uid, otherUserId],
                participantInfo: {
                    [currentUser.uid]: {
                        displayName: currentUser.displayName || "User",
                        photoURL: currentUser.photoURL || null,
                        handle: currentUser.handle || currentUser.displayName || "user"
                    },
                    [otherUserId]: {
                        displayName: otherUserData.displayName || "User",
                        photoURL: otherUserData.photoURL || null,
                        handle: otherUserData.handle || otherUserData.displayName || "user"
                    }
                },
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
                lastMessage: ''
            };
            
            await convoRef.set(conversationData, { merge: true }); // Use merge:true to avoid overwriting messages
            
            selectWidgetConversation(conversationId, conversationData.participantInfo[otherUserId]);

        } catch (error) {
            console.error("Error starting new conversation:", error);
            alert(`Could not start conversation: ${error.message}`);
        }
    };

    window.initializeMessengerWidget = ({ detail: { user } }) => {
        if (isInitialized || document.getElementById('messenger-widget-container')) return;
        
        const isVisible = localStorage.getItem('messengerWidget-visible') !== 'false';
        if (!isVisible) return;
        
        createMessengerWidgetHTML();
        isInitialized = true;
        
        currentUser = user;
        const messengerWidgetContainer = document.getElementById('messenger-widget-container');
        if (!currentUser) {
            messengerWidgetContainer.style.display = 'none';
            return;
        }
        messengerWidgetContainer.style.display = 'block';

        db = firebase.firestore();
        
        const messengerOpenBtn = document.getElementById('messenger-open-btn');
        const messengerWidgetHeader = document.getElementById('messenger-widget-header');
        const widgetToggleIcon = document.getElementById('widget-toggle-icon');
        const widgetMessageForm = document.getElementById('widget-message-form');
        const widgetMessageInput = document.getElementById('widget-message-input');
        const newConversationBtn = document.getElementById('widget-new-conversation-btn');

        const isMinimized = localStorage.getItem('messengerWidget-minimized') === 'true';
        if (isMinimized) {
            messengerWidgetContainer.classList.add('minimized');
            widgetToggleIcon.classList.remove('fa-chevron-down');
            widgetToggleIcon.classList.add('fa-chevron-up');
        } else {
             messengerWidgetContainer.classList.remove('minimized');
             widgetToggleIcon.classList.add('fa-chevron-down');
            widgetToggleIcon.classList.remove('fa-chevron-up');
        }

        messengerOpenBtn.addEventListener('click', () => {
            messengerWidgetContainer.classList.remove('minimized');
            localStorage.setItem('messengerWidget-minimized', 'false');
            widgetToggleIcon.classList.add('fa-chevron-down');
            widgetToggleIcon.classList.remove('fa-chevron-up');
        });
        
        messengerWidgetHeader.addEventListener('click', (e) => {
            if (e.target.id === 'widget-new-conversation-btn') return;
            messengerWidgetContainer.classList.toggle('minimized');
            const minimized = messengerWidgetContainer.classList.contains('minimized');
            localStorage.setItem('messengerWidget-minimized', minimized);
            widgetToggleIcon.classList.toggle('fa-chevron-down', !minimized);
            widgetToggleIcon.classList.toggle('fa-chevron-up', minimized);
        });

        widgetMessageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const text = widgetMessageInput.value.trim();
            if (text === '' || !window.messenger.activeWidgetConversationId) return;
            const originalMessage = text;
            widgetMessageInput.value = '';
            const messageData = { text: originalMessage, senderId: currentUser.uid, timestamp: firebase.firestore.FieldValue.serverTimestamp() };
            const convoRef = db.collection('conversations').doc(window.messenger.activeWidgetConversationId);
            const messageRef = convoRef.collection('messages').doc();
            const batch = db.batch();
            batch.set(messageRef, messageData);
            batch.update(convoRef, { lastMessage: originalMessage, lastUpdated: firebase.firestore.FieldValue.serverTimestamp() });
            try { await batch.commit(); } catch (error) { console.error("Error sending widget message:", error); widgetMessageInput.value = originalMessage; }
        });

        const listenForWidgetConversations = () => {
            const widgetConversationsList = document.getElementById('widget-conversations-list');
            if (unsubscribeWidgetConversations) unsubscribeWidgetConversations();
            unsubscribeWidgetConversations = db.collection('conversations').where('participants', 'array-contains', currentUser.uid).orderBy('lastUpdated', 'desc').limit(10)
                .onSnapshot(snapshot => {
                    widgetConversationsList.innerHTML = snapshot.empty ? '<p class="p-4 text-center text-gray-500 text-sm">No conversations yet.</p>' : '';
                    snapshot.forEach(doc => {
                        const convo = doc.data();
                        const otherUserId = convo.participants.find(p => p !== currentUser.uid);
                        if (!otherUserId || !convo.participantInfo || !convo.participantInfo[otherUserId]) return;
                        
                        const otherUserData = convo.participantInfo[otherUserId];
                        const convoElement = document.createElement('div');
                        convoElement.className = 'flex items-center p-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer rounded-lg mx-1';
                        convoElement.innerHTML = `
                            <img src="${otherUserData.photoURL || 'https://i.imgur.com/B06rBhI.png'}" alt="${otherUserData.displayName}" class="w-10 h-10 rounded-full object-cover mr-3">
                            <div class="flex-1 truncate">
                                <div class="flex justify-between items-center">
                                    <span class="font-semibold">${otherUserData.displayName || "User"}</span>
                                    <span class="text-xs text-gray-400">${formatTimestamp(convo.lastUpdated)}</span>
                                </div>
                                <p class="text-sm text-gray-500 dark:text-gray-400 truncate">${convo.lastMessage || 'Start a conversation'}</p>
                            </div>`;
                        convoElement.addEventListener('click', () => selectWidgetConversation(doc.id, otherUserData));
                        widgetConversationsList.appendChild(convoElement);
                    });
                }, error => {
                    console.error("Error listening for widget conversations:", error);
                    widgetConversationsList.innerHTML = '<p class="p-4 text-center text-red-500 text-sm">Could not load messages.</p>';
                });
        };
        
        newConversationBtn.addEventListener('click', () => {
            if(window.openNewConversationModal) {
                window.openNewConversationModal(true, window.messenger.startNewConversation);
            }
        });

        listenForWidgetConversations();
    };

    window.destroyMessengerWidget = () => {
        const widgetContainer = document.getElementById('messenger-widget-container');
        if (widgetContainer) widgetContainer.remove();
        if (unsubscribeWidgetMessages) unsubscribeWidgetMessages();
        if (unsubscribeWidgetConversations) unsubscribeWidgetConversations();
        isInitialized = false;
        currentUser = null;
        db = null;
    };

    document.addEventListener('authReady', window.initializeMessengerWidget);
})();