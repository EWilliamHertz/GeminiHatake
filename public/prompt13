Can you please review my edits and if not implemented correctly, can you implement it and write fully merged coded files without any placeholders? Thanks!

This is settings.html:
<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>
   Settings - HatakeSocial
  </title>
  <script src="https://cdn.tailwindcss.com">
  </script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"/>
  <link href="css/style.css" rel="stylesheet"/>
  <link href="/manifest.json" rel="manifest"/>
  <style>
   /* Styles from File 1 for PWA/App section */
        .install-card {
            @apply bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-lg shadow-lg;
        }
        .install-btn {
            @apply bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors;
        }
        .share-btn {
            @apply bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-800 transition-colors;
        }
        .feature-grid {
            @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6;
        }
        .feature-card {
            @apply bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700;
        }
        .platform-grid {
            @apply grid grid-cols-1 md:grid-cols-2 gap-6 mt-6;
        }
        .platform-card {
            @apply bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700;
        }
  </style>
 </head>
 <body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-200 font-sans overflow-hidden">
  <div class="flex h-screen">
   <aside class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex-shrink-0 hidden lg:flex flex-col">
    <div class="h-28 flex items-center justify-center border-b border-gray-200 dark:border-gray-700 px-4">
     <a class="flex flex-col items-center space-y-1" href="app.html">
      <img alt="HatakeSocial Logo" class="h-16" onerror="this.onerror=null; this.src='https://placehold.co/150x40?text=HatakeSocial';" src="https://i.imgur.com/B06rBhI.png"/>
      <span class="font-bold text-lg text-blue-600 dark:text-blue-400">
       HatakeSocial
      </span>
     </a>
    </div>
    <nav class="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="app.html">
      <i class="fas fa-home w-6 text-center">
      </i>
      <span class="ml-3">
       Feed
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="messages.html">
      <i class="fas fa-comments w-6 text-center">
      </i>
      <span class="ml-3">
       Messages
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="community.html">
      <i class="fas fa-users w-6 text-center">
      </i>
      <span class="ml-3">
       Community
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=tcg">
      <i class="fas fa-newspaper w-6 text-center">
      </i>
      <span class="ml-3">
       TCG Articles
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="articles.html?type=blog">
      <i class="fas fa-blog w-6 text-center">
      </i>
      <span class="ml-3">
       Hatake Blog
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="events.html">
      <i class="fas fa-calendar-alt w-6 text-center">
      </i>
      <span class="ml-3">
       Events
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="my_collection.html">
      <i class="fas fa-layer-group w-6 text-center">
      </i>
      <span class="ml-3">
       My Collection
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="deck.html">
      <i class="fas fa-book-open w-6 text-center">
      </i>
      <span class="ml-3">
       Deck Builder
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="shop.html">
      <i class="fas fa-shopping-cart w-6 text-center">
      </i>
      <span class="ml-3">
       Shop
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="marketplace.html">
      <i class="fas fa-store w-6 text-center">
      </i>
      <span class="ml-3">
       Marketplace
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="trades.html">
      <i class="fas fa-exchange-alt w-6 text-center">
      </i>
      <span class="ml-3">
       Trades
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="profile.html">
      <i class="fas fa-user w-6 text-center">
      </i>
      <span class="ml-3">
       Profile
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="settings.html">
      <i class="fas fa-cog w-6 text-center">
      </i>
      <span class="ml-3">
       Settings
      </span>
     </a>
     <a class="flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md" href="about.html">
      <i class="fas fa-info-circle w-6 text-center">
      </i>
      <span class="ml-3">
       About Us
      </span>
     </a>
    </nav>
    <div class="p-4 border-t border-gray-200 dark:border-gray-700 hidden" id="sidebar-user-info">
    </div>
   </aside>
   <main class="flex-1 flex flex-col overflow-y-auto">
    <main class="container mx-auto px-4 py-8">
     <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">
      Settings
     </h1>
     <div class="md:flex md:space-x-8" id="settings-page-container">
      <aside class="md:w-1/4 mb-8 md:mb-0">
       <nav class="space-y-1">
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold bg-blue-100 dark:bg-blue-800 text-blue-700 dark:text-blue-200" data-section="profile">
         <i class="fas fa-user-edit mr-2">
         </i>
         Profile &amp; Address
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="privacy">
         <i class="fas fa-shield-alt mr-2">
         </i>
         Privacy
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="notifications">
         <i class="fas fa-bell mr-2">
         </i>
         Notifications
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="account">
         <i class="fas fa-id-card mr-2">
         </i>
         Account
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="security">
         <i class="fas fa-lock mr-2">
         </i>
         Security
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="display">
         <i class="fas fa-desktop mr-2">
         </i>
         Display
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="payouts">
         <i class="fas fa-university mr-2">
         </i>
         Sales &amp; Payouts
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="shipping">
         <i class="fas fa-shipping-fast mr-2">
         </i>
         Shipping
        </button>
        <button class="settings-nav-btn w-full text-left px-4 py-2 rounded-md font-semibold text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" data-section="app">
         <i class="fas fa-mobile-alt mr-2">
         </i>
         App
        </button>
       </nav>
      </aside>
      <div class="md:w-3/4">
       <section class="settings-section bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-profile">
        <form id="profile-settings-form">
         <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
          Public Profile
         </h2>
         <div class="flex items-center space-x-6 mb-6">
          <img class="w-24 h-24 rounded-full object-cover" id="profile-pic-preview" src="https://placehold.co/96x96"/>
          <div>
           <label class="cursor-pointer px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600" for="profile-pic-upload">
            Change Picture
           </label>
           <input accept="image/*" class="hidden" id="profile-pic-upload" type="file"/>
          </div>
         </div>
         <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
           Profile Banner
          </label>
          <img class="w-full h-40 object-cover rounded-md mb-2" id="banner-pic-preview" src="https://placehold.co/600x200"/>
          <label class="cursor-pointer px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600" for="banner-pic-upload">
           Change Banner
          </label>
          <input accept="image/*" class="hidden" id="banner-pic-upload" type="file"/>
         </div>
         <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
           <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="displayName">
            Display Name
           </label>
           <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="displayName" type="text"/>
          </div>
          <div>
           <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="handle">
            Username (@handle)
           </label>
           <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="handle" type="text"/>
          </div>
         </div>
         <div class="mt-6">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="bio">
           Bio
          </label>
          <textarea class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="bio" rows="3"></textarea>
         </div>
         <div class="mt-6">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="favoriteTcg">
           Favorite TCG
          </label>
          <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="favoriteTcg" type="text"/>
         </div>
         <div class="mt-8 pt-6 border-t dark:border-gray-600">
          <h2 class="text-2xl font-bold mb-6 dark:text-white">
           Player Personality
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="playstyle">
             Primary Playstyle
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="playstyle" placeholder="e.g., Aggro, Control, Combo" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="favoriteFormat">
             Favorite Format
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="favoriteFormat" placeholder="e.g., Commander, Modern" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="petCard">
             Pet Card
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="petCard" placeholder="A card you love, no matter what" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="nemesisCard">
             Nemesis Card
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="nemesisCard" placeholder="A card you hate playing against" type="text"/>
           </div>
          </div>
         </div>
         <div class="mt-8 pt-6 border-t dark:border-gray-600">
          <h2 class="text-2xl font-bold mb-6 dark:text-white">
           Shipping Address
          </h2>
          <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
           This address will be shared with your trade partners after a trade is accepted.
          </p>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
           <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="address-street">
             Street Address
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="address-street" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="address-city">
             City
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="address-city" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="address-state">
             State / Province
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="address-state" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="address-zip">
             ZIP / Postal Code
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="address-zip" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="address-country">
             Country
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="address-country" type="text"/>
           </div>
          </div>
         </div>
         <div class="mt-8 text-right">
          <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="save-profile-btn" type="submit">
           Save Profile &amp; Address
          </button>
         </div>
        </form>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-privacy">
        <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
         Privacy Settings
        </h2>
        <div class="space-y-6">
         <div class="flex items-center justify-between">
          <div>
           <h3 class="font-medium text-gray-900 dark:text-white">
            Profile Visibility
           </h3>
           <p class="text-sm text-gray-500 dark:text-gray-400">
            Control who can see your profile page.
           </p>
          </div>
          <select class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white" id="profile-visibility-select">
           <option>
            Public
           </option>
           <option>
            Friends Only
           </option>
           <option>
            Private
           </option>
          </select>
         </div>
         <div class="flex items-center justify-between">
          <div>
           <h3 class="font-medium text-gray-900 dark:text-white">
            Collection Visibility
           </h3>
           <p class="text-sm text-gray-500 dark:text-gray-400">
            Control who can see your card collection.
           </p>
          </div>
          <select class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white" id="collection-visibility-select">
           <option>
            Public
           </option>
           <option>
            Friends Only
           </option>
           <option>
            Private
           </option>
          </select>
         </div>
        </div>
        <div class="mt-8 text-right">
         <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="save-privacy-btn">
          Save Privacy Settings
         </button>
        </div>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-notifications">
        <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
         Notification Settings
        </h2>
        <div class="space-y-6">
         <div class="flex items-center justify-between">
          <div>
           <h3 class="font-medium text-gray-900 dark:text-white">
            Email Notifications
           </h3>
           <p class="text-sm text-gray-500 dark:text-gray-400">
            Receive notifications for messages, trades, etc. via email.
           </p>
          </div>
          <label class="relative inline-flex items-center cursor-pointer">
           <input class="sr-only peer" id="email-notifications-toggle" type="checkbox"/>
           <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
           </div>
          </label>
         </div>
         <div class="flex items-center justify-between">
          <div>
           <h3 class="font-medium text-gray-900 dark:text-white">
            Push Notifications
           </h3>
           <p class="text-sm text-gray-500 dark:text-gray-400">
            Receive push notifications on your installed app or device.
           </p>
          </div>
          <label class="relative inline-flex items-center cursor-pointer">
           <input class="sr-only peer" id="push-notifications-toggle" type="checkbox"/>
           <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
           </div>
          </label>
         </div>
        </div>
        <div class="mt-8 text-right">
         <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="save-notifications-btn">
          Save Notification Settings
         </button>
        </div>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-account">
        <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
         Account
        </h2>
        <div>
         <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Email Address
         </label>
         <p class="mt-1 text-gray-500 dark:text-gray-400" id="account-email">
         </p>
        </div>
      <div class="setting-item">
    <label for="primary-currency" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Preferred Currency</label>
    <select id="primary-currency" class="mt-1 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600">
        <option value="USD">United States Dollar (USD)</option>
        <option value="SEK">Swedish Krona (SEK)</option>
        <option value="EUR">Euro (EUR)</option>
        <option value="GBP">British Pound (GBP)</option>
    </select>
    <p class="mt-2 text-xs text-gray-500">This will be the default currency for all prices across the site.</p>
</div>
        <div class="mt-6">
         <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="price-source-select">
          Default Pricing Source
         </label>
         <select class="mt-1 block w-full md:w-1/2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="price-source-select">
          <option value="eur">
           Cardmarket (EUR)
          </option>
          <option value="usd">
           TCGplayer (USD)
          </option>
         </select>
         <p class="mt-2 text-xs text-gray-500 dark:text-gray-400">
          Choose your preferred price source when using percentage-based pricing for your listings.
         </p>
        </div>
        <div class="mt-8 pt-6 border-t border-red-200 dark:border-red-900/50">
         <h3 class="text-lg font-semibold text-red-700 dark:text-red-400">
          Danger Zone
         </h3>
         <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
          Deleting your account is a permanent action and cannot be undone.
         </p>
         <button class="mt-4 px-4 py-2 bg-red-600 text-white font-semibold rounded-full hover:bg-red-700" id="delete-account-btn">
          Delete Account
         </button>
        </div>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-security">
        <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
         Security
        </h2>
        <div>
         <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Password
         </label>
         <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
          To change your password, we will send a secure reset link to your email address.
         </p>
         <button class="mt-4 px-4 py-2 bg-gray-600 dark:bg-gray-700 text-white font-semibold rounded-full hover:bg-gray-700 dark:hover:bg-gray-600" id="reset-password-btn">
          Send Password Reset Email
         </button>
        </div>
        <div class="mt-8 pt-6 border-t dark:border-gray-700">
         <h3 class="text-lg font-semibold text-gray-800 dark:text-white">
          Multi-Factor Authentication (MFA)
         </h3>
         <div id="mfa-section">
         </div>
        </div>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-display">
        <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
         Display Settings
        </h2>
        <div class="space-y-6">
         <div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">
           Date Format
          </h3>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
           Choose how dates are displayed across the site.
          </p>
          <select class="mt-2 block w-full md:w-1/2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="date-format-select">
           <option value="dmy">
            DD/MM/YYYY (European)
           </option>
           <option value="mdy">
            MM/DD/YYYY (American)
           </option>
          </select>
         </div>
         <div class="pt-6 border-t dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">
           Messenger Widget
          </h3>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
           Control the visibility of the floating messenger widget.
          </p>
          <div class="mt-2 flex items-center">
           <input class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" id="messenger-widget-toggle" type="checkbox"/>
           <label class="ml-2 block text-sm text-gray-900 dark:text-gray-300" for="messenger-widget-toggle">
            Show floating messenger widget on all pages.
           </label>
          </div>
         </div>
        </div>
        <div class="mt-8 text-right">
         <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="save-display-settings-btn">
          Save Display Settings
         </button>
        </div>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-payouts">
        <form id="payout-settings-form">
         <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
          Sales &amp; Payout Settings
         </h2>
         <div class="space-y-4">
          <div>
           <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="iban">
            IBAN
           </label>
           <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="iban" placeholder="SE00 0000 0000 0000 0000 0000" type="text"/>
          </div>
          <div>
           <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="swift">
            SWIFT / BIC
           </label>
           <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="swift" placeholder="HANDSESS" type="text"/>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="clearing-number">
             Clearing Number
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="clearing-number" placeholder="e.g., 9960" type="text"/>
           </div>
           <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="bank-account">
             Bank Account Number
            </label>
            <input class="mt-1 block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="bank-account" placeholder="e.g., 123456789" type="text"/>
           </div>
          </div>
         </div>
         <div class="mt-8 text-right">
          <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="save-payout-btn" type="submit">
           Save Payout Settings
          </button>
         </div>
        </form>
       </section>
       <section class="settings-section hidden bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md" id="settings-shipping">
        <h2 class="text-2xl font-bold mb-6 border-b pb-4 dark:border-gray-700 dark:text-white">
         Shipping Profiles
        </h2>
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-6">
         Set your default shipping costs. These will be used when you list items for sale. All prices should be in your primary currency (
         <span class="font-bold" id="shipping-currency-display">
          SEK
         </span>
         ).
        </p>
        <div class="space-y-4">
         <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="shippingDomestic">
           Domestic (Your Country)
          </label>
          <input class="mt-1 block w-full md:w-1/2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="shippingDomestic" placeholder="e.g., 50.00" type="number"/>
         </div>
         <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="shippingEurope">
           Europe
          </label>
          <input class="mt-1 block w-full md:w-1/2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="shippingEurope" placeholder="e.g., 150.00" type="number"/>
         </div>
         <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="shippingNorthAmerica">
           North America
          </label>
          <input class="mt-1 block w-full md:w-1/2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="shippingNorthAmerica" placeholder="e.g., 250.00" type="number"/>
         </div>
         <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="shippingRestOfWorld">
           Rest of World
          </label>
          <input class="mt-1 block w-full md:w-1/2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" id="shippingRestOfWorld" placeholder="e.g., 350.00" type="number"/>
         </div>
         <div class="mt-8 text-right">
          <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700" id="save-shipping-btn" type="button">
           Save Shipping Profile
          </button>
         </div>
        </div>
       </section>
       <section class="settings-section hidden" id="settings-app">
        <div class="space-y-6">
         <div class="install-card">
          <div class="flex items-center justify-between">
           <div class="flex-1">
            <header class="h-28 flex items-center justify-between px-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
             <div class="flex items-center">
              <button class="lg:hidden mr-4 text-gray-600 dark:text-gray-300" id="sidebar-toggle">
               <i class="fas fa-bars text-xl">
               </i>
              </button>
              <div class="relative">
               <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
               </i>
               <input class="w-full md:w-96 pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-gray-50 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" id="main-search-bar" placeholder="Search for cards, users, or articles..." type="text"/>
              </div>
             </div>
             <div class="flex items-center space-x-5" id="user-actions">
              <!-- This container is dynamically filled by auth.js -->
             </div>
            </header>
            <h2 class="text-2xl font-bold mb-2">
             <i class="fas fa-mobile-alt mr-3">
             </i>
             Install HatakeSocial App
            </h2>
            <p class="text-blue-100 mb-4">
             Get the full app experience with offline access, push notifications, and faster loading times.
            </p>
            <div class="flex space-x-4">
             <button class="install-btn" id="install-app-btn">
              <i class="fas fa-download mr-2">
              </i>
              Install App
             </button>
             <button class="share-btn" id="share-app-btn">
              <i class="fas fa-share mr-2">
              </i>
              Share App
             </button>
            </div>
           </div>
           <div class="hidden md:block">
            <i class="fas fa-mobile-alt text-6xl text-blue-200">
            </i>
           </div>
          </div>
         </div>
         <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
           App Features
          </h3>
          <div class="feature-grid">
           <div class="feature-card">
            <i class="fas fa-wifi-slash text-2xl text-blue-600 mb-3">
            </i>
            <h4 class="font-semibold text-gray-900 dark:text-white mb-2">
             Offline Access
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
             Browse your collection and decks even without internet
            </p>
           </div>
           <div class="feature-card">
            <i class="fas fa-bell text-2xl text-green-600 mb-3">
            </i>
            <h4 class="font-semibold text-gray-900 dark:text-white mb-2">
             Push Notifications
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
             Get notified about trades, messages, and events
            </p>
           </div>
           <div class="feature-card">
            <i class="fas fa-rocket text-2xl text-purple-600 mb-3">
            </i>
            <h4 class="font-semibold text-gray-900 dark:text-white mb-2">
             Faster Loading
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
             Optimized performance for mobile devices
            </p>
           </div>
           <div class="feature-card">
            <i class="fas fa-home text-2xl text-orange-600 mb-3">
            </i>
            <h4 class="font-semibold text-gray-900 dark:text-white mb-2">
             Home Screen Access
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
             Quick access from your device's home screen
            </p>
           </div>
           <div class="feature-card">
            <i class="fas fa-sync text-2xl text-red-600 mb-3">
            </i>
            <h4 class="font-semibold text-gray-900 dark:text-white mb-2">
             Background Sync
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
             Stay updated with automatic background synchronization
            </p>
           </div>
           <div class="feature-card">
            <i class="fas fa-shield-alt text-2xl text-indigo-600 mb-3">
            </i>
            <h4 class="font-semibold text-gray-900 dark:text-white mb-2">
             Enhanced Security
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400">
             Secure app environment with biometric authentication
            </p>
           </div>
          </div>
         </div>
         <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
           Installation Instructions
          </h3>
          <div class="platform-grid">
           <div class="platform-card">
            <div class="flex items-center mb-4">
             <i class="fab fa-android text-3xl text-green-600 mr-3">
             </i>
             <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
              Android
             </h4>
            </div>
            <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600 dark:text-gray-400">
             <li>
              Tap the menu button (⋮) in your browser
             </li>
             <li>
              Select "Add to Home Screen" or "Install App"
             </li>
             <li>
              Confirm the installation
             </li>
             <li>
              Find the app on your home screen
             </li>
            </ol>
           </div>
           <div class="platform-card">
            <div class="flex items-center mb-4">
             <i class="fab fa-apple text-3xl text-gray-800 dark:text-gray-200 mr-3">
             </i>
             <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
              iOS (iPhone/iPad)
             </h4>
            </div>
            <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600 dark:text-gray-400">
             <li>
              Tap the Share button (□↗) in Safari
             </li>
             <li>
              Scroll down and tap "Add to Home Screen"
             </li>
             <li>
              Customize the name if desired
             </li>
             <li>
              Tap "Add" to confirm
             </li>
            </ol>
           </div>
           <div class="platform-card">
            <div class="flex items-center mb-4">
             <i class="fab fa-windows text-3xl text-blue-600 mr-3">
             </i>
             <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
              Windows
             </h4>
            </div>
            <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600 dark:text-gray-400">
             <li>
              Look for the install icon (⊕) in the address bar
             </li>
             <li>
              Click the install icon or use Ctrl+Shift+A
             </li>
             <li>
              Click "Install" in the popup
             </li>
             <li>
              Access from Start Menu or Desktop
             </li>
            </ol>
           </div>
           <div class="platform-card">
            <div class="flex items-center mb-4">
             <i class="fab fa-apple text-3xl text-gray-800 dark:text-gray-200 mr-3">
             </i>
             <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
              macOS
             </h4>
            </div>
            <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600 dark:text-gray-400">
             <li>
              Look for the install icon in the address bar
             </li>
             <li>
              Click the install icon
             </li>
             <li>
              Click "Install" to confirm
             </li>
             <li>
              Find the app in Applications or Dock
             </li>
            </ol>
           </div>
          </div>
         </div>
         <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
           App Status
          </h3>
          <div class="space-y-3">
           <div class="flex items-center justify-between">
            <span class="text-gray-700 dark:text-gray-300">
             Installation Status
            </span>
            <span class="px-3 py-1 rounded-full text-sm bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200" id="install-status">
             Not Installed
            </span>
           </div>
           <div class="flex items-center justify-between">
            <span class="text-gray-700 dark:text-gray-300">
             Service Worker
            </span>
            <span class="px-3 py-1 rounded-full text-sm bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200" id="sw-status">
             Checking...
            </span>
           </div>
           <div class="flex items-center justify-between">
            <span class="text-gray-700 dark:text-gray-300">
             Offline Support
            </span>
            <span class="px-3 py-1 rounded-full text-sm bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200" id="offline-status">
             Checking...
            </span>
           </div>
          </div>
         </div>
        </div>
       </section>
      </div>
     </div>
    </main>
   </main>
  </div>
  <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js">
  </script>
  <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js">
  </script>
  <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-firestore-compat.js">
  </script>
  <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-storage-compat.js">
  </script>
  <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-functions-compat.js">
  </script>
  <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-analytics-compat.js">
  </script>
  <script src="js/auth.js">
  </script>
  <script src="js/settings.js">
  </script>
  <script src="js/messenger.js">
  </script>
  <script src="js/darkmode.js">
  </script>
  <script src="js/cart.js">
  </script>
  <script>
   // Sidebar toggle for mobile
    document.getElementById('sidebar-toggle')?.addEventListener('click', function() {
        const sidebar = document.querySelector('aside.w-64');
        sidebar.classList.toggle('hidden');
    });

    // Service Worker Registration
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', function() {
            navigator.serviceWorker.register('/sw.js')
                .then(function(registration) {
                    console.log('ServiceWorker registration successful with scope: ', registration.scope);
                })
                .catch(function(err) {
                    console.log('ServiceWorker registration failed: ', err);
                });
        });
    }
  </script>
  <div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="loginModal">
   <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
    <div class="flex justify-between items-center">
     <h2 class="text-xl font-bold">
      Login
     </h2>
     <button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeLoginModal">
      ×
     </button>
    </div>
    <form class="mt-4 space-y-4" id="loginForm">
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginEmail" placeholder="Email" required="" type="email"/>
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="loginPassword" placeholder="Password" required="" type="password"/>
     <p class="text-red-500 text-sm hidden" id="login-error-message">
     </p>
     <button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
      Login
     </button>
     <button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleLoginButton" type="button">
      <img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
      Sign in with Google
     </button>
    </form>
   </div>
  </div>
  <div class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" id="registerModal">
   <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
    <div class="flex justify-between items-center">
     <h2 class="text-xl font-bold">
      Register
     </h2>
     <button class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold" id="closeRegisterModal">
      ×
     </button>
    </div>
    <form class="mt-4 space-y-4" id="registerForm">
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerEmail" placeholder="Email" required="" type="email"/>
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerPassword" placeholder="Password" required="" type="password"/>
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCity" placeholder="City" type="text"/>
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerCountry" placeholder="Country" type="text"/>
     <input class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600" id="registerFavoriteTcg" placeholder="Favorite TCG" type="text"/>
     <p class="text-red-500 text-sm hidden" id="register-error-message">
     </p>
     <button class="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700" type="submit">
      Register
     </button>
     <button class="w-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 font-semibold py-2 rounded-md border dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 flex items-center justify-center" id="googleRegisterButton" type="button">
      <img alt="Google icon" class="w-5 h-5 mr-2" src="https://www.svgrepo.com/show/475656/google-color.svg"/>
      Register with Google
     </button>
    </form>
   </div>
  </div>
 </body>
</html>

This is functions/index.js
/**
* HatakeSocial - Firebase Cloud Functions
*
* This file contains the backend logic for the application.
* - ADMIN FUNCTIONS for user management and platform control.
* - MESSAGING FUNCTIONS for real-time user-to-user chat.
* - CARD & MARKETPLACE FUNCTIONS for collection syncing and secure API searches.
* - Handles user registration with a referral code.
* - Creates Stripe checkout sessions for the shop with coupon/referral support.
* - Validates Stripe promotion codes.
* - Automatically counts user posts.
* - Handles following users and creating notifications.
* - Automatically deletes product images from Storage when a product is deleted.
* - Securely sets admin and content creator custom claims for user roles.
* - Manages a secure escrow trading system with Escrow.com.
* - Wishlist and Trade Matching functionality.
* - Marketplace syncing function.
* - SECURE POKEMON API SEARCH PROXY to protect the API key.
*/

const functions = require("firebase-functions");
const admin = require("firebase-admin");
const stripe = require("stripe")(functions.config().stripe.secret);
const axios = require("axios");
const fetch = require("node-fetch");

// --- CORS CONFIGURATION ---
const allowedOrigins = [
    'https://hatake.eu',
    'https://hatakesocial-88b5e.web.app',
    'http://localhost:5000'
];

const cors = require('cors')({
  origin: (origin, callback) => {
    if (allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
});

admin.initializeApp();
const db = admin.firestore();
const storage = admin.storage();

// --- Escrow.com API Configuration ---
const ESCROW_API_KEY = functions.config().escrow.key;
const ESCROW_API_USER = functions.config().escrow.user;
const ESCROW_API_URL = "https://api.escrow.com/2017-09-01/"; // Use the production URL

const escrowApi = axios.create({
    baseURL: ESCROW_API_URL,
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Basic ${Buffer.from(`${ESCROW_API_USER}:${ESCROW_API_KEY}`).toString('base64')}`
    }
});

// =================================================================================================
// SECURE CARD SEARCH FUNCTIONS
// =================================================================================================

// Create a simple in-memory cache for Pokémon searches
const pokemonCache = new Map();
const CACHE_DURATION_MS = 1000 * 60 * 60; // Cache results for 1 hour

/**
 * A callable function that acts as a secure proxy to the Pokémon TCG API.
 * This prevents the API key from being exposed on the client-side.
 * It's configured to have a minimum of 1 instance running to prevent "cold starts".
 */
exports.searchPokemon = functions.runWith({ minInstances: 1 }).https.onCall(async (data, context) => {
    const cardName = data.cardName;
    if (!cardName) {
        throw new functions.https.HttpsError(
            "invalid-argument",
            "The function must be called with a 'cardName' argument."
        );
    }

    // Check cache first
    if (pokemonCache.has(cardName)) {
        const cachedItem = pokemonCache.get(cardName);
        if (Date.now() - cachedItem.timestamp < CACHE_DURATION_MS) {
            console.log(`Serving '${cardName}' from cache.`);
            return cachedItem.data;
        }
    }

    // Securely get the API key from Firebase environment configuration
    const POKEMON_API_KEY = functions.config().pokemon.apikey;
    if (!POKEMON_API_KEY) {
        throw new functions.https.HttpsError('internal', 'Pokémon API key is not configured.');
    }

    const searchUrl = `https://api.pokemontcg.io/v2/cards?q=name:"${encodeURIComponent(cardName)}*"&pageSize=40&orderBy=-set.releaseDate`;

    try {
        console.log(`Searching for '${cardName}' via API.`);
        const response = await fetch(searchUrl, {
            headers: { "X-Api-Key": POKEMON_API_KEY },
        });

        if (!response.ok) {
            const errorBody = await response.text();
            console.error("Pokemon API Error:", response.status, errorBody);
            throw new functions.https.HttpsError("internal", `Failed to fetch from Pokémon TCG API. Status: ${response.status}`);
        }

        const result = await response.json();
        const responseData = result.data;

        // Store successful result in cache
        pokemonCache.set(cardName, {
            timestamp: Date.now(),
            data: responseData,
        });

        return responseData; // Return the array of cards
    } catch (error) {
        console.error("Error fetching Pokémon cards in cloud function:", error);
        throw new functions.https.HttpsError("internal", "An unexpected error occurred while fetching Pokémon cards.");
    }
});


// =================================================================================================
// ADMIN USER & PLATFORM MANAGEMENT FUNCTIONS
// =================================================================================================

/**
 * Helper function to verify that the caller is an administrator.
 * @param {object} context - The context object from the callable function.
 */
const ensureIsAdmin = (context) => {
    if (!context.auth || context.auth.token.admin !== true) {
        throw new functions.https.HttpsError('permission-denied', 'You must be an admin to perform this action.');
    }
};

/**
 * Bans a user. Disables them in Firebase Auth and sets a flag in Firestore.
 */
exports.banUser = functions.https.onCall(async (data, context) => {
    ensureIsAdmin(context);
    const { uid } = data;
    if (!uid) {
        throw new functions.https.HttpsError('invalid-argument', 'UID is required.');
    }
    try {
        await admin.auth().updateUser(uid, { disabled: true });
        await db.collection('users').doc(uid).update({ isBanned: true, suspendedUntil: null });
        return { success: true, message: `User ${uid} has been banned.` };
    } catch (error) {
        console.error(`Failed to ban user ${uid}`, error);
        throw new functions.https.HttpsError('internal', 'An error occurred while banning the user.');
    }
});

/**
 * Un-bans a user. Enables them in Firebase Auth and removes the flag in Firestore.
 */
exports.unBanUser = functions.https.onCall(async (data, context) => {
    ensureIsAdmin(context);
    const { uid } = data;
    if (!uid) {
        throw new functions.https.HttpsError('invalid-argument', 'UID is required.');
    }
    try {
        await admin.auth().updateUser(uid, { disabled: false });
        await db.collection('users').doc(uid).update({ isBanned: false });
        return { success: true, message: `User ${uid} has been unbanned.` };
    } catch (error) {
        console.error(`Failed to unban user ${uid}`, error);
        throw new functions.https.HttpsError('internal', 'An error occurred while unbanning the user.');
    }
});

/**
 * Suspends a user for a specific duration by setting a timestamp in Firestore.
 */
exports.suspendUser = functions.https.onCall(async (data, context) => {
    ensureIsAdmin(context);
    const { uid, suspendedUntil } = data; // suspendedUntil should be an ISO string
    if (!uid || !suspendedUntil) {
        throw new functions.https.HttpsError('invalid-argument', 'UID and suspension date are required.');
    }
    try {
        const suspensionDate = new Date(suspendedUntil);
        await db.collection('users').doc(uid).update({
            suspendedUntil: admin.firestore.Timestamp.fromDate(suspensionDate)
        });
        return { success: true, message: `User ${uid} suspended until ${suspensionDate.toLocaleString()}.` };
    } catch (error) {
        console.error(`Failed to suspend user ${uid}`, error);
        throw new functions.https.HttpsError('internal', 'An error occurred while suspending the user.');
    }
});

/**
 * Sends a notification message to all users on the platform.
 */
exports.broadcastMessage = functions.https.onCall(async (data, context) => {
    ensureIsAdmin(context);
    const { message } = data;
    if (!message) {
        throw new functions.https.HttpsError('invalid-argument', 'A message is required for the broadcast.');
    }

    try {
        const usersSnapshot = await db.collection('users').get();
        if (usersSnapshot.empty) {
            return { success: true, message: "No users to notify." };
        }

        const batch = db.batch();
        usersSnapshot.forEach(userDoc => {
            const notificationRef = userDoc.ref.collection('notifications').doc();
            batch.set(notificationRef, {
                type: 'broadcast',
                fromId: 'system',
                fromName: 'HatakeSocial Admin',
                message: message,
                link: '#',
                isRead: false,
                timestamp: admin.firestore.FieldValue.serverTimestamp()
            });
        });

        await batch.commit();
        return { success: true, message: `Broadcast sent to ${usersSnapshot.size} users.` };

    } catch (error) {
        console.error('Broadcast failed:', error);
        throw new functions.https.HttpsError('internal', 'Failed to send broadcast.');
    }
});

// =================================================================================================
// MESSAGING FUNCTIONS
// =================================================================================================

/**
 * Sends a message from one user to another.
 */
exports.sendMessage = functions.runWith({ minInstances: 1 }).https.onCall(async (data, context) => {
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'You must be logged in to send messages.');
    }
    const { recipientId, messageText } = data;
    const senderId = context.auth.uid;

    if (!recipientId || !messageText) throw new functions.https.HttpsError('invalid-argument', 'Missing recipientId or messageText.');
    if (senderId === recipientId) throw new functions.https.HttpsError('invalid-argument', 'You cannot send a message to yourself.');

    try {
        const conversationId = [senderId, recipientId].sort().join('_');
        const conversationRef = db.collection('conversations').doc(conversationId);
        const message = {
            senderId: senderId,
            text: messageText,
            timestamp: admin.firestore.FieldValue.serverTimestamp()
        };
        const conversationUpdateData = {
            lastMessage: messageText,
            lastUpdated: admin.firestore.FieldValue.serverTimestamp()
        };
        const batch = db.batch();
        const newMessageRef = conversationRef.collection('messages').doc();
        batch.set(newMessageRef, message);
        batch.set(conversationRef, conversationUpdateData, { merge: true });
        await batch.commit();
        return { success: true, conversationId: conversationId };
    } catch (error) {
        console.error("Error sending message:", error);
        throw new functions.https.HttpsError('internal', 'An error occurred while sending the message.');
    }
});

/**
 * Ensures a conversation document exists between two users.
 */
exports.ensureConversationExists = functions.https.onCall(async (data, context) => {
    if (!context.auth) throw new functions.https.HttpsError('unauthenticated', 'You must be logged in.');
    const { otherUserId } = data;
    const currentUserId = context.auth.uid;
    if (!otherUserId) throw new functions.https.HttpsError('invalid-argument', 'Missing the other user\'s ID.');
    if (otherUserId === currentUserId) throw new functions.https.HttpsError('invalid-argument', 'You cannot create a conversation with yourself.');
    const conversationId = [currentUserId, otherUserId].sort().join('_');
    const convoRef = db.collection('conversations').doc(conversationId);
    const doc = await convoRef.get();
    if (doc.exists) {
        return { success: true, conversationId: conversationId };
    }
    try {
        const [currentUserDoc, otherUserDoc] = await Promise.all([
            db.collection('users').doc(currentUserId).get(),
            db.collection('users').doc(otherUserId).get()
        ]);
        if (!currentUserDoc.exists || !otherUserDoc.exists) {
            throw new functions.https.HttpsError('not-found', 'One of the users could not be found.');
        }
        const currentUserData = currentUserDoc.data();
        const otherUserData = otherUserDoc.data();
        const convoData = {
            participants: [currentUserId, otherUserId],
            participantInfo: {
                [currentUserId]: {
                    displayName: currentUserData.displayName || "User",
                    photoURL: currentUserData.photoURL || "",
                    handle: currentUserData.handle || ""
                },
                [otherUserId]: {
                    displayName: otherUserData.displayName || "User",
                    photoURL: otherUserData.photoURL || "",
                    handle: otherUserData.handle || ""
                }
            },
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
            lastMessage: ''
        };
        await convoRef.set(convoData);
        return { success: true, conversationId: conversationId };
    } catch (error) {
        console.error("Error in ensureConversationExists:", error);
        throw new functions.https.HttpsError('internal', 'An unexpected error occurred.');
    }
});

/**
 * Firestore trigger that creates a notification when a new message is created.
 */
exports.onNewMessage = functions.firestore
    .document('conversations/{conversationId}/messages/{messageId}')
    .onCreate(async (snap, context) => {
        const messageData = snap.data();
        const { conversationId } = context.params;
        const { senderId, text } = messageData;
        const conversationDoc = await db.collection('conversations').doc(conversationId).get();
        if (!conversationDoc.exists) return null;
        const conversationData = conversationDoc.data();
        const recipientId = conversationData.participants.find(uid => uid !== senderId);
        if (!recipientId) return null;
        const senderName = conversationData.participantInfo[senderId]?.displayName || 'Someone';
        const notification = {
            type: 'message',
            fromId: senderId,
            fromName: senderName,
            message: `Sent you a message: "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"`,
            link: `messages.html`,
            isRead: false,
            timestamp: admin.firestore.FieldValue.serverTimestamp()
        };
        await db.collection('users').doc(recipientId).collection('notifications').add(notification);
        return null;
    });

// =================================================================================================
// --- MARKETPLACE SYNC FUNCTION (CORRECTED) ---
// =================================================================================================
/**
 * This function triggers whenever a card in a user's collection is created or updated.
 * It keeps a public `marketplaceListings` collection in sync.
 */
exports.syncCardToMarketplace = functions.firestore
    .document('users/{userId}/collection/{cardId}')
    .onWrite(async (change, context) => {
        const { userId, cardId } = context.params;
        const listingRef = db.collection('marketplaceListings').doc(cardId);

        const cardDataAfter = change.after.data();

        // Condition 1: Card was deleted OR is no longer for sale.
        if (!change.after.exists || cardDataAfter.forSale !== true) {
            try {
                // Check if a listing exists before trying to delete
                const listingDoc = await listingRef.get();
                if (listingDoc.exists) {
                    await listingRef.delete();
                    console.log(`Removed listing ${cardId} from the marketplace because it's no longer for sale or was deleted.`);
                }
            } catch (error) {
                console.error(`Failed to remove listing ${cardId} from marketplace:`, error);
            }
            return null;
        }

        // Condition 2: Card is marked for sale.
        try {
            const salePrice = parseFloat(cardDataAfter.salePrice);
            if (isNaN(salePrice) || salePrice <= 0) {
                console.log(`Card ${cardId} is for sale but has invalid salePrice. Skipping sync.`);
                await listingRef.delete().catch(() => {});
                return null;
            }

            const userDoc = await db.collection('users').doc(userId).get();
            if (!userDoc.exists) {
                console.error(`Seller user document ${userId} not found.`);
                return null;
            }
            
            const sellerData = userDoc.data();
            const sellerInfo = {
                uid: userId,
                displayName: sellerData.displayName || "Unknown Seller",
                photoURL: sellerData.photoURL || null,
                city: sellerData.city || null,
                country: sellerData.country || null,
                rating: sellerData.rating || 0,
                ratingCount: sellerData.ratingCount || 0
            };
            
            const listingData = {
                cardData: { 
                    ...cardDataAfter
                },
                price: salePrice,
                condition: cardDataAfter.condition || 'Not Specified',
                isFoil: cardDataAfter.isFoil || false,
                sellerData: sellerInfo,
                sellerId: userId,
                timestamp: admin.firestore.FieldValue.serverTimestamp()
            };

            delete listingData.cardData.forSale;
            delete listingData.cardData.salePrice;
            delete listingData.cardData.purchasePrice;

            await listingRef.set(listingData, { merge: true });
            console.log(`Synced card ${cardId} to marketplace for user ${userId}.`);
            return null;

        } catch (error) {
            console.error(`Error syncing card ${cardId} to marketplace:`, error);
            return null;
        }
    });


// =================================================================================================
// ORIGINAL APPLICATION FUNCTIONS
// =================================================================================================

/**
 * Handles the creation of a new user account.
 */
exports.onUserCreate = functions.auth.user().onCreate(async (user) => {
  const { uid, email, displayName, photoURL } = user;
  
  const defaultDisplayName = displayName || email.split('@')[0];
  const handle = defaultDisplayName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
  const defaultPhotoURL = photoURL || `https://ui-avatars.com/api/?name=${defaultDisplayName.charAt(0)}&background=random&color=fff`;

  const newUser = {
    displayName: defaultDisplayName,
    displayName_lower: defaultDisplayName.toLowerCase(),
    email: email,
    photoURL: defaultPhotoURL,
    handle: handle,
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    bio: "New HatakeSocial user!",
    favoriteTcg: "Not set",
    city: "",
    country: "",
    referrer: "",
    isAdmin: false,
    primaryCurrency: 'SEK'
  };

  try {
    await db.collection('users').doc(uid).set(newUser);
    console.log(`Successfully created profile for user: ${uid}`);
    return null;
  } catch (error) {
    console.error(`Error creating profile for user: ${uid}`, error);
    return null;
  }
});


/**
* A callable Cloud Function to handle new user registration with a referral code.
*/
exports.registerUserWithReferral = functions.https.onCall(async (data, context) => {
    const { email, password, city, country, favoriteTcg, referrerId } = data;

    if (!email || !password || !referrerId) {
        throw new functions.https.HttpsError('invalid-argument', 'Missing required data for registration.');
    }

    const auth = admin.auth();
    let newUserRecord = null;

    try {
        newUserRecord = await auth.createUser({
            email: email,
            password: password,
            displayName: email.split('@')[0],
        });

        const newUserId = newUserRecord.uid;
        const referrerRef = db.collection('users').doc(referrerId);
        const newUserRef = db.collection('users').doc(newUserId);
        const newReferralLogRef = referrerRef.collection('referrals').doc(newUserId);

        await db.runTransaction(async (transaction) => {
            const referrerDoc = await transaction.get(referrerRef);
            if (!referrerDoc.exists) {
                throw new Error("Referrer not found.");
            }

            const newUserDisplayName = email.split('@')[0];
            const newUserHandle = newUserDisplayName.toLowerCase() + Math.floor(Math.random() * 1000);

            transaction.set(newUserRef, {
                email: email,
                displayName: newUserDisplayName,
                handle: newUserHandle,
                city: city || null,
                country: country || null,
                favoriteTcg: favoriteTcg || null,
                createdAt: admin.firestore.FieldValue.serverTimestamp(),
                friends: [],
                followers: [],
                friendRequests: [],
                referredBy: referrerId,
                shopDiscountPercent: 0,
                referralCount: 0,
                postCount: 0,
                isVerified: false,
                dateFormat: 'dmy'
            });

            transaction.update(referrerRef, {
                referralCount: admin.firestore.FieldValue.increment(1),
                shopDiscountPercent: admin.firestore.FieldValue.increment(1)
            });

            transaction.set(newReferralLogRef, {
                userId: newUserId,
                displayName: newUserDisplayName,
                handle: newUserHandle,
                referredAt: admin.firestore.FieldValue.serverTimestamp(),
                status: 'pending_verification'
            });
        });

        console.log(`Successfully registered user ${newUserId} referred by ${referrerId}`);
        return { success: true, uid: newUserId };

    } catch (error) {
        console.error("Referral registration failed:", error);
        if (newUserRecord) {
            await auth.deleteUser(newUserRecord.uid).catch(err => console.error("Cleanup failed: Could not delete auth user.", err));
        }
        throw new functions.https.HttpsError('internal', error.message || 'An unknown error occurred.');
    }
});


/**
* A callable Cloud Function to validate a Stripe promotion code.
*/
exports.validateCoupon = functions.https.onCall(async (data, context) => {
    const { code } = data;
    if (!code) {
        return { success: false, message: 'No coupon code provided.' };
    }

    try {
        const promotionCodes = await stripe.promotionCodes.list({
            code: code.toUpperCase(),
            active: true,
            limit: 1,
        });

        if (promotionCodes.data.length > 0) {
            const promoCode = promotionCodes.data[0];
            const coupon = promoCode.coupon;
            if (coupon.valid) {
                return { success: true, coupon: { id: coupon.id, percent_off: coupon.percent_off } };
            } else {
                return { success: false, message: 'This coupon has expired.' };
            }
        } else {
            return { success: false, message: 'Invalid coupon code.' };
        }
    } catch (error) {
        console.error("Error validating coupon:", error);
        return { success: false, message: 'Could not validate coupon.' };
    }
});


/**
* A callable Cloud Function to create a Stripe Checkout session.
*/
exports.createCheckoutSession = functions.https.onCall(async (data, context) => {
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'You must be logged in to make a purchase.');
    }

    const { cartItems, couponId, referralDiscountPercent } = data;

    if (!cartItems || !Array.isArray(cartItems) || cartItems.length === 0) {
        throw new functions.https.HttpsError('invalid-argument', 'The function must be called with a valid "cartItems" array.');
    }

    const line_items = cartItems.map(item => ({
        price: item.priceId,
        quantity: item.quantity,
    }));

    const sessionData = {
        payment_method_types: ['card'],
        line_items: line_items,
        mode: 'payment',
        success_url: `https://hatakesocial-88b5e.web.app/shop.html?success=true`,
        cancel_url: `https://hatakesocial-88b5e.web.app/shop.html?canceled=true`,
        allow_promotion_codes: true,
        customer_email: context.auth.token.email,
        client_reference_id: context.auth.uid
    };

    if (couponId) {
        sessionData.discounts = [{ coupon: couponId }];
    } else if (referralDiscountPercent > 0) {
        const userRef = db.collection('users').doc(context.auth.uid);
        const userSnap = await userRef.get();
        const userData = userSnap.data();

        if (userData && referralDiscountPercent <= userData.shopDiscountPercent) {
            const coupon = await stripe.coupons.create({
                percent_off: referralDiscountPercent,
                duration: 'once',
                name: `Referral discount for ${context.auth.token.email}`
            });
            sessionData.discounts = [{ coupon: coupon.id }];
        } else {
            console.warn(`User ${context.auth.uid} tried to use referral discount of ${referralDiscountPercent}% but is only allowed ${userData.shopDiscountPercent}%.`);
        }
    }

    try {
        const session = await stripe.checkout.sessions.create(sessionData);
        return { id: session.id };
    } catch (error) {
        console.error("Stripe session creation failed:", error);
        throw new functions.https.HttpsError('internal', 'Unable to create Stripe checkout session.');
    }
});


/**
* A Firestore trigger to update a user's post count when they create a new post.
*/
exports.onPostCreate = functions.firestore
    .document('posts/{postId}')
    .onCreate(async (snap, context) => {
        const postData = snap.data();
        const authorId = postData.authorId;
        if (!authorId) return null;
        const userRef = db.collection('users').doc(authorId);
        try {
            await userRef.update({ postCount: admin.firestore.FieldValue.increment(1) });
        } catch (error) {
            console.error(`Failed to increment post count for user ${authorId}`, error);
        }
        return null;
    });

/**
* A callable function to follow or unfollow a user.
*/
exports.toggleFollowUser = functions.https.onCall(async (data, context) => {
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'You must be logged in to follow users.');
    }
    const { uid: targetUid } = data;
    const { uid: currentUid } = context.auth;
    if (!targetUid || targetUid === currentUid) {
        throw new functions.https.HttpsError('invalid-argument', 'Invalid target user UID.');
    }

    const currentUserRef = db.collection('users').doc(currentUid);
    const targetUserRef = db.collection('users').doc(targetUid);

    try {
        const currentUserDoc = await currentUserRef.get();
        const isFollowing = (currentUserDoc.data().friends || []).includes(targetUid);
        const batch = db.batch();

        if (isFollowing) {
            batch.update(currentUserRef, { friends: admin.firestore.FieldValue.arrayRemove(targetUid) });
            batch.update(targetUserRef, { followers: admin.firestore.FieldValue.arrayRemove(currentUid) });
        } else {
            batch.update(currentUserRef, { friends: admin.firestore.FieldValue.arrayUnion(targetUid) });
            batch.update(targetUserRef, { followers: admin.firestore.FieldValue.arrayUnion(currentUid) });
        }
        await batch.commit();
        return { success: true, nowFollowing: !isFollowing };
    } catch (error) {
        console.error("Error toggling follow:", error);
        throw new functions.https.HttpsError('internal', 'An error occurred while trying to follow the user.');
    }
});

/**
* A Firestore trigger that creates a notification when a user is followed.
*/
exports.onFollow = functions.firestore
    .document('users/{userId}')
    .onUpdate(async (change, context) => {
        const beforeFollowers = change.before.data().followers || [];
        const afterFollowers = change.after.data().followers || [];

        if (afterFollowers.length > beforeFollowers.length) {
            const newFollowerId = afterFollowers.find(uid => !beforeFollowers.includes(uid));
            if (newFollowerId) {
                const followedUserId = context.params.userId;
                const followerDoc = await db.collection('users').doc(newFollowerId).get();
                const followerName = followerDoc.data()?.displayName || 'Someone';

                const notification = {
                    type: 'follow',
                    fromId: newFollowerId,
                    fromName: followerName,
                    fromAvatar: followerDoc.data()?.photoURL || null,
                    message: `${followerName} started following you.`,
                    link: `profile.html?uid=${newFollowerId}`,
                    isRead: false,
                    timestamp: admin.firestore.FieldValue.serverTimestamp()
                };
                await db.collection('users').doc(followedUserId).collection('notifications').add(notification);
            }
        }
        return null;
    });

/**
* A Firestore trigger that cleans up a product's images from Cloud Storage when it's deleted.
*/
exports.onProductDelete = functions.firestore
    .document('products/{productId}')
    .onDelete(async (snap, context) => {
        const { productId } = context.params;
        const bucket = storage.bucket();
        const directory = `products/${productId}/`;
        try {
            await bucket.deleteFiles({ prefix: directory });
            console.log(`Successfully deleted all images for product ${productId}.`);
        } catch (error) {
            console.error(`Failed to delete images for product ${productId}.`, error);
        }
        return null;
    });

/**
* A callable Cloud Function to set the admin custom claim on a user.
*/
exports.setUserAdminClaim = functions.https.onCall(async (data, context) => {
    if (context.auth.token.admin !== true) {
        throw new functions.https.HttpsError('permission-denied', 'Only admins can set user roles.');
    }
    const { targetUid, isAdmin } = data;
    if (typeof targetUid !== 'string' || typeof isAdmin !== 'boolean') {
        throw new functions.https.HttpsError('invalid-argument', 'Invalid arguments provided.');
    }
    try {
        await admin.auth().setCustomUserClaims(targetUid, { admin: isAdmin });
        await db.collection('users').doc(targetUid).update({ isAdmin: isAdmin });
        return { success: true, message: `User role for ${targetUid} updated.` };
    } catch (error) {
        console.error("Error setting custom claim:", error);
        throw new functions.https.HttpsError('internal', 'An internal error occurred.');
    }
});

/**
* A callable Cloud Function to set the content creator custom claim on a user.
*/
exports.setContentCreatorClaim = functions.https.onCall(async (data, context) => {
    if (context.auth.token.admin !== true) {
        throw new functions.https.HttpsError('permission-denied', 'Only admins can set user roles.');
    }
    const { targetUid, isContentCreator } = data;
    if (typeof targetUid !== 'string' || typeof isContentCreator !== 'boolean') {
        throw new functions.https.HttpsError('invalid-argument', 'Invalid arguments provided.');
    }
    try {
        await admin.auth().setCustomUserClaims(targetUid, { contentCreator: isContentCreator });
        await db.collection('users').doc(targetUid).update({ isContentCreator: isContentCreator });
        return { success: true, message: `User role for ${targetUid} updated.` };
    } catch (error) {
        console.error("Error setting custom claim:", error);
        throw new functions.https.HttpsError('internal', 'An internal error occurred.');
    }
});

// =================================================================================================
// ESCROW.COM TRADING SYSTEM FUNCTIONS
// =================================================================================================

exports.createEscrowTransaction = functions.https.onCall(async (data, context) => {
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'You must be logged in to create a trade.');
    }

    const { tradeId, buyerUid, sellerUid, amount, description } = data;
    if (!tradeId || !buyerUid || !sellerUid || !amount || !description) {
        throw new functions.https.HttpsError('invalid-argument', 'Missing required trade data.');
    }

    const buyerDoc = await db.collection('users').doc(buyerUid).get();
    const sellerDoc = await db.collection('users').doc(sellerUid).get();
    if (!buyerDoc.exists || !sellerDoc.exists) {
        throw new functions.https.HttpsError('not-found', 'Buyer or Seller not found.');
    }
    const buyerEmail = buyerDoc.data().email;
    const sellerEmail = sellerDoc.data().email;

    const transactionData = {
        parties: [
            { role: 'buyer', customer: buyerEmail },
            { role: 'seller', customer: sellerEmail }
        ],
        items: [{
            title: 'HatakeSocial Trade',
            description: description,
            quantity: 1,
            price: amount.toFixed(2), // amount should be in SEK
            type: 'general_merchandise'
        }],
        currency: 'sek',
        description: `Trade ID: ${tradeId} on HatakeSocial.`,
        inspection_period: 3,
    };

    try {
        const response = await escrowApi.post('transaction', transactionData);
        const escrowTransactionId = response.data.id;

        await db.collection('trades').doc(tradeId).update({
            escrowTransactionId: escrowTransactionId,
            status: 'awaiting_payment'
        });

        const paymentUrl = `https://www.escrow.com/checkout?transactionId=${escrowTransactionId}`;

        return { success: true, paymentUrl: paymentUrl };

    } catch (error) {
        console.error("Escrow.com transaction creation failed:", error.response ? error.response.data : error.message);
        throw new functions.https.HttpsError('internal', 'Could not create the Escrow.com transaction.');
    }
});


exports.releaseEscrowFunds = functions.https.onCall(async (data, context) => {
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'You must be logged in.');
    }
    const { tradeId } = data;
    if (!tradeId) {
        throw new functions.https.HttpsError('invalid-argument', 'Missing trade ID.');
    }
    const tradeRef = db.collection('trades').doc(tradeId);
    const tradeDoc = await tradeRef.get();
    if (!tradeDoc.exists) {
        throw new functions.https.HttpsError('not-found', 'Trade not found.');
    }

    const tradeData = tradeDoc.data();
    const escrowTransactionId = tradeData.escrowTransactionId;

    if (!escrowTransactionId) {
       throw new functions.https.HttpsError('failed-precondition', 'This trade does not have an active escrow transaction.');
    }
    if (tradeData.buyerUid !== context.auth.uid) {
        throw new functions.https.HttpsError('permission-denied', 'Only the buyer can release the funds.');
    }
    if (tradeData.status !== 'shipped') {
       throw new functions.https.HttpsError('failed-precondition', `Trade must be marked as shipped before funds can be released. Current status: ${tradeData.status}`);
    }

    try {
        await escrowApi.post(`transaction/${escrowTransactionId}/accept`);

        const batch = db.batch();
        tradeData.receiverCards.forEach(card => {
            const newCardRef = db.collection('users').doc(tradeData.proposerId).collection('collection').doc();
            const newCardData = { ...card, forSale: false, addedAt: admin.firestore.FieldValue.serverTimestamp() };
            delete newCardData.id;
            batch.set(newCardRef, newCardData);
        });
        tradeData.proposerCards.forEach(card => {
            const newCardRef = db.collection('users').doc(tradeData.receiverId).collection('collection').doc();
            const newCardData = { ...card, forSale: false, addedAt: admin.firestore.FieldValue.serverTimestamp() };
            delete newCardData.id;
            batch.set(newCardRef, newCardData);
        });

        batch.update(tradeRef, { status: 'completed', completedAt: admin.firestore.FieldValue.serverTimestamp() });
        await batch.commit();

        return { success: true, message: 'Funds have been released to the seller via Escrow.com.' };

    } catch (error) {
        console.error("Failed to release funds via Escrow.com:", error.response ? error.response.data : error.message);
        await tradeRef.update({ status: 'release_failed' });
        throw new functions.https.HttpsError('internal', 'An error occurred while releasing the funds.');
    }
});


// =================================================================================================
// WISHLIST AND TRADE MATCHING FUNCTIONS
// =================================================================================================

/**
 * Manages a user's wishlist. Adds or removes a card.
 */
exports.manageWishlist = functions.https.onCall(async (data, context) => {
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'You must be logged in to manage your wishlist.');
    }

    const { cardId, action } = data; // action can be 'add' or 'remove'
    if (!cardId || !action) {
        throw new functions.https.HttpsError('invalid-argument', 'Missing cardId or action.');
    }

    const wishlistRef = db.collection('users').doc(context.auth.uid).collection('wishlist').doc(cardId);

    if (action === 'add') {
        await wishlistRef.set({
            ...data.cardData,
            addedAt: admin.firestore.FieldValue.serverTimestamp()
        });
        return { success: true, message: 'Card added to wishlist.' };
    } else if (action === 'remove') {
        await wishlistRef.delete();
        return { success: true, message: 'Card removed from wishlist.' };
    } else {
        throw new functions.https.HttpsError('invalid-argument', 'Invalid action specified.');
    }
});

/**
 * Firestore trigger to check for wishlist matches when a new card is added to a user's collection for trade.
 */
exports.onCardForTradeCreate = functions.firestore
    .document('users/{userId}/collection/{cardId}')
    .onCreate(async (snap, context) => {
        const cardData = snap.data();
        const { userId, cardId } = context.params;

        if (!cardData.forSale) {
            return null;
        }

        const querySnapshot = await db.collectionGroup('wishlist').where('name', '==', cardData.name).get();

        if (querySnapshot.empty) {
            return null;
        }

        const sellerDoc = await db.collection('users').doc(userId).get();
        const sellerName = sellerDoc.data()?.displayName || 'A user';

        const notifications = [];
        querySnapshot.forEach(doc => {
            const wishingUser = doc.ref.parent.parent.id;
            if (wishingUser === userId) {
                return;
            }

            const notification = {
                type: 'wishlist_match',
                fromId: userId,
                fromName: sellerName,
                fromAvatar: sellerDoc.data()?.photoURL || null,
                message: `${sellerName} has listed a card from your wishlist: ${cardData.name}.`,
                link: `card-view.html?id=${cardId}`,
                isRead: false,
                timestamp: admin.firestore.FieldValue.serverTimestamp()
            };
            notifications.push(db.collection('users').doc(wishingUser).collection('notifications').add(notification));
        });

        await Promise.all(notifications);
        return null;
    });

// =================================================================================================
// IMPERSONATION FUNCTION
// =================================================================================================

exports.generateImpersonationToken = functions.https.onCall(async (data, context) => {
  if (!context.auth || !context.auth.token.admin) {
    throw new functions.https.HttpsError(
      "permission-denied",
      "You must be an admin to perform this action."
    );
  }

  const { uid } = data;
  if (!uid) {
    throw new functions.https.HttpsError(
      "invalid-argument",
      "The function must be called with a 'uid'."
    );
  }

  try {
    const customToken = await admin.auth().createCustomToken(uid);
    return { token: customToken };
  } catch (error) {
    console.error("Failed to create impersonation token:", error);
    throw new functions.https.HttpsError(
      "internal",
      "Could not create an impersonation token."
    );
  }
});

// ** CURRENCY CONVERTER **

/**
 * A callable function that acts as a secure proxy to a currency conversion API.
 * Includes caching to minimize external API calls.
 */
const exchangeRateCache = new Map();
const EXCHANGE_RATE_CACHE_DURATION_MS = 1000 * 60 * 60 * 6; // Cache for 6 hours

exports.getExchangeRates = functions.https.onCall(async (data, context) => {
    const baseCurrency = data.base || 'USD'; // Default to USD if no base is provided

    // Check cache first
    if (exchangeRateCache.has(baseCurrency)) {
        const cachedItem = exchangeRateCache.get(baseCurrency);
        if (Date.now() - cachedItem.timestamp < EXCHANGE_RATE_CACHE_DURATION_MS) {
            console.log(`Serving exchange rates for '${baseCurrency}' from cache.`);
            return cachedItem.data;
        }
    }

    const API_KEY = functions.config().currencyapi.key;
    if (!API_KEY) {
        throw new functions.https.HttpsError('internal', 'Currency API key is not configured.');
    }

    const apiUrl = `https://api.freecurrencyapi.com/v1/latest?apikey=${API_KEY}&base_currency=${baseCurrency}`;

    try {
        console.log(`Fetching exchange rates for '${baseCurrency}' from external API.`);
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new functions.https.HttpsError('internal', 'Failed to fetch from currency API.');
        }
        const result = await response.json();
        
        // Store in cache
        exchangeRateCache.set(baseCurrency, {
            timestamp: Date.now(),
            data: result.data
        });

        return result.data; // e.g., { "SEK": 10.55, "EUR": 0.92, ... }

    } catch (error) {
        console.error("Error fetching exchange rates:", error);
        throw new functions.https.HttpsError("internal", "An unexpected error occurred while fetching exchange rates.");
    }
});

This is settings.js:
/**
 * HatakeSocial - Merged Settings Page Script (v2 - Complete)
 *
 * This is the complete and corrected script for settings.html.
 * It preserves all original functionality and ensures all forms and toggles work as intended.
 * - Manages Profile, Payouts, Account, Shipping, Security, Display, Privacy, Notifications, and App sections.
 * - Correctly handles image uploads, form submissions, and preference updates.
 */
document.addEventListener('authReady', (e) => {
    const user = e.detail.user;
    const settingsContainer = document.getElementById('settings-page-container');
    if (!settingsContainer) return;

    if (!user) {
        // Use showToast if available, otherwise alert.
        const toast = window.showToast || alert;
        toast("You must be logged in to view settings.");
        window.location.href = 'index.html';
        return;
    }

    const db = firebase.firestore();
    const storage = firebase.storage();
    const auth = firebase.auth();

    // --- Get All DOM Elements ---
    const navButtons = document.querySelectorAll('.settings-nav-btn');
    const sections = document.querySelectorAll('.settings-section');

    // Profile Section
    const profileForm = document.getElementById('profile-settings-form');
    const profilePicPreview = document.getElementById('profile-pic-preview');
    const profilePicUpload = document.getElementById('profile-pic-upload');
    const bannerPicPreview = document.getElementById('banner-pic-preview');
    const bannerPicUpload = document.getElementById('banner-pic-upload');
    let newProfilePicFile = null;
    let newBannerPicFile = null;
    const displayNameInput = document.getElementById('displayName');
    const handleInput = document.getElementById('handle');
    const bioInput = document.getElementById('bio');
    const favoriteTcgInput = document.getElementById('favoriteTcg');
    const playstyleInput = document.getElementById('playstyle');
    const favoriteFormatInput = document.getElementById('favoriteFormat');
    const petCardInput = document.getElementById('petCard');
    const nemesisCardInput = document.getElementById('nemesisCard');
    const streetInput = document.getElementById('address-street');
    const cityInput = document.getElementById('address-city');
    const stateInput = document.getElementById('address-state');
    const zipInput = document.getElementById('address-zip');
    const countryInput = document.getElementById('address-country');

    // Privacy Section
    const profileVisibilitySelect = document.getElementById('profile-visibility-select');
    const collectionVisibilitySelect = document.getElementById('collection-visibility-select');
    const savePrivacyBtn = document.getElementById('save-privacy-btn');

    // Notifications Section
    const emailNotificationsToggle = document.getElementById('email-notifications-toggle');
    const pushNotificationsToggle = document.getElementById('push-notifications-toggle');
    const saveNotificationsBtn = document.getElementById('save-notifications-btn');

    // Payout Section
    const payoutForm = document.getElementById('payout-settings-form');
    const ibanInput = document.getElementById('iban');
    const swiftInput = document.getElementById('swift');
    const clearingInput = document.getElementById('clearing-number');
    const bankAccountInput = document.getElementById('bank-account');

    // Account Section
    const accountEmailEl = document.getElementById('account-email');
    const primaryCurrencySelect = document.getElementById('primaryCurrency');
    const priceSourceSelect = document.getElementById('price-source-select');
    const deleteAccountBtn = document.getElementById('delete-account-btn');

    // Shipping Section
    const shippingCurrencyDisplay = document.getElementById('shipping-currency-display');
    const shippingDomesticInput = document.getElementById('shippingDomestic');
    const shippingEuropeInput = document.getElementById('shippingEurope');
    const shippingNorthAmericaInput = document.getElementById('shippingNorthAmerica');
    const shippingRestOfWorldInput = document.getElementById('shippingRestOfWorld');
    const saveShippingBtn = document.getElementById('save-shipping-btn'); // Added this button

    // Security Section
    const resetPasswordBtn = document.getElementById('reset-password-btn');
    const mfaSection = document.getElementById('mfa-section');
    let confirmationResult = null;

    // Display Section
    const dateFormatSelect = document.getElementById('date-format-select');
    const messengerWidgetToggle = document.getElementById('messenger-widget-toggle');

    // App/PWA Section
    const installAppBtn = document.getElementById('install-app-btn');
    const shareAppBtn = document.getElementById('share-app-btn');
    const installStatus = document.getElementById('install-status');
    const swStatus = document.getElementById('sw-status');
    const offlineStatus = document.getElementById('offline-status');


    // --- Section Switching Logic ---
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            const sectionId = `settings-${button.dataset.section}`;

            navButtons.forEach(btn => {
                btn.classList.remove('bg-blue-100', 'dark:bg-blue-800', 'text-blue-700', 'dark:text-blue-200');
                btn.classList.add('text-gray-600', 'dark:text-gray-300', 'hover:bg-gray-200', 'dark:hover:bg-gray-700');
            });
            button.classList.add('bg-blue-100', 'dark:bg-blue-800', 'text-blue-700', 'dark:text-blue-200');
            button.classList.remove('text-gray-600', 'dark:text-gray-300', 'hover:bg-gray-200', 'dark:hover:bg-gray-700');

            sections.forEach(section => {
                section.id === sectionId ? section.classList.remove('hidden') : section.classList.add('hidden');
            });
        });
    });

    // --- Load Initial Data ---
    const loadUserData = async () => {
        try {
            const userDoc = await db.collection('users').doc(user.uid).get();
            if (!userDoc.exists) {
                console.error("User document not found!");
                return;
            }
            const data = userDoc.data();

            // Profile & Address
            displayNameInput.value = data.displayName || '';
            handleInput.value = data.handle || '';
            bioInput.value = data.bio || '';
            favoriteTcgInput.value = data.favoriteTcg || '';
            profilePicPreview.src = data.photoURL || 'https://placehold.co/96x96';
            bannerPicPreview.src = data.bannerURL || 'https://placehold.co/600x200';
            playstyleInput.value = data.playstyle || '';
            favoriteFormatInput.value = data.favoriteFormat || '';
            petCardInput.value = data.petCard || '';
            nemesisCardInput.value = data.nemesisCard || '';
            if (data.address) {
                streetInput.value = data.address.street || '';
                cityInput.value = data.address.city || '';
                stateInput.value = data.address.state || '';
                zipInput.value = data.address.zip || '';
                countryInput.value = data.address.country || '';
            }

            // Privacy
            if (data.privacy) {
                profileVisibilitySelect.value = data.privacy.profileVisibility || 'Public';
                collectionVisibilitySelect.value = data.privacy.collectionVisibility || 'Public';
            }

            // Notifications
            if (data.notifications) {
                emailNotificationsToggle.checked = data.notifications.email === true;
                pushNotificationsToggle.checked = data.notifications.push === true;
            }

            // Payouts
            if (data.payoutDetails) {
                ibanInput.value = data.payoutDetails.iban || '';
                swiftInput.value = data.payoutDetails.swift || '';
                clearingInput.value = data.payoutDetails.clearing || '';
                bankAccountInput.value = data.payoutDetails.bankAccount || '';
            }

            // Account & Display
            accountEmailEl.textContent = user.email;
            primaryCurrencySelect.value = data.primaryCurrency || 'SEK';
            priceSourceSelect.value = data.priceSource || 'eur';
            dateFormatSelect.value = data.dateFormat || 'dmy';
            if (messengerWidgetToggle) {
                messengerWidgetToggle.checked = data.messengerWidgetVisible !== false; // Default to true
            }

            // Shipping
            if (data.shippingProfile) {
                shippingDomesticInput.value = data.shippingProfile.domestic || '';
                shippingEuropeInput.value = data.shippingProfile.europe || '';
                shippingNorthAmericaInput.value = data.shippingProfile.northAmerica || '';
                shippingRestOfWorldInput.value = data.shippingProfile.restOfWorld || '';
            }
            shippingCurrencyDisplay.textContent = primaryCurrencySelect.value;
            
            loadMfaStatus();

        } catch (error) {
            console.error("Error loading user data:", error);
            (window.showToast || alert)("Failed to load user settings.", "error");
        }
    };

    // --- Helper for File Uploads ---
    const handleFileUpload = (file, path) => {
        const filePath = `${path}/${user.uid}/${Date.now()}_${file.name}`;
        const fileRef = storage.ref(filePath);
        return fileRef.put(file).then(snapshot => snapshot.ref.getDownloadURL());
    };
    
    // --- Save Logic & Event Listeners ---

    profilePicUpload.addEventListener('change', (e) => {
        newProfilePicFile = e.target.files[0];
        if (newProfilePicFile) {
            const reader = new FileReader();
            reader.onload = (event) => { profilePicPreview.src = event.target.result; };
            reader.readAsDataURL(newProfilePicFile);
        }
    });
    bannerPicUpload.addEventListener('change', (e) => {
        newBannerPicFile = e.target.files[0];
        if (newBannerPicFile) {
            const reader = new FileReader();
            reader.onload = (event) => { bannerPicPreview.src = event.target.result; };
            reader.readAsDataURL(newBannerPicFile);
        }
    });

    profileForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const saveBtn = document.getElementById('save-profile-btn');
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';
        try {
            const updatedData = {
                displayName: displayNameInput.value.trim(),
                handle: handleInput.value.toLowerCase().trim(),
                bio: bioInput.value.trim(),
                favoriteTcg: favoriteTcgInput.value.trim(),
                playstyle: playstyleInput.value.trim(),
                favoriteFormat: favoriteFormatInput.value.trim(),
                petCard: petCardInput.value.trim(),
                nemesisCard: nemesisCardInput.value.trim(),
                address: {
                    street: streetInput.value.trim(),
                    city: cityInput.value.trim(),
                    state: stateInput.value.trim(),
                    zip: zipInput.value.trim(),
                    country: countryInput.value.trim()
                },
            };

            if (newProfilePicFile) {
                updatedData.photoURL = await handleFileUpload(newProfilePicFile, 'profile-pictures');
                await user.updateProfile({ photoURL: updatedData.photoURL });
            }
            if (newBannerPicFile) {
                updatedData.bannerURL = await handleFileUpload(newBannerPicFile, 'banner-pictures');
            }
            if (user.displayName !== updatedData.displayName) {
                await user.updateProfile({ displayName: updatedData.displayName });
            }

            await db.collection('users').doc(user.uid).set(updatedData, { merge: true });
            (window.showToast || alert)("Profile settings saved successfully!", "success");
            newProfilePicFile = null;
            newBannerPicFile = null;
        } catch (error) {
            console.error("Error saving profile settings:", error);
            (window.showToast || alert)("Could not save profile settings. " + error.message, "error");
        } finally {
            saveBtn.disabled = false;
            saveBtn.textContent = 'Save Profile & Address';
        }
    });

    savePrivacyBtn?.addEventListener('click', async () => {
        savePrivacyBtn.disabled = true;
        savePrivacyBtn.textContent = 'Saving...';
        try {
            await db.collection('users').doc(user.uid).set({
                privacy: {
                    profileVisibility: profileVisibilitySelect.value,
                    collectionVisibility: collectionVisibilitySelect.value
                }
            }, { merge: true });
            (window.showToast || alert)('Privacy settings saved successfully!', 'success');
        } catch (error) {
            console.error("Error saving privacy settings:", error);
            (window.showToast || alert)("Could not save privacy settings. " + error.message, "error");
        } finally {
            savePrivacyBtn.disabled = false;
            savePrivacyBtn.textContent = 'Save Privacy Settings';
        }
    });

    saveNotificationsBtn?.addEventListener('click', async () => {
        saveNotificationsBtn.disabled = true;
        saveNotificationsBtn.textContent = 'Saving...';
        try {
            await db.collection('users').doc(user.uid).set({
                notifications: {
                    email: emailNotificationsToggle.checked,
                    push: pushNotificationsToggle.checked
                }
            }, { merge: true });
            (window.showToast || alert)('Notification settings saved successfully!', 'success');
        } catch (error) {
            console.error("Error saving notification settings:", error);
            (window.showToast || alert)("Could not save notification settings. " + error.message, "error");
        } finally {
            saveNotificationsBtn.disabled = false;
            saveNotificationsBtn.textContent = 'Save Notification Settings';
        }
    });

    document.getElementById('save-display-settings-btn')?.addEventListener('click', async () => {
        const saveBtn = document.getElementById('save-display-settings-btn');
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';
        try {
            const newDateFormat = dateFormatSelect.value;
            const isMessengerVisible = messengerWidgetToggle ? messengerWidgetToggle.checked : true;
            await db.collection('users').doc(user.uid).update({
                dateFormat: newDateFormat,
                messengerWidgetVisible: isMessengerVisible
            });
            localStorage.setItem('userDateFormat', newDateFormat);
            localStorage.setItem('messengerWidget-visible', isMessengerVisible.toString());
            
            // This allows the messenger widget to react immediately without a page reload
            document.dispatchEvent(new CustomEvent('messengerVisibilityChange', { detail: { visible: isMessengerVisible } }));

            (window.showToast || alert)("Display settings saved successfully!", "success");
        } catch (error) {
            console.error("Error saving display settings:", error);
            (window.showToast || alert)("Could not save display settings. " + error.message, "error");
        } finally {
            saveBtn.disabled = false;
            saveBtn.textContent = 'Save Display Settings';
        }
    });

    payoutForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const saveBtn = document.getElementById('save-payout-btn');
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';
        try {
            await db.collection('users').doc(user.uid).set({
                payoutDetails: {
                    iban: ibanInput.value.trim(),
                    swift: swiftInput.value.trim(),
                    clearing: clearingInput.value.trim(),
                    bankAccount: bankAccountInput.value.trim()
                }
            }, { merge: true });
            (window.showToast || alert)("Payout settings saved successfully!", "success");
        } catch (error) {
            console.error("Error saving payout settings:", error);
            (window.showToast || alert)("Could not save payout settings. " + error.message, "error");
        } finally {
            saveBtn.disabled = false;
            saveBtn.textContent = 'Save Payout Settings';
        }
    });

    saveShippingBtn?.addEventListener('click', async () => {
        saveShippingBtn.disabled = true;
        saveShippingBtn.textContent = 'Saving...';
        try {
            await db.collection('users').doc(user.uid).set({
                shippingProfile: {
                    domestic: shippingDomesticInput.value || 0,
                    europe: shippingEuropeInput.value || 0,
                    northAmerica: shippingNorthAmericaInput.value || 0,
                    restOfWorld: shippingRestOfWorldInput.value || 0
                }
            }, { merge: true });
            (window.showToast || alert)('Shipping profile saved successfully!', 'success');
        } catch (error) {
            console.error("Error saving shipping profile:", error);
            (window.showToast || alert)("Could not save shipping profile. " + error.message, "error");
        } finally {
            saveShippingBtn.disabled = false;
            saveShippingBtn.textContent = 'Save Shipping Profile';
        }
    });

    primaryCurrencySelect.addEventListener('change', () => {
        shippingCurrencyDisplay.textContent = primaryCurrencySelect.value;
    });
    
    resetPasswordBtn.addEventListener('click', () => {
        auth.sendPasswordResetEmail(user.email)
            .then(() => { (window.showToast || alert)("Password reset email sent! Please check your inbox.", "success"); })
            .catch((error) => {
                console.error("Error sending password reset email:", error);
                (window.showToast || alert)("Could not send password reset email. " + error.message, "error");
            });
    });

    deleteAccountBtn.addEventListener('click', () => {
        const confirmation = prompt("This is a permanent action that will delete all your data. To confirm, please type 'DELETE' in all caps.");
        if (confirmation === 'DELETE') {
            user.delete().then(() => {
                alert("Account deleted successfully.");
                window.location.href = 'index.html';
            }).catch((error) => {
                console.error("Error deleting account:", error);
                alert("Could not delete account. You may need to log in again to complete this action. " + error.message);
            });
        } else {
            alert("Deletion cancelled.");
        }
    });

    // --- PWA / App Section Logic ---
    const initializePwaSection = () => {
        let deferredPrompt;

        const setInstallStatus = (installed) => {
            const commonClasses = 'px-3 py-1 rounded-full text-sm';
            if (installed) {
                installStatus.textContent = 'Installed';
                installStatus.className = `${commonClasses} bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200`;
                installAppBtn.textContent = 'App Installed';
                installAppBtn.disabled = true;
            } else {
                installStatus.textContent = 'Not Installed';
                installStatus.className = `${commonClasses} bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200`;
                installAppBtn.disabled = !deferredPrompt;
                installAppBtn.textContent = deferredPrompt ? 'Install App' : 'Cannot Install Now';
            }
        };

        setInstallStatus(window.matchMedia('(display-mode: standalone)').matches);
        
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            setInstallStatus(false);
        });

        installAppBtn.addEventListener('click', async () => {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                const { outcome } = await deferredPrompt.userChoice;
                if (outcome === 'accepted') {
                    setInstallStatus(true);
                }
                deferredPrompt = null;
            }
        });

        shareAppBtn.addEventListener('click', async () => {
            const shareData = {
                title: 'HatakeSocial - Ultimate TCG Social Platform',
                text: 'Join the ultimate TCG social platform for Magic, Pokemon, & Yu-Gi-Oh players!',
                url: window.location.origin
            };
            try {
                await navigator.share(shareData);
            } catch (err) {
                 navigator.clipboard.writeText(shareData.url)
                    .then(() => alert('App URL copied to clipboard!'))
                    .catch(() => prompt('Copy this URL:', shareData.url));
            }
        });

        window.addEventListener('appinstalled', () => setInstallStatus(true));

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.getRegistration().then(reg => {
                const active = reg && reg.active;
                swStatus.textContent = active ? 'Active' : 'Inactive';
                offlineStatus.textContent = active ? 'Available' : 'Unavailable';
                const statusClass = active ? 'green' : 'red';
                 swStatus.className = `px-3 py-1 rounded-full text-sm bg-${statusClass}-100 text-${statusClass}-800 dark:bg-${statusClass}-900 dark:text-${statusClass}-200`;
                offlineStatus.className = swStatus.className;
            });
        }
    };
    
    // --- MFA Functions ---
    // (Your existing MFA functions are complete and well-written, they are included here without changes)
    const loadMfaStatus = () => {
        const mfaEnabled = user.multiFactor.enrolledFactors.length > 0;
        if (mfaEnabled) {
            mfaSection.innerHTML = `
                <p class="text-green-600 dark:text-green-400 font-semibold">Multi-Factor Authentication is enabled.</p>
                <button id="disable-mfa-btn" class="mt-4 px-4 py-2 bg-red-600 text-white font-semibold rounded-full hover:bg-red-700">Disable MFA</button>
            `;
            document.getElementById('disable-mfa-btn').addEventListener('click', disableMfa);
        } else {
            mfaSection.innerHTML = `
                <p class="text-gray-600 dark:text-gray-400">Add an extra layer of security to your account.</p>
                <div class="mt-4 space-y-2">
                    <input type="tel" id="phone-number-input" class="block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" placeholder="Enter phone number (e.g., +16505551234)">
                    <div id="recaptcha-container"></div>
                    <button id="send-verification-btn" class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700">Send Verification Code</button>
                </div>
                <div id="mfa-verification-step" class="hidden mt-4 space-y-2">
                    <input type="text" id="mfa-code-input" class="block w-full border border-gray-300 dark:border-gray-600 rounded-md shadow-sm p-2 dark:bg-gray-700" placeholder="Enter 6-digit code">
                    <button id="verify-mfa-btn" class="px-4 py-2 bg-green-600 text-white font-semibold rounded-full hover:bg-green-700">Verify & Enable</button>
                </div>
            `;
            setupMfaEventListeners();
        }
    };
    const setupMfaEventListeners = () => {
        window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', { 'size': 'invisible' });
        document.getElementById('send-verification-btn').addEventListener('click', async () => {
            const phoneNumber = document.getElementById('phone-number-input').value;
            if (!phoneNumber) { alert("Please enter a phone number."); return; }
            try {
                const phoneProvider = new firebase.auth.PhoneAuthProvider();
                confirmationResult = await phoneProvider.verifyPhoneNumber(phoneNumber, window.recaptchaVerifier);
                alert("Verification code sent!");
                document.getElementById('mfa-verification-step').classList.remove('hidden');
            } catch (error) {
                console.error("Error sending verification code:", error);
                alert("Error sending code: " + error.message);
            }
        });
        document.getElementById('verify-mfa-btn').addEventListener('click', async () => {
            const code = document.getElementById('mfa-code-input').value;
            if (!code) { alert("Please enter the verification code."); return; }
            try {
                const cred = firebase.auth.PhoneAuthProvider.credential(confirmationResult.verificationId, code);
                const multiFactorAssertion = firebase.auth.PhoneMultiFactorGenerator.assertion(cred);
                await user.multiFactor.enroll(multiFactorAssertion, "My Phone");
                alert("MFA enabled successfully!");
                loadMfaStatus();
            } catch (error) {
                console.error("Error verifying MFA code:", error);
                alert("Error verifying code: " + error.message);
            }
        });
    };
    const disableMfa = async () => {
        if (confirm("Are you sure you want to disable Multi-Factor Authentication?")) {
            try {
                // Assuming the first enrolled factor is the one to unenroll
                const phoneFactor = user.multiFactor.enrolledFactors[0];
                await user.multiFactor.unenroll(phoneFactor);
                alert("MFA has been disabled.");
                loadMfaStatus();
            } catch (error) {
                console.error("Error disabling MFA:", error);
                alert("Could not disable MFA. " + error.message);
            }
        }
    };


    // --- Initialize Page ---
    loadUserData();
    initializePwaSection();
});

This is js/modules/ui.js:
/**
 * ui.js
 * Handles all DOM manipulation, rendering, and UI updates for the collection page.
 */
import { getCardImageUrl, formatPrice } from './utils.js';
import * as Collection from './collection.js';

// --- ELEMENT SELECTORS ---
const getElement = (id) => document.getElementById(id);
const display = getElement('collection-display');
const searchModal = getElement('search-modal');
const cardModal = getElement('card-modal');
const csvModal = getElement('csv-import-modal');
const bulkListModal = getElement('bulk-list-sale-modal');
const cardPreviewTooltip = getElement('card-preview-tooltip');

// --- NOTIFICATIONS ---
export const showToast = (message, type = 'info') => {
    const container = getElement('toast-container');
    if (!container) return;
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    let iconClass = 'fa-info-circle';
    if (type === 'success') iconClass = 'fa-check-circle';
    if (type === 'error') iconClass = 'fa-exclamation-circle';
    toast.innerHTML = `<i class="fas ${iconClass} toast-icon"></i> <p>${message}</p>`;
    container.appendChild(toast);
    setTimeout(() => { toast.classList.add('show'); }, 100);
    setTimeout(() => { toast.classList.remove('show'); toast.addEventListener('transitionend', () => toast.remove()); }, 5000);
};

// --- RENDER FUNCTIONS ---

export function renderGridView(cards, activeTab) {
    if (!cards || cards.length === 0) {
        showEmptyState(activeTab === 'collection' ? "No cards match your filters." : "Your wishlist is empty.");
        return;
    }
    const isBulkMode = Collection.getState().bulkEdit.isActive;
    const gridHTML = cards.map(card => {
        const imageUrl = getCardImageUrl(card);
        const price = formatPrice(card?.prices?.usd, 'USD');
        const isSelected = Collection.getState().bulkEdit.selected.has(card.id);
        const salePriceDisplay = (card.forSale && typeof card.salePrice === 'number')
            ? `<div class="absolute top-2 left-2 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full">$${formatPrice(card.salePrice)}</div>`
            : '';

        const bulkCheckbox = isBulkMode
            ? `<div class="absolute top-2 right-2"><input type="checkbox" class="bulk-select-checkbox h-6 w-6" data-id="${card.id}" ${isSelected ? 'checked' : ''}></div>`
            : `<div class="absolute top-2 right-2 flex flex-col space-y-2 opacity-0 group-hover:opacity-100 transition-opacity">
                        <button data-action="edit" class="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 shadow-lg"><i class="fas fa-pencil-alt"></i></button>
                        <button data-action="delete" class="p-2 bg-red-500 text-white rounded-full hover:bg-red-600 shadow-lg"><i class="fas fa-trash"></i></button>
                    </div>`;

        return `
            <div class="card-container relative group ${isSelected ? 'ring-4 ring-blue-500' : ''}" data-id="${card.id}">
                <img src="${imageUrl}" alt="${card.name}" class="rounded-lg shadow-md w-full transition-transform transform group-hover:scale-105">
                <div class="absolute inset-0 bg-black bg-opacity-60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center rounded-lg">
                    <div class="text-white text-center p-2"><p class="font-bold">${card.name}</p><p class="text-sm">${card.set_name}</p></div>
                </div>
                 ${bulkCheckbox}
                ${salePriceDisplay}
                <div class="absolute bottom-0 left-0 bg-gray-800 bg-opacity-75 text-white text-xs w-full p-1 rounded-b-lg flex justify-between">
                    <span>Qty: ${card.quantity || 1}</span>
                    <span>${price}</span>
                </div>
            </div>`;
    }).join('');
    display.innerHTML = `<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">${gridHTML}</div>`;
}

export function renderListView(cards, activeTab) {
    if (!cards || cards.length === 0) {
        showEmptyState(activeTab === 'collection' ? "No cards match your filters." : "Your wishlist is empty.");
        return;
    }
    const isBulkMode = Collection.getState().bulkEdit.isActive;
    const allSelectedOnPage = isBulkMode && cards.length > 0 && cards.every(c => Collection.getState().bulkEdit.selected.has(c.id));

    const tableHeader = `
        <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
                ${isBulkMode ? `<th class="p-3 text-left text-xs font-medium uppercase tracking-wider"><input type="checkbox" id="bulk-select-all-page" ${allSelectedOnPage ? 'checked' : ''}></th>` : ''}
                <th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Name</th>
                <th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Set</th>
                <th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                <th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Condition</th>
                <th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Market Price</th>
                <th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Status</th>
                ${!isBulkMode ? '<th class="p-3 text-left text-xs font-medium uppercase tracking-wider">Actions</th>' : ''}
            </tr>
        </thead>`;

    const tableBody = cards.map(card => {
        const price = formatPrice(card?.prices?.usd, 'USD');
        const isSelected = Collection.getState().bulkEdit.selected.has(card.id);
        const saleStatus = (card.forSale && typeof card.salePrice === 'number')
            ? `<span class="text-green-500 font-semibold">For Sale ($${formatPrice(card.salePrice)})</span>`
            : 'In Collection';
        
        return `
            <tr class="card-container border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600/50 ${isSelected ? 'bg-blue-100 dark:bg-blue-900/50' : ''}" data-id="${card.id}">
                ${isBulkMode ? `<td class="p-3"><input type="checkbox" class="bulk-select-checkbox h-4 w-4" data-id="${card.id}" ${isSelected ? 'checked' : ''}></td>` : ''}
                <td class="p-3 font-medium">${card.name} ${card.is_foil ? '<i class="fas fa-star text-yellow-400"></i>' : ''}</td>
                <td class="p-3 text-sm text-gray-500 dark:text-gray-400">${card.set_name}</td>
                <td class="p-3">${card.quantity || 1}</td>
                <td class="p-3">${card.condition || 'N/A'}</td>
                <td class="p-3">${price}</td>
                <td class="p-3 text-sm">${saleStatus}</td>
                ${!isBulkMode ? `
                    <td class="p-3">
                        <div class="flex space-x-2">
                            <button data-action="edit" class="text-blue-500 hover:text-blue-700"><i class="fas fa-pencil-alt"></i></button>
                            <button data-action="delete" class="text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>
                        </div>
                    </td>` : ''
                }
            </tr>
        `;
    }).join('');

    display.innerHTML = `<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">${tableHeader}<tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">${tableBody}</tbody></table>`;
}

export function renderSearchResults(results) {
    const container = getElement('search-results-container');
    if (typeof results === 'string') {
        container.innerHTML = `<p class="text-center text-gray-500">${results}</p>`;
        return;
    }
    if (!results || results.length === 0) {
        container.innerHTML = `<p class="text-center text-gray-500">No cards found.</p>`;
        return;
    }
    const resultsHTML = results.map(card => {
        const imageUrl = getCardImageUrl(card);
        const price = formatPrice(card?.prices?.usd, 'USD');
        const collectorInfo = card.game === 'mtg' && card.collector_number ? ` | #${card.collector_number}` : '';
        const cardDataString = encodeURIComponent(JSON.stringify(card));
        return `
            <div class="flex items-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer search-result-item" data-card='${cardDataString}'>
                <img src="${imageUrl}" alt="${card.name}" class="w-16 h-22 object-contain mr-4 rounded-md pointer-events-none">
                <div class="flex-grow pointer-events-none">
                    <p class="font-semibold">${card.name}</p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">${card.set_name} (${card.set.toUpperCase()}${collectorInfo})</p>
                </div>
                <div class="text-right pointer-events-none">
                    <p class="font-mono">${price}</p>
                    <p class="text-sm capitalize text-gray-500">${card.rarity}</p>
                </div>
            </div>`;
    }).join('');
    container.innerHTML = resultsHTML;
}

export function renderPendingCards(pendingCards) {
    const container = getElement('pending-cards-container');
    if (pendingCards.length === 0) {
        container.innerHTML = '';
        return;
    }
    container.innerHTML = `<h4 class="text-sm font-bold mb-2">Pending Versions to Add:</h4>` +
        pendingCards.map(card => {
            const details = [
                `${card.quantity}x`,
                card.condition,
                card.language,
                card.is_foil ? 'Foil' : '',
            ].filter(Boolean).join(', ');
            return `<div class="bg-gray-100 dark:bg-gray-700 p-2 rounded-md text-sm mb-1">${details}</div>`;
        }).join('');
}


// --- UI STATE UPDATES ---
export const showLoadingState = () => display.innerHTML = '<p class="text-center text-gray-500">Loading your collection...</p>';
export const showLoggedOutState = () => getElement('collection-display').innerHTML = '<p class="text-center text-gray-500">Please log in to manage your collection.</p>';
export const showEmptyState = (message) => display.innerHTML = `<div class="flex items-center justify-center h-full text-gray-500"><p>${message}</p></div>`;

export function updateStats(stats, activeTab) {
    const isCollection = activeTab === 'collection';
    getElement('stats-title').textContent = isCollection ? 'Collection Statistics' : 'Wishlist Statistics';
    getElement('stats-total-label').textContent = isCollection ? 'Total Cards:' : 'Total Items:';
    getElement('stats-unique-label').textContent = isCollection ? 'Unique Cards:' : 'Unique Items:';
    getElement('stats-value-label').textContent = isCollection ? 'Total Value:' : 'Wishlist Value:';
    getElement('stats-total-cards').textContent = stats.totalCards;
    getElement('stats-unique-cards').textContent = stats.uniqueCards;
    getElement('stats-total-value').textContent = formatPrice(stats.totalValue, 'USD');
}

export function populateFilters(sets, rarities) {
    const setFilter = getElement('filter-set');
    const rarityFilter = getElement('filter-rarity');
    const currentSet = setFilter.value;
    const currentRarity = rarityFilter.value;
    setFilter.innerHTML = '<option value="">All Sets</option>' + sets.map(s => `<option value="${s}">${s}</option>`).join('');
    rarityFilter.innerHTML = '<option value="">All Rarities</option>' + rarities.map(r => `<option value="${r}">${r}</option>`).join('');
    setFilter.value = currentSet;
    rarityFilter.value = currentRarity;
}

export function updateViewToggle(view) {
    const gridBtn = getElement('view-toggle-grid');
    const listBtn = getElement('view-toggle-list');
    gridBtn.classList.toggle('bg-white', view === 'grid');
    gridBtn.classList.toggle('dark:bg-gray-900', view === 'grid');
    gridBtn.classList.toggle('shadow', view === 'grid');
    listBtn.classList.toggle('bg-white', view === 'list');
    listBtn.classList.toggle('dark:bg-gray-900', view === 'list');
    listBtn.classList.toggle('shadow', view === 'list');
}

// ** NEW: Implemented Missing Functions **
export function updateActiveTab(tab) {
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tab);
    });
}

export function updateTcgFilter(game) {
    document.querySelectorAll('.tcg-filter-button').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.game === game);
    });
}


export function updateColorFilterSelection(selectedColors) {
    const colorIcons = document.querySelectorAll('#filter-colors i');
    colorIcons.forEach(icon => {
        const color = icon.dataset.color;
        if (selectedColors.includes(color)) {
            icon.classList.remove('text-gray-400');
            switch(color) {
                case 'W': icon.classList.add('text-yellow-200'); break;
                case 'U': icon.classList.add('text-blue-500'); break;
                case 'B': icon.classList.add('text-black'); break;
                case 'R': icon.classList.add('text-red-500'); break;
                case 'G': icon.classList.add('text-green-500'); break;
                case 'C': icon.classList.add('text-gray-500'); break;
            }
        } else {
            icon.className = 'fas cursor-pointer text-gray-400';
            switch(color) {
                case 'W': icon.classList.add('fa-circle'); break;
                case 'U': icon.classList.add('fa-tint'); break;
                case 'B': icon.classList.add('fa-skull'); break;
                case 'R': icon.classList.add('fa-fire'); break;
                case 'G': icon.classList.add('fa-leaf'); break;
                case 'C': icon.classList.add('fa-gem'); break;
            }
        }
    });
}

export function updateBulkEditUI(isActive) {
    const bulkEditBtn = getElement('bulk-edit-btn');
    const bulkToolbar = getElement('bulk-edit-toolbar');
    
    bulkEditBtn.innerHTML = isActive ? '<i class="fas fa-times w-6"></i> Cancel' : '<i class="fas fa-edit w-6"></i> Bulk Edit';
    bulkEditBtn.classList.toggle('bg-red-600', isActive);
    bulkEditBtn.classList.toggle('text-white', isActive);
    bulkEditBtn.classList.toggle('hover:bg-red-700', isActive);
    bulkEditBtn.classList.toggle('bg-gray-200', !isActive);
    bulkEditBtn.classList.toggle('dark:bg-gray-700', !isActive);
    bulkEditBtn.classList.toggle('hover:bg-gray-300', !isActive);
    bulkEditBtn.classList.toggle('dark:hover:bg-gray-600', !isActive);

    bulkToolbar.classList.toggle('hidden', !isActive);
    updateSelectedCount();
}

export function updateSelectedCount() {
    const count = Collection.getState().bulkEdit.selected.size;
    getElement('bulk-selected-count').textContent = count;
}


// --- MODAL MANAGEMENT ---
const openModal = (modal) => { modal.classList.remove('hidden'); modal.classList.add('flex'); }
const closeModal = (modal) => { modal.classList.add('hidden'); modal.classList.remove('flex'); }

export function openSearchModal(query = '') {
    if (typeof query !== 'string') query = '';
    getElement('card-search-input').value = query;
    getElement('search-results-container').innerHTML = '<p class="text-center text-gray-500">Search results will appear here.</p>';
    openModal(searchModal);
    getElement('card-search-input').focus();
}
export const closeSearchModal = () => closeModal(searchModal);
export const openCardModal = () => {
    Collection.clearPendingCards();
    renderPendingCards([]);
    openModal(cardModal);
}
export const closeCardModal = () => {
    getElement('card-form').reset();
    getElement('list-for-sale-section').classList.add('hidden');
    getElement('add-another-version-btn').classList.remove('hidden');
    closeModal(cardModal);
};

function setupSaleSectionLogic(cardData) {
    const forSaleToggle = getElement('list-for-sale-toggle');
    const forSaleSection = getElement('list-for-sale-section');
    const marketPriceDisplay = getElement('market-price-display');
    const salePercentageInput = getElement('card-sale-percentage');
    const salePriceInput = getElement('card-sale-price');

    const marketPrice = parseFloat(cardData.prices?.usd || 0);
    marketPriceDisplay.textContent = marketPrice > 0 ? `$${marketPrice.toFixed(2)}` : 'N/A';
    
    const newPercentageInput = salePercentageInput.cloneNode(true);
    salePercentageInput.parentNode.replaceChild(newPercentageInput, salePercentageInput);
    
    const newSalePriceInput = salePriceInput.cloneNode(true);
    salePriceInput.parentNode.replaceChild(newSalePriceInput, salePriceInput);
    
    const newForSaleToggle = forSaleToggle.cloneNode(true);
    forSaleToggle.parentNode.replaceChild(newForSaleToggle, forSaleToggle);
    
    const updatePriceFromPercentage = () => {
        if (marketPrice > 0) {
            const percentage = parseFloat(newPercentageInput.value) || 100;
            newSalePriceInput.value = (marketPrice * (percentage / 100)).toFixed(2);
        }
    };
    
    const updatePercentageFromPrice = () => {
        if (marketPrice > 0) {
            const price = parseFloat(newSalePriceInput.value) || 0;
            newPercentageInput.value = Math.round((price / marketPrice) * 100);
        }
    };

    newPercentageInput.addEventListener('input', updatePriceFromPercentage);
    newSalePriceInput.addEventListener('input', updatePercentageFromPrice);

    newForSaleToggle.addEventListener('change', () => {
        forSaleSection.classList.toggle('hidden', !newForSaleToggle.checked);
        if (newForSaleToggle.checked && !newSalePriceInput.value) {
            updatePriceFromPercentage();
        }
    });
}


export function populateCardModalForAdd(cardData) {
    Collection.setCurrentEditingCard(cardData);
    const form = getElement('card-form');
    form.reset();
    getElement('card-modal-id').value = '';
    getElement('card-modal-title').textContent = cardData.name;
    getElement('card-modal-subtitle').textContent = `${cardData.set_name} (${cardData.set.toUpperCase()})`;
    getElement('card-modal-image').src = getCardImageUrl(cardData);
    getElement('save-card-btn').textContent = "Add to Collection";
    getElement('add-another-version-btn').classList.remove('hidden');
    getElement('list-for-sale-section').classList.add('hidden');
    
    setupSaleSectionLogic(cardData);
    
    openCardModal();
}

export function populateCardModalForEdit(cardData, listForSale = false) {
    populateCardModalForAdd(cardData);
    
    getElement('card-modal-id').value = cardData.id;
    getElement('card-modal-title').textContent = `Editing: ${cardData.name}`;
    getElement('card-quantity').value = cardData.quantity || 1;
    getElement('card-condition').value = cardData.condition || 'Near Mint';
    getElement('card-language').value = cardData.language || 'English';
    getElement('card-purchase-price').value = cardData.purchasePrice || '';
    getElement('card-is-foil').checked = cardData.is_foil || false;
    getElement('card-is-signed').checked = cardData.is_signed || false;
    getElement('card-is-altered').checked = cardData.is_altered || false;
    
    const forSaleToggle = getElement('list-for-sale-toggle');
    const forSaleSection = getElement('list-for-sale-section');
    const salePriceInput = getElement('card-sale-price');
    const salePercentageInput = getElement('card-sale-percentage');

    if (cardData.forSale || listForSale) {
        forSaleToggle.checked = true;
        forSaleSection.classList.remove('hidden');
        salePriceInput.value = cardData.salePrice || '';
        
        const marketPrice = parseFloat(cardData.prices?.usd || 0);
        if(marketPrice > 0) {
            const price = parseFloat(cardData.salePrice) || 0;
            salePercentageInput.value = Math.round((price / marketPrice) * 100);
        }
    } else {
        forSaleToggle.checked = false;
        forSaleSection.classList.add('hidden');
    }
    
    getElement('save-card-btn').textContent = "Save Changes";
    getElement('add-another-version-btn').classList.add('hidden');
}

export function getCardFormData(includeBaseData = true) {
    const id = getElement('card-modal-id').value;
    const forSale = getElement('list-for-sale-toggle').checked;
    const originalApiData = Collection.getCurrentEditingCard();
    if (!originalApiData) throw new Error("Could not find original card data.");
    
    const data = {
        ...(includeBaseData && { ...originalApiData }),
        quantity: parseInt(getElement('card-quantity').value, 10) || 1,
        condition: getElement('card-condition').value,
        language: getElement('card-language').value,
        purchasePrice: parseFloat(getElement('card-purchase-price').value) || null,
        is_foil: getElement('card-is-foil').checked,
        is_signed: getElement('card-is-signed').checked,
        is_altered: getElement('card-is-altered').checked,
        forSale: forSale,
        salePrice: forSale ? (parseFloat(getElement('card-sale-price').value) || 0) : null,
        addedAt: id ? originalApiData.addedAt : new Date().toISOString()
    };
    
    if (!includeBaseData) {
        data.name = originalApiData.name;
        data.set_name = originalApiData.set_name;
    }
    
    const customImageFile = getElement('custom-image-upload').files[0] || null;
    return { id, data, customImageFile };
}


export function resetCardFormForNewVersion() {
    getElement('card-quantity').value = 1;
    getElement('card-condition').value = 'Near Mint';
    getElement('card-language').value = 'English';
    getElement('card-purchase-price').value = '';
    getElement('card-is-foil').checked = false;
    getElement('card-is-signed').checked = false;
    getElement('card-is-altered').checked = false;
    getElement('list-for-sale-toggle').checked = false;
    getElement('list-for-sale-section').classList.add('hidden');
    getElement('card-sale-price').value = '';
    getElement('card-quantity').focus();
    getElement('save-card-btn').textContent = `Add ${Collection.getPendingCards().length + 1} Version(s)`;
}

export const toggleListForSaleSection = () => getElement('list-for-sale-section').classList.toggle('hidden');
export const openCsvImportModal = () => openModal(csvModal);
export const closeCsvImportModal = () => { getElement('csv-file-input').value = ''; getElement('csv-import-status').textContent = 'Awaiting file...'; closeModal(csvModal); };
export const updateCsvImportStatus = (message) => { const el = getElement('csv-import-status'); el.innerHTML += message + '<br>'; el.scrollTop = el.scrollHeight; };
export function openBulkListSaleModal(count) { getElement('bulk-list-count').textContent = count; openModal(bulkListModal); }
export const closeBulkListSaleModal = () => { getElement('bulk-list-form').reset(); closeModal(bulkListModal); };

export function toggleBulkPriceInputs() {
    const priceOption = getElement('bulk-list-form').elements['price-option'].value;
    getElement('bulk-price-percentage-group').classList.toggle('hidden', priceOption !== 'percentage');
    getElement('bulk-price-fixed-group').classList.toggle('hidden', priceOption !== 'fixed');
}

This is /js/card-view.js:
/**
 * HatakeSocial - Card View Page Script (v10 - Definitive Fix)
 *
 * This script is a complete, working version for the card-view.html page.
 * - FIX: The main data source is now the `marketplaceListings` collection in Firestore, preventing incorrect API calls.
 * - FIX: The script now identifies the card's game (MTG or Pokémon) from the Firestore document.
 * - FIX: `updatePageWithCardData` is now game-aware. It will display relevant details for Pokémon (HP, types, abilities, attacks) and MTG (mana cost, oracle text).
 * - FIX: The card image is now correctly sourced from the nested card data within the Firestore listing, fixing the missing image for Pokémon.
 * - FIX: The logic to find similar listings is corrected to find all versions of a card by its unique API ID, not just by name.
 */

document.addEventListener('authReady', (e) => {
    const user = e.detail.user;
    const container = document.getElementById('card-view-container');
    if (!container) return; 

    const urlParams = new URLSearchParams(window.location.search);
    const listingId = urlParams.get('id');

    if (!listingId) {
        container.innerHTML = '<p class="text-center text-red-500 col-span-full">No marketplace listing ID specified in the URL.</p>';
        return;
    }

    // Initialize Firebase
    const db = firebase.firestore();

    // --- DOM Elements ---
    const cardImageEl = document.getElementById('card-image');
    const cardDetailsEl = document.getElementById('card-details');
    const listingsContainer = document.getElementById('listings-table-container');
    const chartCtx = document.getElementById('price-chart')?.getContext('2d');
    const filterControls = document.getElementById('filter-controls');

    // --- State ---
    let allListings = [];
    let priceChart = null;
    
    // --- Helper Functions ---
    const getCardImageUrl = (cardData, size = 'large') => {
        if (cardData?.customImageUrl) return cardData.customImageUrl;
        // This structure is now standardized by our utils.js file for both games
        if (cardData?.image_uris) return cardData.image_uris[size] || cardData.image_uris.normal;
        // Fallback for any legacy data
        if (cardData?.images) return cardData.images[size] || cardData.images.large;
        return 'https://placehold.co/370x516/cccccc/969696?text=No+Image';
    };
    
    const formatPrice = (price, currency = 'USD') => {
        const numericPrice = parseFloat(price);
        if (isNaN(numericPrice)) return 'N/A';
        return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency }).format(numericPrice);
    };

    const getShippingRegion = (sellerCountry, buyerCountry) => {
        const europeanCountries = ["Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden", "United Kingdom"];
        if (!buyerCountry || !sellerCountry) return 'restOfWorld';
        if (sellerCountry.toLowerCase() === buyerCountry.toLowerCase()) return 'domestic';
        if (europeanCountries.includes(sellerCountry) && europeanCountries.includes(buyerCountry)) return 'europe';
        if (buyerCountry === "United States" || buyerCountry === "Canada") return 'northAmerica';
        return 'restOfWorld';
    };

    /**
     * Main function to load all data, starting from the Firestore listing.
     */
    const loadCardData = async () => {
        try {
            const listingDoc = await db.collection('marketplaceListings').doc(listingId).get();
            if (!listingDoc.exists) throw new Error('This marketplace listing does not exist.');
            
            const listingData = listingDoc.data();
            const cardData = listingData.cardData;

            updatePageWithCardData(cardData);
            renderPriceChart(cardData);
            // Fetch other listings using the unique API ID for accuracy
            await fetchAllListingsForCard(cardData.api_id);

        } catch (error) {
            console.error("Error loading card view:", error);
            container.innerHTML = `<p class="text-center text-red-500 col-span-full p-8 bg-white dark:bg-gray-800 rounded-lg">Error: ${error.message}</p>`;
        }
    };

    /**
     * Updates the page with card details, now aware of both MTG and Pokémon data structures.
     */
    const updatePageWithCardData = (cardData) => {
        document.title = `${cardData.name} - HatakeSocial`;
        cardImageEl.src = getCardImageUrl(cardData, 'large');
        cardImageEl.alt = cardData.name;
        let detailsHTML = '';
        
        if (cardData.game === 'mtg') {
            const detailsSource = (cardData.card_faces && cardData.card_faces[0]) ? cardData.card_faces[0] : cardData;
            const manaCost = detailsSource.mana_cost || '';
            const typeLine = detailsSource.type_line || cardData.type_line || '';
            const oracleText = detailsSource.oracle_text || '';
            const power = detailsSource.power || null;
            const toughness = detailsSource.toughness || null;
            detailsHTML = `
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white">${cardData.name}</h1>
                <p class="text-lg text-gray-600 dark:text-gray-400">${manaCost}</p>
                <p class="text-lg text-gray-800 dark:text-gray-200">${typeLine}</p>
                <div class="text-md my-2 space-y-2 text-gray-700 dark:text-gray-300">${oracleText.replace(/\n/g, '<br>')}</div>
                ${power ? `<p class="text-lg font-bold text-gray-900 dark:text-white">${power} / ${toughness}</p>` : ''}
            `;
        } else if (cardData.game === 'pokemon') {
            const hp = cardData.hp || '';
            const types = cardData.types?.join(', ') || '';
            detailsHTML = `
                <div class="flex justify-between items-start">
                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">${cardData.name}</h1>
                    <span class="text-lg font-bold text-gray-800 dark:text-gray-200">HP ${hp}</span>
                </div>
                <p class="text-lg text-gray-600 dark:text-gray-400">${types}</p>
                <div class="text-md my-2 space-y-4 text-gray-700 dark:text-gray-300">
                    ${cardData.abilities?.map(a => `<p><b>${a.name}:</b> ${a.text}</p>`).join('') || ''}
                    ${cardData.attacks?.map(a => `<p><b>${a.name} (${a.cost?.join('')}):</b> ${a.text} <i>${a.damage || ''}</i></p>`).join('') || ''}
                </div>
            `;
        } else {
            detailsHTML = `<h1 class="text-2xl font-bold text-gray-900 dark:text-white">${cardData.name}</h1>`;
        }
        cardDetailsEl.innerHTML = `
            ${detailsHTML}
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-4">Set: ${cardData.set_name} (#${cardData.collector_number})</p>
        `;
    };

    const fetchAllListingsForCard = async (apiId) => {
        listingsContainer.innerHTML = '<p class="p-4 text-center text-gray-500 dark:text-gray-400">Loading listings...</p>';
        try {
            const listingsQuery = db.collection('marketplaceListings').where('cardData.api_id', '==', apiId);
            const listingsSnapshot = await listingsQuery.get();
            if (listingsSnapshot.empty) {
                listingsContainer.innerHTML = '<p class="p-4 text-center text-gray-500 dark:text-gray-400">No one is currently selling this card.</p>';
                filterControls.classList.add('hidden');
                return;
            }
            allListings = listingsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            filterControls.classList.remove('hidden');
            applyFiltersAndSort();
        } catch (error) {
            console.error("Firestore query for listings failed:", error);
            listingsContainer.innerHTML = `<div class="p-4 text-center text-red-500 dark:text-red-400">Could not load listings.</div>`;
        }
    };

    const applyFiltersAndSort = () => {
        let filteredListings = [...allListings];
        const condition = document.getElementById('filter-condition').value;
        if (condition !== 'all') filteredListings = filteredListings.filter(l => l.condition === condition);
        
        const foil = document.getElementById('filter-foil').value;
        if (foil !== 'all') filteredListings = filteredListings.filter(l => l.isFoil === (foil === 'true'));

        const sortBy = document.getElementById('sort-by').value;
        if (sortBy === 'price-asc') filteredListings.sort((a, b) => a.price - b.price);
        else if (sortBy === 'price-desc') filteredListings.sort((a, b) => b.price - a.price);
        else if (sortBy === 'rating-desc') filteredListings.sort((a, b) => (b.sellerData.rating || 0) - (a.sellerData.rating || 0));

        renderListingsTable(filteredListings);
    };

    const renderListingsTable = (listings) => {
        if (listings.length === 0) {
            listingsContainer.innerHTML = '<p class="p-4 text-center text-gray-500 dark:text-gray-400">No listings match the current filters.</p>';
            return;
        }
        let tableHTML = `
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Seller</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Details</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Price + Ship</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Action</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">`;
        
        const buyerData = window.HatakeSocial.currentUserData;
        listings.forEach(listing => {
            const seller = listing.sellerData;
            const sellerCurrency = seller.primaryCurrency || 'SEK';
            const priceDisplay = window.HatakeSocial.convertAndFormatPrice(listing.price, sellerCurrency);
            const shippingRegion = getShippingRegion(seller.country, buyerData?.country);
            const shippingCost = seller.shippingProfile?.[shippingRegion] || null;
            const shippingDisplay = shippingCost !== null 
                ? `+ ${window.HatakeSocial.convertAndFormatPrice(shippingCost, sellerCurrency)} ship`
                : '(Shipping not set)';
            tableHTML += `
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-10 w-10">
                                <img class="h-10 w-10 rounded-full object-cover" src="${seller.photoURL || 'https://i.imgur.com/B06rBhI.png'}" alt="${seller.displayName}">
                            </div>
                            <div class="ml-4">
                                <a href="profile.html?uid=${listing.sellerId}" class="text-sm font-medium text-gray-900 dark:text-white hover:underline">${seller.displayName}</a>
                                <div class="text-xs text-gray-500 dark:text-gray-400">★ ${seller.rating?.toFixed(1) || 'N/A'} | from ${seller.city || 'N/A'}, ${seller.country || 'N/A'}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        ${listing.condition} ${listing.isFoil ? '<span class="text-blue-500 font-bold">(Foil)</span>' : ''}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <p class="font-semibold text-gray-900 dark:text-white">${priceDisplay}</p>
                        <p class="text-gray-500 dark:text-gray-400 text-xs">${shippingDisplay}</p>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button class="add-to-cart-btn text-indigo-600 dark:text-indigo-400 hover:underline" data-listing-id="${listing.id}">Add to Cart</button>
                    </td>
                </tr>`;
        });
        tableHTML += `</tbody></table></div>`;
        listingsContainer.innerHTML = tableHTML;
    };
    
    const renderPriceChart = (cardData) => {
        if (!chartCtx) return;
        if (priceChart) priceChart.destroy();
        const priceUSD = parseFloat(cardData?.prices?.usd || 0);
        if (priceUSD === 0) {
            chartCtx.canvas.parentNode.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400 flex items-center justify-center h-full">Price data not available for this card.</p>';
            return;
        }
        const history = [];
        const labels = [];
        let price = priceUSD * (0.8 + Math.random() * 0.4);
        for (let i = 90; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
            const volatility = price * 0.05;
            price += (Math.random() - 0.5) * volatility;
            price += (priceUSD - price) * 0.02; 
            price = Math.max(price, priceUSD * 0.2); 
            history.push(price);
        }
        history[history.length - 1] = priceUSD;
        const convertedHistory = history.map(p => parseFloat(window.HatakeSocial.convertAndFormatPrice(p, 'USD').split(' ')[0]));
        const currencyLabel = window.HatakeSocial.currentCurrency;
        priceChart = new Chart(chartCtx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: `Price (${currencyLabel})`,
                    data: convertedHistory,
                    backgroundColor: 'rgba(59, 130, 246, 0.2)',
                    borderColor: 'rgba(59, 130, 246, 1)',
                    borderWidth: 2,
                    tension: 0.4,
                    pointRadius: 0,
                }]
            },
            options: {
                responsive: true, maintainAspectRatio: false,
                scales: { x: { ticks: { maxTicksLimit: 8, color: '#6b7280' }, grid: { display: false } }, y: { beginAtZero: false, ticks: { color: '#6b7280' } } },
                plugins: { legend: { display: false }, tooltip: { callbacks: { label: (c) => `${c.dataset.label || ''}: ${c.parsed.y.toFixed(2)} ${currencyLabel}` } } }
            }
        });
    };

    // --- Event Listeners ---
    document.getElementById('filter-condition')?.addEventListener('change', applyFiltersAndSort);
    document.getElementById('filter-foil')?.addEventListener('change', applyFiltersAndSort);
    document.getElementById('sort-by')?.addEventListener('change', applyFiltersAndSort);

    loadCardData();
});

This is js/marketplace.js:
/**
 * @file public/js/marketplace.js
 * @description Handles all logic for the TCG Marketplace page for HatakeSocial.
 * @note This script uses the Firebase v9 compat libraries.
 */

// --- STATE MANAGEMENT ---
let allListings = [];         // Master list of all listings from Firestore
let filteredListings = [];    // Listings after filters and sorting are applied
let currentView = 'grid';     // 'grid' or 'list'
let isInitialized = false;    // Prevents double initialization

// --- DOM ELEMENT REFERENCES ---
const listingsContainer = document.getElementById('listingsContainer');
const mainSearchInput = document.getElementById('mainSearch');
const gameFilter = document.getElementById('gameFilter');
const setFilter = document.getElementById('setFilter');
const minPriceInput = document.getElementById('minPrice');
const maxPriceInput = document.getElementById('maxPrice');
const conditionFiltersContainer = document.getElementById('conditionFilters');
const foilFilter = document.getElementById('foilFilter');
const locationFilter = document.getElementById('locationFilter');
const sortOptions = document.getElementById('sortOptions');
const gridViewBtn = document.getElementById('gridViewBtn');
const listViewBtn = document.getElementById('listViewBtn');
const toggleAdvancedFiltersBtn = document.getElementById('toggleAdvancedFilters');
const advancedFiltersContainer = document.getElementById('advancedFilters');

// --- UTILITY FUNCTIONS ---
const debounce = (func, delay) => {
    let timeoutId;
    return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            func.apply(this, args);
        }, delay);
    };
};

// --- DATA FETCHING ---
async function fetchMarketplaceData() {
    listingsContainer.innerHTML = `
        <div class="text-center p-10">
           <i class="fas fa-spinner fa-spin text-4xl text-blue-500"></i>
           <p class="mt-2 text-gray-600 dark:text-gray-400">Loading Listings...</p>
        </div>`;
    
    try {
        // Using compat syntax
        const db = firebase.firestore();
        const listingsRef = db.collection('marketplaceListings');
        const querySnapshot = await listingsRef.orderBy('timestamp', 'desc').get();

        allListings = querySnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
        
        filteredListings = [...allListings];

        if (allListings.length === 0) {
            listingsContainer.innerHTML = `<p class="text-center text-gray-500 dark:text-gray-400 py-10">The marketplace is currently empty.</p>`;
        } else {
            populateSetFilter();
            renderListings();
        }

    } catch (error) {
        console.error("Error fetching marketplace listings:", error);
        listingsContainer.innerHTML = `<p class="text-center text-red-500 py-10">Could not load listings. Please try again later.</p>`;
    }
}

// --- RENDERING LOGIC ---
function renderListings() {
    listingsContainer.innerHTML = '';

    if (filteredListings.length === 0) {
        listingsContainer.innerHTML = `<p class="text-center text-gray-500 dark:text-gray-400 py-10">No cards found. Try adjusting your filters.</p>`;
        return;
    }

    if (currentView === 'grid') {
        renderGridView();
    } else {
        renderListView();
    }
}

function renderGridView() {
    const grid = document.createElement('div');
    grid.className = 'grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4';

    filteredListings.forEach(listing => {
        const cardData = listing.cardData;
        const sellerData = listing.sellerData;
        const imageUrl = cardData.image_uris?.normal || cardData.image_uris?.large || 'https://placehold.co/223x310?text=No+Image';

        const cardElement = document.createElement('div');
        cardElement.className = 'group relative rounded-lg overflow-hidden cursor-pointer transform hover:scale-105 transition-transform duration-200 shadow-lg';
        cardElement.onclick = () => window.location.href = `/card-view.html?id=${listing.id}`;
        
        cardElement.innerHTML = `
            <img src="${imageUrl}" alt="${cardData.name}" class="w-full h-full object-cover">
            <div class="absolute inset-0 bg-black bg-opacity-80 flex flex-col justify-end p-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                <h3 class="text-sm font-bold text-white truncate">${cardData.name}</h3>
                <p class="text-xs text-blue-400 font-semibold">$${listing.price.toFixed(2)}</p>
                <p class="text-xs text-gray-300">${listing.condition} ${listing.isFoil ? '• Foil' : ''}</p>
                <div class="mt-1 border-t border-gray-600 pt-1">
                    <a href="/profile.html?uid=${sellerData.uid}" onclick="event.stopPropagation()" class="flex items-center space-x-1 group/seller">
                        <img src="${sellerData.photoURL || 'https://placehold.co/24'}" class="w-5 h-5 rounded-full">
                        <span class="text-xs text-gray-400 group-hover/seller:text-white truncate">${sellerData.displayName}</span>
                    </a>
                </div>
            </div>
        `;
        grid.appendChild(cardElement);
    });
    listingsContainer.appendChild(grid);
}

function renderListView() {
    const tableContainer = document.createElement('div');
    tableContainer.className = 'overflow-x-auto bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700';
    
    let tableHTML = `
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Card Name</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Set</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Condition</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Price</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Seller</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">`;

    filteredListings.forEach(listing => {
        const cardData = listing.cardData;
        const sellerData = listing.sellerData;
        
        tableHTML += `
            <tr class="hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer" onclick="window.location.href='/card-view.html?id=${listing.id}'">
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900 dark:text-white">${cardData.name} ${listing.isFoil ? '<i class="fas fa-star text-yellow-400 text-xs ml-1" title="Foil"></i>' : ''}</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">${cardData.type_line}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${cardData.set_name}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${listing.condition}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-blue-600 dark:text-blue-400">$${listing.price.toFixed(2)}</td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <a href="/profile.html?uid=${sellerData.uid}" onclick="event.stopPropagation()" class="flex items-center space-x-2 group">
                        <img class="h-8 w-8 rounded-full" src="${sellerData.photoURL || 'https://placehold.co/32'}" alt="">
                        <div>
                             <div class="text-sm font-medium text-gray-900 dark:text-white group-hover:underline">${sellerData.displayName}</div>
                             <div class="text-sm text-gray-500 dark:text-gray-400">${sellerData.country || 'N/A'}</div>
                        </div>
                    </a>
                </td>
            </tr>`;
    });
    tableHTML += `</tbody></table>`;
    tableContainer.innerHTML = tableHTML;
    listingsContainer.appendChild(tableContainer);
}

// --- FILTERING AND SORTING LOGIC ---
function applyFiltersAndSort() {
    let listings = [...allListings];

    const searchTerm = mainSearchInput.value.toLowerCase();
    const selectedGame = gameFilter.value;
    const selectedSet = setFilter.value;
    const minPrice = parseFloat(minPriceInput.value);
    const maxPrice = parseFloat(maxPriceInput.value);
    const selectedConditions = Array.from(conditionFiltersContainer.querySelectorAll('input:checked')).map(cb => cb.value);
    const showFoilOnly = foilFilter.checked;
    const sellerLocation = locationFilter.value.toLowerCase();

    if (searchTerm) listings = listings.filter(l => l.cardData.name.toLowerCase().includes(searchTerm));
    if (selectedGame !== 'all') listings = listings.filter(l => l.cardData.game === selectedGame);
    
    populateSetFilter(listings);
    
    if (selectedSet !== 'all') listings = listings.filter(l => l.cardData.set_name === selectedSet);
    if (!isNaN(minPrice)) listings = listings.filter(l => l.price >= minPrice);
    if (!isNaN(maxPrice)) listings = listings.filter(l => l.price <= maxPrice);
    if (selectedConditions.length > 0) listings = listings.filter(l => selectedConditions.includes(l.condition));
    if (showFoilOnly) listings = listings.filter(l => l.isFoil);
    if (sellerLocation) listings = listings.filter(l => l.sellerData.country && l.sellerData.country.toLowerCase().includes(sellerLocation));

    const sortBy = sortOptions.value;
    switch (sortBy) {
        case 'price-asc':
            listings.sort((a, b) => a.price - b.price);
            break;
        case 'price-desc':
            listings.sort((a, b) => b.price - a.price);
            break;
        case 'newly-listed':
        default:
            listings.sort((a, b) => b.timestamp.seconds - a.timestamp.seconds);
            break;
    }

    filteredListings = listings;
    renderListings();
}

function populateSetFilter(listings = allListings) {
    const currentSetValue = setFilter.value;
    const setNames = [...new Set(listings.map(l => l.cardData.set_name))].sort();
    
    setFilter.innerHTML = '<option value="all">All Sets</option>';
    setNames.forEach(setName => {
        const option = document.createElement('option');
        option.value = setName;
        option.textContent = setName;
        setFilter.appendChild(option);
    });

    if (setNames.includes(currentSetValue)) {
        setFilter.value = currentSetValue;
    } else {
        setFilter.value = 'all';
    }
}

// --- EVENT LISTENERS ---
function setupEventListeners() {
    const debouncedFilter = debounce(applyFiltersAndSort, 300);

    mainSearchInput.addEventListener('input', debouncedFilter);
    gameFilter.addEventListener('change', applyFiltersAndSort);
    setFilter.addEventListener('change', applyFiltersAndSort);
    minPriceInput.addEventListener('input', debouncedFilter);
    maxPriceInput.addEventListener('input', debouncedFilter);
    conditionFiltersContainer.addEventListener('change', applyFiltersAndSort);
    foilFilter.addEventListener('change', applyFiltersAndSort);
    locationFilter.addEventListener('input', debouncedFilter);
    sortOptions.addEventListener('change', applyFiltersAndSort);

    gridViewBtn.addEventListener('click', () => {
        if (currentView !== 'grid') {
            currentView = 'grid';
            gridViewBtn.classList.add('bg-blue-600', 'text-white');
            gridViewBtn.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
            listViewBtn.classList.remove('bg-blue-600', 'text-white');
            listViewBtn.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
            renderListings();
        }
    });

    listViewBtn.addEventListener('click', () => {
        if (currentView !== 'list') {
            currentView = 'list';
            listViewBtn.classList.add('bg-blue-600', 'text-white');
            listViewBtn.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
            gridViewBtn.classList.remove('bg-blue-600', 'text-white');
            gridViewBtn.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
            renderListings();
        }
    });

    toggleAdvancedFiltersBtn.addEventListener('click', () => {
        const isHidden = advancedFiltersContainer.classList.toggle('hidden');
        const icon = toggleAdvancedFiltersBtn.querySelector('i');
        icon.classList.toggle('rotate-180', !isHidden);
        toggleAdvancedFiltersBtn.firstChild.textContent = isHidden 
            ? 'Show Advanced Filters '
            : 'Hide Advanced Filters ';
    });
}

// --- INITIALIZATION ---
function initializeApp() {
    if (isInitialized) return;
    isInitialized = true;
    
    console.log("Marketplace App Initialized");
    setupEventListeners();
    fetchMarketplaceData();
}

document.addEventListener('authReady', (e) => {
    initializeApp();
});

// Fallback for public view
window.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (!isInitialized) {
            console.log("AuthReady not detected, initializing marketplace for public view.");
            initializeApp();
        }
    }, 500);
});

This is js/modules/utils.js:
/**
 * utils.js
 * Contains helper and utility functions for data transformation and formatting.
 */

/**
 * Transforms a Scryfall card object into the app's standard format.
 * @param {object} scryfallCard - The raw card object from the Scryfall API.
 * @returns {object} A standardized card object.
 */
export function transformScryfallCard(scryfallCard) {
    return {
        api_id: scryfallCard.id,
        name: scryfallCard.name,
        set: scryfallCard.set,
        set_name: scryfallCard.set_name,
        rarity: scryfallCard.rarity,
        image_uris: scryfallCard.image_uris,
        prices: {
            usd: scryfallCard.prices?.usd || null,
            usd_foil: scryfallCard.prices?.usd_foil || null,
        },
        purchasePrice: 0,
        collector_number: scryfallCard.collector_number,
        color_identity: scryfallCard.color_identity,
        type_line: scryfallCard.type_line,
        game: 'mtg',
    };
}


/**
 * Transforms a Pokémon TCG API card object into the app's standard format.
 * This function is now robust and safely handles missing data.
 * @param {object} pokemonCard - The raw card object from the Pokémon TCG API.
 * @returns {object} A standardized card object.
 */
export function transformPokemonCard(pokemonCard) {
    const prices = pokemonCard.tcgplayer?.prices || {};
    const normalPrice = prices?.normal?.market 
                      || prices?.unlimited?.market 
                      || prices?.holofoil?.market 
                      || null;
    const foilPrice = prices?.holofoil?.market 
                    || prices?.reverseHolofoil?.market 
                    || prices?.["1stEditionHolofoil"]?.market
                    || null;

    const image_uris = {
        small: pokemonCard.images?.small || '',
        normal: pokemonCard.images?.large || '',
        large: pokemonCard.images?.large || '',
        art_crop: pokemonCard.images?.large || '',
    };

    return {
        api_id: pokemonCard.id,
        name: pokemonCard.name,
        set: pokemonCard.set.id,
        set_name: pokemonCard.set.name,
        rarity: pokemonCard.rarity || 'Common',
        image_uris: image_uris,
        // Keep the original images object for backward compatibility with saved cards
        images: pokemonCard.images, 
        prices: {
            usd: normalPrice,
            usd_foil: foilPrice,
        },
        purchasePrice: 0,
        collector_number: pokemonCard.number,
        type_line: pokemonCard.supertype + (pokemonCard.subtypes ? ` - ${pokemonCard.subtypes.join(' ')}` : ''),
        game: 'pokemon',
    };
}

// --- START: CORRECTED IMAGE URL LOGIC ---
/**
 * Gets a reliable image URL from a card object, supporting both old and new data structures.
 * @param {object} card - The card object.
 * @returns {string} The URL for the card image.
 */
export function getCardImageUrl(card) {
    if (card.customImageUrl) {
        return card.customImageUrl;
    }
    // Check for the standardized `image_uris` object first (works for MTG and new Pokémon searches)
    if (card.image_uris) {
        return card.image_uris.normal || card.image_uris.large || card.image_uris.small;
    }
    // Fallback for older Pokémon cards already saved in the database
    if (card.images) {
        return card.images.large || card.images.small;
    }
    return 'https://placehold.co/223x310?text=No+Image';
}
// --- END: CORRECTED IMAGE URL LOGIC ---


/**
 * Formats a price string.
 * @param {number|string|null} price - The price to format.
 * @param {string} currency - The currency code (e.g., 'USD').
 * @returns {string} The formatted price string (e.g., '$1.23').
 */
export function formatPrice(price, currency = 'USD') {
    const numericPrice = parseFloat(price);
    if (isNaN(numericPrice)) {
        return 'N/A';
    }
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency,
    }).format(numericPrice);
}

This is js/auth.js:
/**
* HatakeSocial - Merged Authentication & Global UI Script (v22 - UI Elements Restored)
* - This is the complete, unabridged version of the global script.
* - Contains all helper functions for toasts, modals, and user interactions.
* - Manages user authentication state and dynamically updates all UI components.
* - Fixes issue where user action icons (Cart, Notifications, Avatar) were not appearing.
* - Adds the Shopping Cart icon to the header for logged-in users.
* - Ensures header search bar functionality is initialized.
*/

// --- Firebase Initialization (Stable) ---
const firebaseConfig = {
  apiKey: "AIzaSyD2Z9tCmmgReMG77ywXukKC_YIXsbP3uoU",
  authDomain: "hatakesocial-88b5e.firebaseapp.com",
  projectId: "hatakesocial-88b5e",
  storageBucket: "hatakesocial-88b5e.appspot.com",
  messagingSenderId: "1091697032506",
  appId: "1:1091697032506:web:6a7cf9f10bd12650b22403",
  measurementId: "G-EH0PS2Z84J"
};

if (!firebase.apps.length) {
    firebase.initializeApp(firebaseConfig);
}
window.auth = firebase.auth();
window.db = firebase.firestore();
window.storage = firebase.storage();
window.functions = firebase.functions();

// --- Global Toast Notification Function ---
const showToast = (message, type = 'info') => {
    let container = document.getElementById('toast-container');
    if (!container) {
        const toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.className = 'fixed bottom-5 right-5 z-[1003]';
        document.body.appendChild(toastContainer);
        container = toastContainer;
    }
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    let iconClass = 'fa-info-circle';
    if (type === 'success') iconClass = 'fa-check-circle';
    if (type === 'error') iconClass = 'fa-exclamation-circle';

    toast.innerHTML = `<i class="fas ${iconClass} toast-icon"></i> <p>${message}</p>`;
    container.appendChild(toast);

    setTimeout(() => {
        toast.classList.add('show');
    }, 100);

    setTimeout(() => {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => toast.remove());
    }, 5000);
};

// --- Global Modal Helper Functions ---
window.openModal = (modal) => {
    if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        const errorMsg = modal.querySelector('[id$="-error-message"]');
        if (errorMsg) {
            errorMsg.classList.add('hidden');
            errorMsg.textContent = '';
        }
    }
};
window.closeModal = (modal) => {
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }
};

// --- New Conversation Modal ---
window.openNewConversationModal = (isWidget = false, callback) => {
    const existingModal = document.getElementById('new-conversation-modal');
    if (existingModal) existingModal.remove();

    const modal = document.createElement('div');
    modal.id = 'new-conversation-modal';
    modal.className = 'fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[1002]';
    modal.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md flex flex-col" style="height: 70vh; max-height: 500px;">
            <div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
                <h2 class="text-xl font-bold">New Message</h2>
                <button id="close-new-convo-modal" class="text-gray-500 hover:text-gray-800 dark:hover:text-white text-2xl font-bold">&times;</button>
            </div>
            <div class="p-4">
                <input type="text" id="user-search-input" placeholder="Search for a user..." class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div id="user-search-results" class="flex-grow overflow-y-auto p-4 space-y-2">
                <p class="text-center text-gray-500">Start typing to find users.</p>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    const searchInput = modal.querySelector('#user-search-input');
    const searchResultsContainer = modal.querySelector('#user-search-results');
    const closeModalBtn = modal.querySelector('#close-new-convo-modal');

    closeModalBtn.addEventListener('click', () => modal.remove());
    modal.addEventListener('click', (e) => {
        if (e.target.id === 'new-conversation-modal') modal.remove();
    });

    let searchTimeout;
    searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        const query = searchInput.value.trim().toLowerCase();
        if (query.length < 2) {
            searchResultsContainer.innerHTML = '<p class="text-center text-gray-500">Enter at least 2 characters.</p>';
            return;
        }

        searchResultsContainer.innerHTML = '<p class="text-center text-gray-500">Searching...</p>';
        searchTimeout = setTimeout(async () => {
            try {
                const currentUser = firebase.auth().currentUser;
                if (!currentUser) return;
                const usersRef = firebase.firestore().collection('users');
                const snapshot = await usersRef.where('displayName_lower', '>=', query).where('displayName_lower', '<=', query + '\uf8ff').limit(10).get();

                searchResultsContainer.innerHTML = '';
                if (snapshot.empty) {
                    searchResultsContainer.innerHTML = '<p class="text-center text-gray-500">No users found.</p>';
                } else {
                    snapshot.forEach(doc => {
                        const userData = doc.data();
                        if (doc.id === currentUser.uid) return;

                        const userElement = document.createElement('div');
                        userElement.className = 'flex items-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer';
                        userElement.innerHTML = `
                            <img src="${userData.photoURL || 'https://i.imgur.com/B06rBhI.png'}" alt="${userData.displayName}" class="w-10 h-10 rounded-full object-cover mr-3">
                            <div>
                                <p class="font-semibold">${userData.displayName}</p>
                                <p class="text-sm text-gray-500">@${userData.handle || 'N/A'}</p>
                            </div>`;
                        userElement.addEventListener('click', () => {
                            if (callback) callback(doc.id, userData);
                            modal.remove();
                        });
                        searchResultsContainer.appendChild(userElement);
                    });
                }
            } catch (error) {
                console.error("Error searching for users:", error);
                searchResultsContainer.innerHTML = '<p class="text-center text-red-500">Error searching for users.</p>';
            }
        }, 500);
    });
};


document.addEventListener('DOMContentLoaded', () => {
    document.body.style.opacity = '0';

    const googleProvider = new firebase.auth.GoogleAuthProvider();
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');

    window.HatakeSocial = {
        conversionRates: { SEK: 1, USD: 0.095, EUR: 0.088 },
        currentCurrency: localStorage.getItem('hatakeCurrency') || 'SEK',
        currentUserData: null,
        convertAndFormatPrice(amount, fromCurrency = 'SEK') {
            const toCurrency = this.currentCurrency;
            if (amount === undefined || amount === null || isNaN(amount)) {
                return `0.00 ${toCurrency}`;
            }
            const fromRate = this.conversionRates[fromCurrency];
            if (fromRate === undefined) return `N/A`;
            const amountInSEK = amount / fromRate;
            const toRate = this.conversionRates[toCurrency];
            if (toRate === undefined) return `N/A`;
            const convertedAmount = amountInSEK * toRate;
            return `${convertedAmount.toFixed(2)} ${toCurrency}`;
        }
    };

    const setupCurrencySelector = () => {
        const container = document.getElementById('currency-selector-container');
        if (!container) return;

        container.innerHTML = `
        <label for="currency-selector" class="text-sm text-gray-600 dark:text-gray-400">Currency</label>
        <select id="currency-selector" class="text-sm rounded-md border-gray-300 dark:bg-gray-700 dark:border-gray-600 focus:ring-blue-500 focus:border-blue-500">
            <option value="SEK">SEK</option>
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
        </select>
        `;
        const selector = document.getElementById('currency-selector');
        if (selector) {
            selector.value = window.HatakeSocial.currentCurrency;
            selector.addEventListener('change', (e) => {
                window.HatakeSocial.currentCurrency = e.target.value;
                localStorage.setItem('hatakeCurrency', e.target.value);
                window.location.reload();
            });
        }
    };

    const setupHeaderSearch = () => {
        const searchBar = document.getElementById('main-search-bar');
        if (searchBar) {
            searchBar.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const query = searchBar.value.trim();
                    if (query) {
                        window.location.href = `search.html?query=${encodeURIComponent(query)}`;
                    }
                }
            });
        }
    };

    const setupGlobalListeners = () => {
        const googleLoginButton = document.getElementById('googleLoginButton');
        const googleRegisterButton = document.getElementById('googleRegisterButton');
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const registerForm = document.getElementById('registerForm');

        document.getElementById('closeLoginModal')?.addEventListener('click', () => closeModal(loginModal));
        document.getElementById('closeRegisterModal')?.addEventListener('click', () => closeModal(registerModal));

        document.getElementById('loginForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const errorMessageEl = document.getElementById('login-error-message');

            auth.signInWithEmailAndPassword(email, password)
                .then(() => {
                    window.location.href = 'app.html';
                })
                .catch(err => {
                    if (errorMessageEl) {
                        errorMessageEl.textContent = err.message;
                        errorMessageEl.classList.remove('hidden');
                    }
                });
        });

        if(registerForm) {
            registerForm.addEventListener('submit', (e) => {
                e.preventDefault();
                showTermsModal();
            });
        }

        const handleGoogleAuth = () => {
            auth.signInWithPopup(googleProvider)
                .then(() => {
                    window.location.href = 'app.html';
                })
                .catch(err => showToast(err.message, "error"));
        };

        if (googleLoginButton) googleLoginButton.addEventListener('click', handleGoogleAuth);
        if (googleRegisterButton) googleRegisterButton.addEventListener('click', handleGoogleAuth);

        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
        }
    };

    let friendRequestHandshakeListener = null;
    function listenForAcceptedRequests(user) {
        if (friendRequestHandshakeListener) {
            friendRequestHandshakeListener();
        }
        const sentRequestsRef = db.collection('friendRequests')
            .where('senderId', '==', user.uid)
            .where('status', '==', 'accepted');

        friendRequestHandshakeListener = sentRequestsRef.onSnapshot(async (snapshot) => {
            if (snapshot.empty) return;
            const batch = db.batch();
            const currentUserRef = db.collection('users').doc(user.uid);
            for (const doc of snapshot.docs) {
                const request = doc.data();
                batch.update(currentUserRef, { friends: firebase.firestore.FieldValue.arrayUnion(request.receiverId) });
                batch.delete(doc.ref);
            }
            await batch.commit().catch(err => console.error("Error in friend handshake:", err));
        });
    }

    function sanitizeHTML(str) {
        const temp = document.createElement('div');
        temp.textContent = str;
        return temp.innerHTML;
    }

    let unsubscribeNotifications = null;
    let verificationTimer = null;

    auth.onAuthStateChanged(async (user) => {
        if (verificationTimer) {
            clearInterval(verificationTimer);
            verificationTimer = null;
        }

        const mainSidebarNav = document.querySelector('#sidebar nav');
        const existingAdminSidebarLink = document.getElementById('admin-sidebar-link');
        if (existingAdminSidebarLink) {
            existingAdminSidebarLink.remove();
        }

        if (user && !user.emailVerified) {
            document.body.innerHTML = `
            <div class="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
                <div class="p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl text-center max-w-lg mx-4">
                    <h1 class="text-2xl font-bold text-gray-800 dark:text-white mb-4">Please Verify Your Email</h1>
                    <p class="text-gray-600 dark:text-gray-400 mb-6">A verification link has been sent to <strong>${user.email}</strong>. Please check your inbox and spam folder.</p>
                    <div class="space-x-4">
                        <button id="resend-verification-btn" class="px-5 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700">Resend Email</button>
                        <button onclick="firebase.auth().signOut()" class="px-5 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700">Logout</button>
                    </div>
                </div>
            </div>`;
            document.getElementById('resend-verification-btn').addEventListener('click', () => {
                user.sendEmailVerification()
                    .then(() => showToast('A new verification email has been sent.', 'success'))
                    .catch(err => showToast('Error sending email: ' + err.message, 'error'));
            });
            verificationTimer = setInterval(async () => {
                await user.reload();
                if (user.emailVerified) {
                    clearInterval(verificationTimer);
                    window.location.reload();
                }
            }, 5000);
            document.body.style.opacity = '1';
            return;
        }

        const userActions = document.getElementById('user-actions');
        const authContainerSidebar = document.getElementById('auth-container-sidebar');
        const mobileUserActions = document.getElementById('mobile-user-actions');

        if (user) {
            const isIndexPage = window.location.pathname === '/' || window.location.pathname.endsWith('index.html');
            if (isIndexPage) {
                window.location.href = 'app.html';
                return;
            }

            closeModal(loginModal);
            closeModal(registerModal);

            const userDocRef = db.collection('users').doc(user.uid);
            let unsubscribeUserDoc = userDocRef.onSnapshot(async (doc) => {
                if (doc.exists) {
                    if (unsubscribeUserDoc) unsubscribeUserDoc();

                    window.HatakeSocial.currentUserData = doc.data();
                    const userData = doc.data();
                    const photoURL = userData.photoURL || 'https://i.imgur.com/B06rBhI.png';
                    const idTokenResult = await user.getIdTokenResult(true);
                    const isAdmin = idTokenResult.claims.admin === true;

                    handleAdminAccess(isAdmin);

                    if (isAdmin && mainSidebarNav && !document.getElementById('admin-sidebar-link')) {
                        const adminLink = document.createElement('a');
                        adminLink.id = 'admin-sidebar-link';
                        adminLink.className = 'flex items-center px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md font-bold';
                        adminLink.href = 'admin.html';
                        adminLink.innerHTML = `<i class="fas fa-user-shield w-6 text-center"></i><span class="ml-3">Admin Panel</span>`;
                        mainSidebarNav.appendChild(adminLink);
                    }

                    if (userActions) {
                        userActions.innerHTML = `
                            <button id="cart-btn" class="relative text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 text-xl">
                                <i class="fas fa-shopping-cart"></i>
                                <span id="cart-item-count" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-4 w-4 flex items-center justify-center hidden">0</span>
                            </button>

                            <div class="relative">
                                <button id="notification-bell-btn" class="text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 text-xl">
                                    <i class="fas fa-bell"></i>
                                    <span id="notification-count" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-4 w-4 flex items-center justify-center hidden">0</span>
                                </button>
                                <div id="notification-dropdown" class="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl z-20 hidden">
                                    <div class="p-3 font-bold border-b dark:border-gray-700">Notifications</div>
                                    <div id="notification-list" class="max-h-96 overflow-y-auto"><p class="p-4 text-sm text-gray-500">No new notifications.</p></div>
                                    <a href="notifications.html" class="block text-center p-2 text-sm text-blue-500 hover:bg-gray-100 dark:hover:bg-gray-700">View all</a>
                                </div>
                            </div>

                            <div class="relative">
                                <button id="profile-avatar-btn"><img src="${photoURL}" alt="User Avatar" class="w-10 h-10 rounded-full object-cover"></button>
                                <div id="profile-dropdown" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl z-20 hidden">
                                    <a href="profile.html?uid=${user.uid}" class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">My Profile</a>
                                    <a href="settings.html" class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Settings</a>
                                    ${isAdmin ? `<a href="admin.html" class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Admin Panel</a>` : ''}
                                    <hr class="border-gray-200 dark:border-gray-600">
                                    <button id="logout-btn-dropdown" class="block w-full text-left px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Logout</button>
                                </div>
                            </div>`;
                        
                        // Add event listeners for the new elements
                        const cartBtn = document.getElementById('cart-btn');
                        const cartModal = document.getElementById('cartModal');
                        if(cartBtn && cartModal) {
                           cartBtn.addEventListener('click', (e) => {
                                e.stopPropagation();
                                openModal(cartModal);
                           });
                        }
                        
                        document.getElementById('notification-bell-btn').addEventListener('click', (e) => { e.stopPropagation(); document.getElementById('profile-dropdown').classList.add('hidden'); document.getElementById('notification-dropdown').classList.toggle('hidden'); });
                        document.getElementById('profile-avatar-btn').addEventListener('click', (e) => { e.stopPropagation(); document.getElementById('notification-dropdown').classList.add('hidden'); document.getElementById('profile-dropdown').classList.toggle('hidden'); });
                        document.getElementById('logout-btn-dropdown').addEventListener('click', () => auth.signOut());
                    }

                    if (unsubscribeNotifications) unsubscribeNotifications();
                    unsubscribeNotifications = db.collection('users').doc(user.uid).collection('notifications').orderBy('timestamp', 'desc').onSnapshot(snapshot => {
                        const unreadCount = snapshot.docs.filter(doc => !doc.data().isRead).length;
                        const countEl = document.getElementById('notification-count');
                        const listEl = document.getElementById('notification-list');
                        if (countEl) { countEl.textContent = unreadCount; countEl.classList.toggle('hidden', unreadCount === 0); }
                        if (listEl) {
                            if (snapshot.empty) { listEl.innerHTML = '<p class="p-4 text-sm text-gray-500">No new notifications.</p>'; }
                            else {
                                listEl.innerHTML = '';
                                snapshot.docs.slice(0, 5).forEach(doc => {
                                    const notif = doc.data();
                                    const el = document.createElement('a');
                                    el.href = notif.link || '#';
                                    el.className = `flex items-start p-3 hover:bg-gray-100 dark:hover:bg-gray-700 ${!notif.isRead ? 'bg-blue-50 dark:bg-blue-900/50' : ''}`;
                                    el.innerHTML = `<div><p class="text-sm text-gray-700 dark:text-gray-300">${sanitizeHTML(notif.message)}</p><p class="text-xs text-gray-500">${new Date(notif.timestamp?.toDate()).toLocaleString()}</p></div>`;
                                    el.addEventListener('click', () => db.collection('users').doc(user.uid).collection('notifications').doc(doc.id).update({ isRead: true }));
                                    listEl.appendChild(el);
                                });
                            }
                        }
                    });

                    if (authContainerSidebar) {
                        authContainerSidebar.innerHTML = `<div class="flex items-center"><img src="${photoURL}" alt="User Avatar" class="w-10 h-10 rounded-full object-cover"><div class="ml-3"><p class="font-semibold text-gray-800 dark:text-white">${userData.displayName}</p><button id="logout-btn-sidebar" class="text-sm text-gray-500 hover:underline">Logout</button></div></div>`;
                        document.getElementById('logout-btn-sidebar').addEventListener('click', () => auth.signOut());
                    }

                    if (mobileUserActions) {
                        mobileUserActions.innerHTML = `<div class="flex items-center space-x-4 px-3 py-2"><img src="${photoURL}" alt="User Avatar" class="h-10 w-10 rounded-full border-2 border-blue-500 object-cover"><div><div class="font-medium text-base text-gray-800 dark:text-white">${userData.displayName}</div><div class="font-medium text-sm text-gray-500 dark:text-gray-400">${user.email}</div></div></div><div class="mt-3 space-y-1"><a href="profile.html" class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Profile</a><a href="settings.html" class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Settings</a><a href="#" id="mobileLogoutButton" class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Logout</a></div>`;
                        document.getElementById('mobileLogoutButton').addEventListener('click', (e) => { e.preventDefault(); auth.signOut(); });
                    }
                    listenForAcceptedRequests(user);
                } else {
                    console.log("User document not found for uid:", user.uid);
                }
            }, (error) => {
                console.error("Error listening to user document:", error);
                showToast("Could not load your profile data.", "error");
            });

        } else { // User is logged out
            window.HatakeSocial.currentUserData = null;
            if (friendRequestHandshakeListener) friendRequestHandshakeListener();
            if (unsubscribeNotifications) unsubscribeNotifications();

            handleAdminAccess(false);

            const loginButtonsHTML = `
                <button id="header-login-btn" class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700">Log In</button>
                <button id="header-register-btn" class="px-4 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700">Register</button>`;
            if (userActions) {
                userActions.innerHTML = loginButtonsHTML;
                document.getElementById('header-login-btn').addEventListener('click', () => openModal(loginModal));
                document.getElementById('header-register-btn').addEventListener('click', () => openModal(registerModal));
            }
            if (authContainerSidebar) {
                authContainerSidebar.innerHTML = `<div class="space-y-2"><button id="sidebar-login-btn" class="w-full px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700">Log In</button><button id="sidebar-register-btn" class="w-full px-4 py-2 bg-gray-600 text-white font-semibold rounded-full hover:bg-gray-700">Register</button></div>`;
                document.getElementById('sidebar-login-btn').addEventListener('click', () => openModal(loginModal));
                document.getElementById('sidebar-register-btn').addEventListener('click', () => openModal(registerModal));
            }
            if (mobileUserActions) {
                mobileUserActions.innerHTML = `<div class="space-y-2"><button id="mobileLoginButton" class="w-full text-left block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Login</button><button id="mobileRegisterButton" class="w-full text-left block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">Register</button></div>`;
                document.getElementById('mobileLoginButton').addEventListener('click', () => openModal(loginModal));
                document.getElementById('mobileRegisterButton').addEventListener('click', () => openModal(registerModal));
            }
        }
        document.dispatchEvent(new CustomEvent('authReady', { detail: { user } }));
        document.body.style.transition = 'opacity 0.3s ease-in-out';
        document.body.style.opacity = '1';
    });

    setupGlobalListeners();
    setupHeaderSearch();
    setupCurrencySelector();

    window.addEventListener('click', () => {
        document.getElementById('profile-dropdown')?.classList.add('hidden');
        document.getElementById('notification-dropdown')?.classList.add('hidden');
    });
});

function handleAdminAccess(isAdmin) {
    const currentPage = window.location.pathname.split('/').pop();
    const adminPages = ['admin.html', 'create-article.html', 'edit-article.html'];

    if (adminPages.includes(currentPage) && !isAdmin) {
        window.location.href = 'index.html';
    }
}

async function showTermsModal() {
    const termsModal = document.createElement('div');
    termsModal.id = 'terms-modal';
    termsModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1002]';
    let termsContent = '<p>Loading...</p>', privacyContent = '<p>Loading...</p>';

    try {
        const [termsResponse, privacyResponse] = await Promise.all([fetch('terms.html'), fetch('privacy.html')]);
        termsContent = termsResponse.ok ? await termsResponse.text() : '<p>Could not load Terms of Service.</p>';
        privacyContent = privacyResponse.ok ? await privacyResponse.text() : '<p>Could not load Privacy Policy.</p>';
    } catch (error) {
        console.error('Error fetching legal documents:', error);
        termsContent = '<p>Error loading content.</p>';
    }

    termsModal.innerHTML = `
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl flex flex-col" style="height: 90vh; max-height: 800px;">
        <div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
            <h2 class="text-xl font-bold">Terms & Privacy</h2>
            <button id="close-terms-modal" class="text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
        </div>
        <div id="terms-content" class="p-6 flex-grow overflow-y-auto">${termsContent}<hr class="my-8">${privacyContent}</div>
        <div class="p-6 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
            <label class="flex items-center"><input type="checkbox" id="terms-checkbox" class="h-4 w-4"><span class="ml-2">I have read and agree.</span></label>
            <button id="final-register-btn" disabled class="w-full mt-4 bg-blue-600 text-white font-semibold py-3 rounded-lg disabled:bg-gray-400">Register</button>
        </div>
    </div>`;

    document.body.appendChild(termsModal);

    const termsCheckbox = termsModal.querySelector('#terms-checkbox');
    const finalRegisterBtn = termsModal.querySelector('#final-register-btn');

    termsCheckbox.addEventListener('change', () => {
        finalRegisterBtn.disabled = !termsCheckbox.checked;
    });

    termsModal.querySelector('#close-terms-modal').addEventListener('click', () => termsModal.remove());

    finalRegisterBtn.addEventListener('click', async () => {
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;
        const errorMessageEl = document.getElementById('register-error-message');

        try {
            const userCredential = await auth.createUserWithEmailAndPassword(email, password);
            await userCredential.user.sendEmailVerification();
            window.location.href = 'app.html';
        } catch (err) {
            if (errorMessageEl) {
                errorMessageEl.textContent = err.message;
                errorMessageEl.classList.remove('hidden');
            } else {
                showToast(err.message, "error");
            }
            termsModal.remove();
        }
    });
}