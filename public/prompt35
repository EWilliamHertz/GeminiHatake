The marketplace doessn’t load, this is what it says in console:
marketplace.js:95 Error fetching marketplace listings: FirebaseError: Missing or insufficient permissions.
    at index.esm2017.js:4380:20
    at su.onMessage (index.esm2017.js:11326:19)
    at index.esm2017.js:11280:27
    at index.esm2017.js:11303:61
    at index.esm2017.js:15151:73
    at index.esm2017.js:15184:54
fetchMarketplaceData    @    marketplace.js:95

These are my firestore database rules:
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS (Corrected Syntax) ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isFriend(targetUserId) {
        return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && request.auth.uid in get(/databases/$(database)/documents/users/$(targetUserId)).data.friends;
    }

    function canReadProfile(userId) {
      let userDocData = getUserData(userId);
      let privacySetting = userDocData.get('privacy.profileVisibility', 'Public');
      
      return privacySetting == 'Public' ||
             (privacySetting == 'Friends Only' && isFriend(userId)) ||
             isUser(userId) ||
             isAdmin();
    }

    function canReadCollection(userId) {
      let userDocData = getUserData(userId);
      let privacySetting = userDocData.get('privacy.collectionVisibility', 'Public');
      
      return privacySetting == 'Public' ||
             (privacySetting == 'Friends Only' && isFriend(userId)) ||
             isUser(userId) ||
             isAdmin();
    }

    // --- USER PROFILES & SUBCOLLECTIONS ---
    match /users/{userId} {
      allow read: if canReadProfile(userId) || isUser(userId);
      allow list: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if (isUser(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'isContentCreator', 'ratingCount', 'completedTrades', 'averageAccuracy', 'averagePackaging'])) || isAdmin();

    match /collection/{cardId} {
  allow read: if isUser(userId) || canReadCollection(userId);
        allow list: if isSignedIn();
        allow create, update, delete: if isUser(userId);
      }
      match /wishlist/{docId} {
        allow read, list, create, update, delete: if isUser(userId);
      }
      match /decks/{deckId} {
        allow read: if true;
        allow list, create, update, delete: if isUser(userId);
      }
      match /referrals/{referralId} {
        allow read: if isUser(userId);
      }
      match /private/{docId} {
        allow read, write, delete: if isUser(userId);
      }
      match /notifications/{notificationId} {
        allow read, list, create, update, delete: if isUser(userId);
      }
      match /badges/{badgeId} {
        allow read: if true;
        allow write: if false;
      }
    }
    
    // --- All other rules from your original file ---
    // (I've included them here for completeness)

    match /marketplaceListings/{listingId} {
      allow list, read: if true;
      allow write: if false;
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if (isUser(resource.data.authorId)) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'poll']));
      allow delete: if isUser(resource.data.authorId) || isAdmin();
    }

    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /publicDecks/{deckId} {
      allow read: if true;
      allow create: if isUser(request.resource.data.authorId);
      allow update: if (isUser(resource.data.authorId)) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratingCount', 'averageRating']));
      allow delete: if isUser(resource.data.authorId);

      match /ratings/{userId} {
        allow read: if true;
        allow write: if isUser(userId);
      }
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
      }
    }

    match /articles/{articleId} {
      allow read: if resource.data.status == 'published';
      allow create: if isSignedIn();
      allow update, delete: if isUser(resource.data.authorId) || isAdmin();

      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/articles/$(articleId)).data.status == 'published';
        allow create: if isSignedIn();
        allow update, delete: if isUser(resource.data.authorId) || isAdmin();
      }
    }

    match /groups/{groupId} {
      allow list: if isSignedIn();
      allow get: if resource.data.isPublic == true || (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.participants);
      allow create: if isSignedIn();
      allow update: if (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.moderators) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'participantCount', 'participantInfo']));
      allow delete: if isUser(resource.data.creatorId);

      match /posts/{postId} {
        allow create, read: if (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.participants);
        allow update, delete: if isUser(resource.data.authorId) || (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.moderators);
      }
    }

    match /trades/{tradeId} {
      allow read, list: if request.auth.uid in resource.data.participants;
      allow create: if isUser(request.resource.data.proposerId);
      allow update: if request.auth.uid in resource.data.participants;
    }

    match /feedback/{feedbackId} {
      allow read: if true;
      allow create: if isSignedIn();
    }

    match /disputes/{disputeId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    match /conversations/{conversationId} {
      allow list: if isSignedIn() && request.auth.uid in request.query.where.participants;
      allow read, update, delete: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read, list: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if request.resource.data.senderId == request.auth.uid;
      }
    }

    match /events/{eventId} {
      allow list, read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isUser(resource.data.organizerId) || isAdmin();

      match /participants/{participantId} {
        allow read: if true;
        allow write: if isUser(participantId) ||
                       isUser(get(/databases/$(database)/documents/events/$(eventId)).data.organizerId) || isAdmin();
      }
    }

    match /friendRequests/{requestId} {
      allow read, list, update, delete: if isUser(resource.data.senderId) || isUser(resource.data.receiverId);
      allow create: if isUser(request.resource.data.senderId);
    }

    match /groupInvitations/{inviteId} {
      allow create: if isUser(request.resource.data.inviterId);
      allow read, list, delete: if isUser(resource.data.inviteeId);
    }

    match /lfg_status/{statusId} {
      allow read, list: if isSignedIn();
      allow write: if isUser(statusId);
    }

    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }
  }
}

The cards were put in marketplaceListings in firestore database, originally at least, but the damn AI changed it recently.
Can you see how it looks now?
Also, the currency selector in the header loaded by auth.js doesn't do shit, neither do the one in settings. They need to be synchronized and functional.
